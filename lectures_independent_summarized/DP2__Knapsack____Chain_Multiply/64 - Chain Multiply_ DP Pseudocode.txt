Dynamic programming algorithm for minimum matrix chain multiplication cost calculates min cost to multiply N matrices. Sizes are given by n+1 numbers: M0 to Mn. Cost is 0 for diagonal since no computation needed. Algorithm utilizes width parameter S, starting from S=1 to n-1, avoiding last row. For each width, using varying index i for row, determines end index j (j=i+s) for substring defined. Then calculates C(i,j) by minimizing across all possible splits at index L between i and j-1. Cost at L adds costs of left, right subtrees (C(i,l), C(l+1,j)) with Mi-1, Ml, Mj. Minimization process loops through all L values to find current min. Nested loops used to compute for each subproblem, with final answer C(1,n) as top right matrix entry, representing min cost of A1 through An product. Runtime is O(n^3) due to three nested loops, different from usual method of filling in table row by row, algorithm progresses through substrings from diagonal to top right cell.