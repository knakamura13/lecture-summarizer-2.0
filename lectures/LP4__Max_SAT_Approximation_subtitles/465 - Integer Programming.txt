Our second approach, we'll use Linear programming to get an approximation algorithm for Max-SAT. To do that, we'll use a stronger form of Linear programming known as Integer Linear Programming. Before we get into that, first, let's recall the general form of Linear Programming. Is a linear programming canonical form? For the variable vector X, where maximizing C transpose X, subject to the following constraints. Ax â‰¤ b, and X is non-negative. This is a canonical form for Linear program. Now, in an Integer Linear Program, so in ILP, it has the same canonical form with one additional constraint, X is constrained to be in Z to the N, where Z are the integers. So if you think of the vector X of size N, this constraint is saying that each Xi is integer value. So what's going on geometrically? In the linear program, we had a feasible region, this convex set, define by these constraints, and we're trying to find the best real numbered point X in that feasible set, so that we maximize this objective function, but we consider all real numbered points in that set X. Now we're placing this grid, this N dimensional grid, and we're only looking at the grid points contained in that feasible set. Those are the only feasible points now. We want to find the best grid point which maximizes this objective function. Linear program had a nice property that there always is a vertex of the feasible region which is an optimal point, which maximizes this objective function. We no longer have such a property for Integer Linear Programming. And whereas linear programming is, polynomial time solvable, so it lies in the class P. In contrast, integer linear programming is NP-hard, and we're going to see that right now. We're going to see how to reduce Max-SAT to Integer Linear Programming. In fact, many of the NP complete problems that we've seen so far, such as vertex cover, independent set, and so on are easy to reduce to Integer Linear Programming. So it's quite powerful technique. Well since, ILP, Integer Lienear Programming is NP-hard, we can expect to solve it in polynomial time. So what's our game plan? Well first, we're going to see how to reduce SAT or Max-SAT to Integer Linear Programming, then we're going to look at the Linear Programming relaxation. So we're going to ignore this one constraint, this integer value constraint. So we're going to look at the best real number point X. Of course, the objective function might go up. We're going to use this real number point X which is the optimal solution to the Linear Program, to find an integer point which is nearby. That's going to give us a feasible solution to the Integer Linear Program, and then we'll see how far away it is from the optimal solution. And that will give us our approximation algorithm to the Max-SAT