Now, let's consider problems A and B, and I want to show a reduction from A to B. And I want us to see what exactly that means. Now, as an example, we can think of A, problem A as the colorings problem, and problem B as the satisfiability problem. Now, this is a notation that we're going to use for a reduction. This is the same notation that's used in the Dasgupta textbook. Now, an alternative notation for reduction is that A is at most B. What does this notation mean? It means that when we show a reduction from A to B, we're showing that B is at least as hard computationally as A, because if we can solve B then we can solve A. Now, if we're trying to devise an algorithm, it'll be easier to devise an algorithm for A. Why? Because if we devise an algorithm for B, then not only do we solve B, but we also solve A. Whereas if we solve A, we may just solve A. We may not necessarily solve B at the same time. Now, let's formalize what exactly we mean by a reduction. So, a reduction from A to B means the following. So, verbally, this notation means reducing A to B. Formerly, this means that if we have an algorithm which solves problem B in polynomial time, so in this case, the SAT problem, then we can use that algorithm for problem B. So, in this case the SAT algorithm, we can use it to solve A in polynomial time. So, a reduction from the colorings problem to the SAT problem means that, if we have an algorithm to solve satisfiability in polynomial time, then we can use that algorithm to solve the colorings problem in polynomial time. Okay, let's dive into this and see how we actually show a reduction. How do we show a reduction from colorings to satisfiability?