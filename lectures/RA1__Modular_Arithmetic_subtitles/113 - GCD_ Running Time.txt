Let's take a look at the running time of Euclid's algorithm. The only non-trivial step in each round is computing X mod Y. How long does that take to compute? Well that involves dividing X by Y which takes the order N squared time, where N is the number of bits. So the time is order N square time per round. How many rounds or recursive calls do we have in this algorithm though? Here's the key lemma for figuring out the number of rounds. If X is at least Y which is the case for our algorithm the first parameter is always at least the second parameter. Then X mod Y, which is the second parameter in our recursive call, that's the only parameter which is changing, is strictly less than X over two. So the one parameter which is changing goes down by a factor of at least two. So let's take a look at the algorithm. Let's say we have a call with X and Y, then a recursive call is going to be Y, X mod Y. What happens in our next recursive call? Well this second parameter is going to become the first parameter. So we get X mod Y, is the first parameter. What's the second parameter? The second parameter is Y mod X mod Y. Okay, it's a little bit hard to write. Let's skip it. It's not important. What does this lemma tell us? It tells us this X mod Y, which is right here, this is strictly less than X over two. So notice after two rounds of the algorithm, what happens to the first parameter? It went down by least a factor two. So how many rounds does the algorithm have? It's going to have at most two N rounds. Why? Because every other round we've shown the first parameter goes down by a factor of at least two. Since we have order N rounds and we have order N squared time per round, the total running time is order N cubed. So we've established the running time of the algorithm modulo this lemma. Let's go ahead and prove this lemma which is would be quite straightforward to prove. Once we break it up into the appropriate cases the proof will be almost immediate. We're going to break it up based on the size of Y, either Y is small and then X mod Y is immediately small, or Y is big and then we'll figure out another reason why X mod Y is small. So let's first take the case where Y is small. Let's say Y is at most X over two. What do we know about X mod Y? How big can it be? The largest it can be is Y minus one which is smaller than Y. What we know about Y? Y is at most X over two. So what have we shown? We've show that X mod Y is strictly smaller than X over 2 which is what we're trying to prove. Now let's take the case where Y is big. Y is strictly greater than X over 2. What do we know about X divided by Y? Well Y goes into X at most one time. So this is one. So what does that imply about X mod Y? In order to get the remainder when we do X divided by Y, we just have to subtract off Y one time from X. So X mod Y is equal to X minus Y. Well we know that Y is strictly greater than X over 2, so X minus Y is strictly smaller than X minus X over 2 because Y is strictly bigger than X over 2. And this is clearly at most X over 2. And that's what we're trying to prove. We prove that X mod Y is strictly smaller than X over 2, which is what we're trying to prove in the lemma. That completes the proof of the lemma, and therefore we've shown that the running time of Euclid's algorithm is order N cubed time.