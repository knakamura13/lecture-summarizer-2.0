Now we can detail the pseudocode for the FFT algorithm. Now, the first input is vector A, which are the coefficients for this polynomial A(x), and we're assuming that n is a power of two. What is this second input? This Omega? Omega is an nth root of unity. For now, just think of Omega as Omega_sub_n. In polar coordinates, this is 1, 2 pi over n. And using Euler's formula, this is e to the two pi i over n. For now, you can view Omega as Omega_sub_n. But later, we're going to use this exact same algorithm. This is identical pseudocode with a different Omega. We're going to use Omega as Omega_sub_n to the n - first power. And that's going to allow us to do inverse FFT. In inverse FFT, we're going from the value of the polynomial at n points to the coefficients. Now, what's the output of the FFT algorithm? Well it's the value of the polynomial at the nth roots of unity. If Omega is Omega_sub_n, what are the nth roots of unity? Well it's just the powers of this. So, the output is a evaluated at Omega to the zero, a evaluated at Omega, a of Omega squared, and so on, up to a at Omega to the n - first power. When Omega equals Omega_sub_n, this gives a evaluated at the nth roots of unity.