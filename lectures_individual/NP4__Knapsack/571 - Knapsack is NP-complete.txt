You just proved that the subset sum problem is NP-complete. Now a nice homework problem is to use that fact that subset sum problem is NP-complete and then prove that the knapsack problem is NP-complete. And make sure that you use the correct version of the knapsack problem. The version that which lies in the class NP. Now to prove that the knapsack problem or any problem is NP-complete, there's two parts: You first have to prove that the desired problem lies in the class NP, and second you have to take a known NP-complete problem and you have to reduce the known NP-complete problem to this new problem, in this case knapsack problem. We know that all problems in NP reduce to this known NP-complete problem, therefore if we show a reduction from this known NP-complete problem to the knapsack problem, then we know that all problems in NP reduced to the knapsack problem. Which problem are you going to use for this part? Well I'm not trying to trick you, so what are you going to use is the problem that looks most similar to the knapsack problem, in this case is subset sum problem. On the homework or exam, if you have a graph problem which you're trying to prove is NP-complete, what are you going to use here? Probably a graph problem which sounds similar or looks similar to the desired problem. If you have a logic problem you're trying to prove is NP-complete and probably you're going to use set or three set over here. The other thing to make sure of is that you're doing the reduction in the correct direction. So you're assuming you have a polynomial time algorithm for this problem and you are using that to solve this problem in polynomial time. So you have taken input to this known NP-complete problem and reduce it, transform it into an input for this problem. Then if we take a solution to this problem then you can transform it back to a solution to this original problem. So you have to transform inputs from this known NP-complete problem to inputs to this new problem. That's a common mistake that students make, even though they write the direction this way, they actually do the reduction in the other direction. They take inputs for this problem and transform it to input to this problem. You have to make sure you're doing it the correct direction. So you take inputs to the known NP-complete problem and transform it to inputs to this new problem.