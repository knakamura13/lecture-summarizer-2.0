1
00:00:00,000 --> 00:00:03,240
 Let's look again at why the random surfer model is ergodic.

2
00:00:03,240 --> 00:00:04,860
 We have our original web graph,

3
00:00:04,860 --> 00:00:07,890
 capital G. Now, what happens in the random surfer model?

4
00:00:07,890 --> 00:00:09,405
 Well, with probably alpha,

5
00:00:09,405 --> 00:00:14,151
 we follow a random outgoing link in G. And with probably one minus alpha,

6
00:00:14,151 --> 00:00:16,640
 we go to a random web page in the entire graph.

7
00:00:16,640 --> 00:00:19,350
 This corresponds to adding in the complete graph,

8
00:00:19,350 --> 00:00:23,100
 where capital N is the number of vertices in this original graph.

9
00:00:23,100 --> 00:00:25,875
 So, this defines our new graph, G-prime.

10
00:00:25,875 --> 00:00:28,600
 Now, suppose that alpha is strictly less than one.

11
00:00:28,600 --> 00:00:30,855
 That means, with some positive probability,

12
00:00:30,855 --> 00:00:33,590
 we use these edges from the complete graph.

13
00:00:33,590 --> 00:00:36,810
 So, if we consider any pair of states, i and j.

14
00:00:36,810 --> 00:00:40,990
 Let's look at the probability of going from state i to state j in one step.

15
00:00:40,990 --> 00:00:43,455
 Well, if alpha is strictly less than one,

16
00:00:43,455 --> 00:00:44,730
 then there's some chance,

17
00:00:44,730 --> 00:00:48,180
 some probability, of going from state i to state j,

18
00:00:48,180 --> 00:00:50,740
 using this last type of transition.

19
00:00:50,740 --> 00:00:52,710
 That means, in the transition matrix,

20
00:00:52,710 --> 00:00:56,040
 the entry i j in the matrix P is

21
00:00:56,040 --> 00:00:59,400
 positive and all the entries in this matrix are positive.

22
00:00:59,400 --> 00:01:01,500
 There is no zero entries in this matrix.

23
00:01:01,500 --> 00:01:04,290
 It's a fully connected transition matrix.

24
00:01:04,290 --> 00:01:06,660
 Therefore, if alpha is strictly less than one,

25
00:01:06,660 --> 00:01:09,290
 then this random surfer model is ergodic.

26
00:01:09,290 --> 00:01:11,205
 Now, what happens if alpha equals one,

27
00:01:11,205 --> 00:01:13,500
 then we're not using this random button here?

28
00:01:13,500 --> 00:01:16,250
 So, we're just using the original graph and there's

29
00:01:16,250 --> 00:01:19,860
 no reason why the original graph is going to be ergodic.

30
00:01:19,860 --> 00:01:22,575
 The original graph that we're interested in is this graph,

31
00:01:22,575 --> 00:01:26,205
 G. Instead, we're looking at this graph, G-prime.

32
00:01:26,205 --> 00:01:28,430
 For the case alpha less than one,

33
00:01:28,430 --> 00:01:32,180
 we need this condition that alpha is less than one in order for it to be ergodic.

34
00:01:32,180 --> 00:01:33,540
 But how does this new graph,

35
00:01:33,540 --> 00:01:36,610
 G-prime, compare to this original graph, G?

36
00:01:36,610 --> 00:01:40,380
 In particular, how does the principle eigenvector for this graph G-prime,

37
00:01:40,380 --> 00:01:42,580
 this PageRank vector for G-prime,

38
00:01:42,580 --> 00:01:46,430
 compare to the properties of the original graph G?

39
00:01:46,430 --> 00:01:48,195
 While this is a somewhat vague,

40
00:01:48,195 --> 00:01:50,987
 very triggering, but a very vague question.

41
00:01:50,987 --> 00:01:52,130
 i don't know how to address it.

42
00:01:52,130 --> 00:01:53,450
 But what we can look at is,

43
00:01:53,450 --> 00:01:55,545
 what is the effect of varying alpha?

44
00:01:55,545 --> 00:01:58,650
 How does the PageRank vector change as we vary alpha?

45
00:01:58,650 --> 00:02:00,270
 Well, if alpha is large,

46
00:02:00,270 --> 00:02:01,590
 if it's close to one,

47
00:02:01,590 --> 00:02:05,880
 then this graph G-prime is close to the original graph, G. So we hope that

48
00:02:05,880 --> 00:02:10,845
 the properties of G-prime are close to the properties of G. As alpha gets smaller,

49
00:02:10,845 --> 00:02:13,980
 then this complete graph is becoming bigger and we're

50
00:02:13,980 --> 00:02:17,925
 becoming further away from the original graph, G. But there's a trade-off.

51
00:02:17,925 --> 00:02:21,090
 As alpha decreases, our convergence rate to

52
00:02:21,090 --> 00:02:25,070
 the PageRank vector to the principle eigenvector is going to go faster.

53
00:02:25,070 --> 00:02:27,810
 We're going to converge faster to this principle eigenvector,

54
00:02:27,810 --> 00:02:29,730
 because of this complete graph,

55
00:02:29,730 --> 00:02:31,480
 as this becomes bigger,

56
00:02:31,480 --> 00:02:33,440
 yet the mix faster.

57
00:02:33,440 --> 00:02:35,115
 Now, according to Wikipedia,

58
00:02:35,115 --> 00:02:39,380
 Google uses alpha as 0.85.

59
00:02:39,380 --> 00:02:42,600
 This presents a reasonable trade-off between these two scenarios.

60
00:02:42,600 --> 00:02:44,130
 But an interesting question is,

61
00:02:44,130 --> 00:02:47,715
 how does the PageRank vector change as we vary alpha?

62
00:02:47,715 --> 00:02:50,057
 But if we look at alpha big like 0.99 or 0.95,

63
00:02:50,057 --> 00:02:54,007
 compared to alpha is 0.85 or 0.75.

64
00:02:54,007 --> 00:02:56,760
 How does a PageRank vector change?

65
00:02:56,760 --> 00:02:58,890
 For example, if you look at the top sites,

66
00:02:58,890 --> 00:03:01,530
 those sites with the largest PageRank vectors,

67
00:03:01,530 --> 00:03:04,455
 how does a set of top sites change with alpha?

68
00:03:04,455 --> 00:03:07,110
 And does their ordering change with alpha?

69
00:03:07,110 --> 00:03:10,830
 So, if you implement the PageRank algorithm and you take a large dataset,

70
00:03:10,830 --> 00:03:13,990
 then you can look at what is the effect of

71
00:03:13,990 --> 00:03:13,990
 varying alpha on the ordering of the sites, according to PageRank.

