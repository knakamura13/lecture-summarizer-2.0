Exploring LCS (longest common subsequence) in sequences X and Y when last chars differ, with important observations: if last char of LCS is in X (Xi â‰  Yi), then Yi isn't included, vice versa if last char of LCS is in Y. LCS with both chars dropped reverts to subsequence of length (i-1) without increment. In other cases with just Xi or Yi dropped, no ready solution as prefix lengths differ, thus solution not in table. Current subproblem definition inadequate because it relies on equal-length prefixes. Key insight: subproblem must permit prefixes of differing lengths. Thus, redefining subproblems with two parameters i and j to represent lengths of X and Y prefixes respectively, resulting in a 2D table where L(i,j) gives LCS length of X1:Xi with Y1:Yj, allowing exploration of all i, j possibilities.