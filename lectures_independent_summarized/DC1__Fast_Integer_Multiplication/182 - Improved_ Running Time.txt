New algorithm divides a problem into three sub-problems, each involving the multiplication of n/2-bit numbers, recursively computed. The combination step of these sub-problems takes O(n) time. By solving the recurrence relationship with the substitution method, we observe it creates a geometric series with log2n terms, which leads to an increasing series where the last term is dominant. The complexity is therefore determined to be O(n * (3/2)^log2n). Upon simplifying, the complexity translates to O(n^(log2^3)), which evaluates to O(n^1.59) through the conversion of the base of the exponent. Hence, the algorithm improves from O(n^2) to O(n^1.59). Further reduction of the exponent is possible by segmenting the input into more parts; however, this increases the constant hidden in the Big O notation, making the combination of solutions more computational intensive.