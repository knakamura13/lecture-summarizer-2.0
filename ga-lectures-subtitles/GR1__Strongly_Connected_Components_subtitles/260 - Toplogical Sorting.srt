1
00:00:00,000 --> 00:00:01,800
 Now let's take a look at DAGs.

2
00:00:01,800 --> 00:00:03,735
 These are directed acyclic graphs.

3
00:00:03,735 --> 00:00:06,600
 Acyclic means that there are no cycles in the graph.

4
00:00:06,600 --> 00:00:08,775
 What we just saw is that the graph has a cycle

5
00:00:08,775 --> 00:00:11,575
 if and only if the DFS tree has a back edge.

6
00:00:11,575 --> 00:00:12,775
 Since there are no cycles,

7
00:00:12,775 --> 00:00:15,330
 there's going to be no back edges in our DFS tree.

8
00:00:15,330 --> 00:00:16,525
 Now what we're going to try to do is,

9
00:00:16,525 --> 00:00:19,955
 we're going to try to top allegedly sort that DAG. What does that mean?

10
00:00:19,955 --> 00:00:22,890
 We're going to order the vertices so that all edges go from

11
00:00:22,890 --> 00:00:27,080
 lower order number vertex to a higher order number of vertex.

12
00:00:27,080 --> 00:00:31,745
 So for instance, if we write down the vertices in order from lowest to highest,

13
00:00:31,745 --> 00:00:34,725
 then all edges are going to go from left to right.

14
00:00:34,725 --> 00:00:37,010
 We're not going to have any edges going backwards.

15
00:00:37,010 --> 00:00:38,880
 To topologically sort this DAG,

16
00:00:38,880 --> 00:00:42,320
 what we're going to do is, we're just going to run DFS on this DAG.

17
00:00:42,320 --> 00:00:44,435
 What is the key property we know for this DAG?

18
00:00:44,435 --> 00:00:46,375
 We know it has no back edges.

19
00:00:46,375 --> 00:00:50,775
 What do we know about the post order numbers for all other types of edges?

20
00:00:50,775 --> 00:00:52,067
 We know that for back edges,

21
00:00:52,067 --> 00:00:55,115
 the post order number increases along the edge.

22
00:00:55,115 --> 00:00:56,420
 For all other types of edges,

23
00:00:56,420 --> 00:00:59,240
 the post order number goes down along the edge.

24
00:00:59,240 --> 00:01:01,550
 Now we want to order the vertices from lowest to

25
00:01:01,550 --> 00:01:04,760
 highest so that all edges go left to right.

26
00:01:04,760 --> 00:01:08,195
 So which vertex do we want to put first?

27
00:01:08,195 --> 00:01:12,065
 We want to put the vertex with highest post order number first and therefore

28
00:01:12,065 --> 00:01:16,475
 all edges are going to go from higher post order number to lower post order number,

29
00:01:16,475 --> 00:01:18,145
 because there are no back edges.

30
00:01:18,145 --> 00:01:21,045
 Just to summarize, we know for every edge of the graph.

31
00:01:21,045 --> 00:01:25,790
 So for instance this edge from Z to W. We know that the post order number of

32
00:01:25,790 --> 00:01:27,770
 Z is greater than the post order number of

33
00:01:27,770 --> 00:01:31,095
 W. So in order to topologically sort the graph,

34
00:01:31,095 --> 00:01:34,460
 we order the vertices by decreasing post order number.

35
00:01:34,460 --> 00:01:39,080
 The highest post order number comes first and the lowest post or number comes last.

36
00:01:39,080 --> 00:01:41,150
 So in order to top logically sort a DAG,

37
00:01:41,150 --> 00:01:46,280
 we just have to do one run of DFS and then sort by decreasing post order number.

38
00:01:46,280 --> 00:01:49,670
 Now how long does it take us to sort by decreasing post order number?

39
00:01:49,670 --> 00:01:51,650
 Now you might think this is order n log n time,

40
00:01:51,650 --> 00:01:53,020
 because we have to do sorting.

41
00:01:53,020 --> 00:01:55,525
 Now what is the range of these post order numbers?

42
00:01:55,525 --> 00:01:56,895
 Where the clock starts at one,

43
00:01:56,895 --> 00:01:59,060
 so all the post order numbers are at least one.

44
00:01:59,060 --> 00:02:00,790
 How large can the post order number be?

45
00:02:00,790 --> 00:02:03,650
 Or the maximum imposed order number is going to be two times n

46
00:02:03,650 --> 00:02:07,610
 so all the post order numbers range between one and 2n.

47
00:02:07,610 --> 00:02:10,660
 So what can you do? You can make an array of size 2n.

48
00:02:10,660 --> 00:02:12,470
 Now we can go through the vertices,

49
00:02:12,470 --> 00:02:15,470
 take their post order number and insert them into

50
00:02:15,470 --> 00:02:18,710
 the appropriate place in the array based on their post order number.

51
00:02:18,710 --> 00:02:20,720
 Now we go through this array from highest to

52
00:02:20,720 --> 00:02:24,530
 smallest and we just output the vertices as we see them.

53
00:02:24,530 --> 00:02:28,580
 This gives us the vertices in decreasing order of post order number.

54
00:02:28,580 --> 00:02:31,685
 How long does this take to construct? Just takes linear time.

55
00:02:31,685 --> 00:02:34,460
 So it takes order n time to sort the vertices by decreasing

56
00:02:34,460 --> 00:02:39,100
 post order numbers and takes linear order n plus M time to run DFS.

57
00:02:39,100 --> 00:02:39,100
 So the total algorithm takes order N plus M time.

