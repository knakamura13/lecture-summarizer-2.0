Now this new version of the Knapsack problem does lie in the class NP, we can prove that now. So consider a particular input to the Knapsack-search version, we have the integer weights, integer values, total capacity, and our goal, and consider a particular solution. In order to check that this is in fact a solution, what do we need to do? We need to check that the total weight is in most capital B. So how to do that before. That's easy. We're just summing up at most order numbers. And now instead of checking that it has maximum total value, we just have to check that the total value is at least a little g. This again involves just adding up order n numbers. So we can check these two in O(n) time. We can check a proposed solution in polynomial time. Therefore, this version of Knapsack, the Knapsack-search version does in fact lie in the class NP. Now, let me just be a little bit more precise about one aspect which may be confusing some people. You may ask, "Does this really take O(n) time to some of these numbers?" Well, if you really look at it in terms of the magnitude of these numbers, we had capital V as the sum of all values. That's led capital W to note the sum of all weights. Certainly to add up to these numbers, the time required is at most the number of bits. The number of bits in each of these numbers is at most log of capital W. So the time required to compute this sum is the most order n times log of capital W. To compute this sum is the most O(nlogW). Since the input side is log of capital W and log of capital V, this is still polynomial in the input size. So it is correct that Knapsack-search version does lie in the class NP. We just verify-