Now, let's summarize our approach. We have this polynomial, A of x of degree at most n minus one, and we want to evaluate this polynomial at two n points x_1 through X_2n. And we get to choose these two n points however we want. And we're looking at how we choose these points. One very minor point that I wanted identify now is why we consider this polynomial at 2n points instead of n points. And in fact, later we'll go back and we'll look at it at n point, instead of 2n points. But for now, we want this polynomial A of x at 2n points. Why? Because of our application to polynomial multiplication. Recall, our first step in our construction is to define this pair of polynormial Aeven, and Aodd. We do this by taking the even turns of A of x to define Aeven, and the odd terms define Aodd. Whereas the original polynomial A of X was of degree n most n minus one. Each of these polynomials is of degree at most n over to minus one, so the degree went down by half. Next, we recursively run the FFT algorithm on this pair of polynomials, and we'll evaluate these pair of polynomials at n points. What are the n points? The n points that we evaluate this pair of polynomials at are these points Y_1 through Y_n, which are the squares of these two n points. Since the original two n points satisfy the plus minus property, then x_1 is the opposite of X_n plus 1. So these squares are the same. That's our first point Y_1. X_2 is the opposite of X_n plus 2. So their squares are the same and that's Y_2, and so on up to Y_n, which is X_n square and x_2n square. Why do we want this pair of polynomials at the square of these two n points? We'll recall, to evaluate this polynomial A at this point X. It's straight forward if we know Aeven and Aodd at the point X square. So if we know this pair of polynomials at the square of these points then it's straight forward to get A at these two n points. In particular, in order one time per point, we can evaluate this polynomial A of x at that point, using Aeven and Aodd at the square of that point. So, in order n total time, we can get this polynomial A of x at these two n points, using Aeven and Aodd at these n points, which are the squares of these two n points. This is the high level idea of our divide and conquer algorithm for FFT. What's the running time of this algorithm? Well let T of n denote the running time of input of size n, we have two sub problems of exactly half the size. So, two t of n over two, takes us order and time to form these two polynomials, and it takes us order n time to merge their solution together, to get the solution to the original problem. So we get the following recurrence, T of n is most two T of an over two plus order n. This is the same recurrence in the classic merge sort and many of you must recall that it resolves to order n login. So it looks like we have an order, nlogn time algorithm to solve this problem. All we need is that these two n points satisfy the plus minus property. So the first n are opposite of the second n. But notice we're going to recursively run this problem on this pair polynomials Aeven and Aodd with the square of these points. So again, we're going to need the plus minus property for this sub problem, and for all smaller subproblems. Looking for this sub problem, we have Y_1 through Y_n. We need the first n over two to be the opposite of the second n over two. It will be straightforward to define two n points which satisfy the plus minus property. The challenge will be to define two n points which satisfy the plus minus property, and for all recursive sub problems to also satisfy the plus minus property. So let's dive into how we achieve.