Now that we've completed the FFT algorithm, let's go back and look at our original motivation which was polynomial multiplication or equivalently, computing the convolution of a pair of vectors. The input is a pair of vectors A and B of length n, corresponding to the coefficients for a pair of polynomials A of X and B of X. The output is the vector C, which are the coefficients for the polynomial C of X, which is A of X times B of X. Equivalently, C is a convolution of A and B. In order to multiply these polynomials A of X and B of X, we want to convert from the coefficients A and B to the values of these polynomials A of X and B of X. How many points do we need these polynomials at? Well C is of degree two n minus two. So we want these polynomials are actually C of X at at least two and minus one points. In order to maintain that n is a power of 2, we'll evaluate A of X and B of X at two endpoints. In order to do that, we'll run FFT. We will consider A of X and B of X as polynomials of degree 2n minus one. So we'll just pad this vector with zeros. So we run FFT with this vector A and the two and three of unity. And this is going to give us a polynomial A of X at the two nth root unity. Similarly we went FFT with this vector B and the two nth root of unity and we get the polynomial B of X at the two nth roots of unity. So now we have these polynomials A of X and B of X at the same two endpoints. Now given A of X and B of X at the two nth roots of unity, we can compute C of X at the 2 nth roots of unity. We have a for loop J, which goes over 0 to 2n minus one. So goes over all these two endpoints and we multiply these pair of numbers. Even though these are complex numbers, it takes us order one time to compute the product of these pair of numbers. So it takes us order one time to compute C of X at the Jth of the two nth roots of unity. So it takes us order one time to compute T of J and therefore takes this order n time to compute C of X at the two nth roots of unity. Now we have C of X at the two nth roots of unity. Now we have to go back from the value of this polynomial at these two endpoints and figure out the coefficients. This is opposite of what we were doing before. Before we were going from the coefficients to the values. Now we want to go from the values back to the coefficients. How are we going to do this? What we're going to run an inverse FFT. And amazingly enough, the inverse FFT is almost the same as the original FFT algorithm.