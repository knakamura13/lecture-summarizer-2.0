Let's look at one more variant of shortest path problem and this will give us a chance to look at a slightly different style of dynamic programming solution. So what we did before with Bellman-Ford was we had a single source and we looked at the shortest path from that single source to all other vertices. Now we're going to look at all pairs shortest path. Once again we're given a directed graph, G, along with edge weights. And these edge weights again can be positive or negative. Now, for a pair of vertices Y and Z, let's define dist of y, z to be the length of the shortest path from y to z. Previously, we are always looking at the shortest path from a single start vertex S to the given vertex. Now we're looking at for all pairs of vertices, we're looking at the shortest path. So we have this N squared size matrix dist. Our goal in this problem is to find the length of the shortest path between from y to z and we want to do it for all pairs of vertices Y and Z. So for all N squared vertices, we want to find the distance from Y to Z. Now last lecture we saw Bellman-Ford algorithm, which did the distance from a single start vertex s to all other vertices. Can we use that as an easy algorithm to solve this all pairs shortest path problem? Yes. So the easy approach to solve this all pairs shortest path problem is to run Bellman-Ford algorithm which has a single start vertex and we try all N possibilities for the start vertex. So we run Bellman-Ford-