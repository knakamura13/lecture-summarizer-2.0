Now going back to our earlier reduction, we showed how to take input formula for SAT and transform it into an input formula for 3SAT. This was the reduction for creating f prime. And then we just proved that the original formula f is satisfiable if and only if this new formula, f prime is satisfiable. Now, what remains? While we run our 3SAT algorithm, our black box algorithm on f prime, if it produces no, that there is no satisfying assignment, then we say no, there is no satisfying assignment for f. What if it produces a satisfying assignment? So suppose it gives us a satisfying assignments Sigma prime which satisfies f prime. Well, we have to produce a satisfying assignment for f. How do we transform this satisfying assignment, Sigma prime, to a satisfying assignment for f? What we just saw from this proof is that if we ignore the assignment for the new variables and keep the assignment for the original variables the same, then we get a satisfying assignment for f. So we take this satisfying assignment for f prime, we ignore the assignment for all of the new variables and the assignment for the original variables gives us a satisfying assignment for f. And that completes our reduction. One last thing to note is what is the size of f prime. F our original input SAT, has n variables and m clauses. How many variables does f prime have in the worst case? Well we might create n new variables for each clause. So it has order nm variables in the worst case. And we're also replacing every clause by order n clauses, in the worst case. So we have order nm clauses. But this is okay because the size of f prime is polynomial in the size of f. So we have an algorithm which is polynomial running time in the size of f prime. It's still polynomial in the size of f as well. So this completes our first NP completeness proof.