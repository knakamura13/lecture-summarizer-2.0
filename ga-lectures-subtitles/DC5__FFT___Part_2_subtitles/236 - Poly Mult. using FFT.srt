1
00:00:00,000 --> 00:00:02,260
 Now that we've completed the FFT algorithm,

2
00:00:02,260 --> 00:00:04,950
 let's go back and look at our original motivation which was

3
00:00:04,950 --> 00:00:08,055
 polynomial multiplication or equivalently,

4
00:00:08,055 --> 00:00:10,755
 computing the convolution of a pair of vectors.

5
00:00:10,755 --> 00:00:13,770
 The input is a pair of vectors A and B of length n,

6
00:00:13,770 --> 00:00:19,140
 corresponding to the coefficients for a pair of polynomials A of X and B of X.

7
00:00:19,140 --> 00:00:20,850
 The output is the vector C,

8
00:00:20,850 --> 00:00:24,120
 which are the coefficients for the polynomial C of X,

9
00:00:24,120 --> 00:00:28,200
 which is A of X times B of X. Equivalently,

10
00:00:28,200 --> 00:00:31,395
 C is a convolution of A and B.

11
00:00:31,395 --> 00:00:34,590
 In order to multiply these polynomials A of X and B of X,

12
00:00:34,590 --> 00:00:37,350
 we want to convert from the coefficients A and B

13
00:00:37,350 --> 00:00:40,995
 to the values of these polynomials A of X and B of X.

14
00:00:40,995 --> 00:00:43,785
 How many points do we need these polynomials at?

15
00:00:43,785 --> 00:00:47,390
 Well C is of degree two n minus two.

16
00:00:47,390 --> 00:00:53,400
 So we want these polynomials are actually C of X at at least two and minus one points.

17
00:00:53,400 --> 00:00:56,275
 In order to maintain that n is a power of 2,

18
00:00:56,275 --> 00:01:00,255
 we'll evaluate A of X and B of X at two endpoints.

19
00:01:00,255 --> 00:01:02,985
 In order to do that, we'll run FFT.

20
00:01:02,985 --> 00:01:08,750
 We will consider A of X and B of X as polynomials of degree 2n minus one.

21
00:01:08,750 --> 00:01:11,220
 So we'll just pad this vector with zeros.

22
00:01:11,220 --> 00:01:15,625
 So we run FFT with this vector A and the two and three of unity.

23
00:01:15,625 --> 00:01:20,335
 And this is going to give us a polynomial A of X at the two nth root unity.

24
00:01:20,335 --> 00:01:24,626
 Similarly we went FFT with this vector B and the two nth root

25
00:01:24,626 --> 00:01:29,365
 of unity and we get the polynomial B of X at the two nth roots of unity.

26
00:01:29,365 --> 00:01:34,380
 So now we have these polynomials A of X and B of X at the same two endpoints.

27
00:01:34,380 --> 00:01:37,590
 Now given A of X and B of X at the two nth roots of unity,

28
00:01:37,590 --> 00:01:41,025
 we can compute C of X at the 2 nth roots of unity.

29
00:01:41,025 --> 00:01:43,275
 We have a for loop J,

30
00:01:43,275 --> 00:01:45,660
 which goes over 0 to 2n minus one.

31
00:01:45,660 --> 00:01:50,555
 So goes over all these two endpoints and we multiply these pair of numbers.

32
00:01:50,555 --> 00:01:52,100
 Even though these are complex numbers,

33
00:01:52,100 --> 00:01:55,765
 it takes us order one time to compute the product of these pair of numbers.

34
00:01:55,765 --> 00:02:02,435
 So it takes us order one time to compute C of X at the Jth of the two nth roots of unity.

35
00:02:02,435 --> 00:02:06,500
 So it takes us order one time to compute T of J and therefore takes

36
00:02:06,500 --> 00:02:11,280
 this order n time to compute C of X at the two nth roots of unity.

37
00:02:11,280 --> 00:02:14,195
 Now we have C of X at the two nth roots of unity.

38
00:02:14,195 --> 00:02:16,530
 Now we have to go back from the value of

39
00:02:16,530 --> 00:02:21,075
 this polynomial at these two endpoints and figure out the coefficients.

40
00:02:21,075 --> 00:02:23,130
 This is opposite of what we were doing before.

41
00:02:23,130 --> 00:02:26,250
 Before we were going from the coefficients to the values.

42
00:02:26,250 --> 00:02:30,855
 Now we want to go from the values back to the coefficients. How are we going to do this?

43
00:02:30,855 --> 00:02:33,035
 What we're going to run an inverse FFT.

44
00:02:33,035 --> 00:02:33,035
 And amazingly enough, the inverse FFT is almost the same as the original FFT algorithm.

