Now, we're going to show a reduction from the feasible flow problem, to the max-flow problem. Recalling the feasible flow problem we're trying to find a feasible flow, not necessarily of maximum size. In the max-flow problem we're trying to find a valid flow of maximum size. Formally, what do we mean that we're reducing this problem to this problem? What it means is that we're going to use our algorithms, our polynomial time algorithms for the max-flow problem as a black box. So, it's as if we have this subroutine that we downloaded from the library and we don't want to touch the insides of this subroutine. We can simply give it an input flow network and we'll get out a solution. A flow, F prime of maximum size for this input flow network. Now, we want to use this black box algorithm for max-flow, to build an algorithm for the feasible flow problem. What we're going to do is, we're going to take an input to the feasible flow problem. What exactly is input to a feasible flow problem? Well, there's a directed graph G. There are capacities along every edge, specified by C of E, and there's also demands along every edge specified by D of E. Now, we're going to define a function G, which transforms this input to the feasible flow problem, into a valid input to the max-flow problem. Once again what does the input to the max-flow problem look like? Well, it consists of a directed graph. Not necessarily the same directed graph that we have for the feasible flow problem, we're going to make a new graph. So, we're going to define a new directed graph G prime, based on the directed graph G. And, we also need to specify the capacities along every edge. So, we'll define C prime of E to be the capacity along edges in this graph G prime. But, there are no demands in this graph. The input to the standard max-flow problem does not have any demand constraints. So, we have to somehow encode these demands in these capacities and in this graph G prime. Then, we're going to run our black box algorithm for the max-flow problem on this input. We're going to get some output F prime, and then we have to transform this output into a solution to the original feasible flow problem. So, we have to define a function, which would then notice H, which transforms this output, this solution to the max-flow problem on this input graph, G prime with capacity C prime. And H has to transform F prime into a flow F, where F is a feasible flow for this input, G, capacity C and domains D. So, to reduce feasible flow to max-flow, what we need to do is, we need to define this transformation function g. Which transforms an input from feasible flow into an input for max-flow. And we need to define this function h, which transforms the solution f prime for the max-flow problem on this input, G prime. And produces a solution f, which is a feasible flow for this input network, g with capacity C and demands d. So, in order to reduce feasible flow to max-flow, we need to specify this function transformation function g and this transformation function h. G transforms the input and h transforms the solutions.