1
00:00:00,000 --> 00:00:01,380
 let's go ahead and look at how we do

2
00:00:01,380 --> 00:00:03,149
 this insertion we want to insert this

3
00:00:03,149 --> 00:00:05,580
 element X into our dictionary of

4
00:00:05,580 --> 00:00:08,160
 unacceptable passwords first thing we do

5
00:00:08,160 --> 00:00:10,469
 is compute these two hash values so we

6
00:00:10,469 --> 00:00:13,679
 compute H 1 of X and H 2 of X think of

7
00:00:13,679 --> 00:00:15,780
 our balls and bins analogy we have this

8
00:00:15,780 --> 00:00:17,609
 ball ax and what we've done is we've

9
00:00:17,609 --> 00:00:21,090
 chosen two random bins H 1 of X and H 2

10
00:00:21,090 --> 00:00:23,970
 of X which bin do we add the ball ax

11
00:00:23,970 --> 00:00:26,580
 into we added into the least loaded at

12
00:00:26,580 --> 00:00:28,560
 all of these two bins what is the load

13
00:00:28,560 --> 00:00:30,269
 of the bin it's the size of the linked

14
00:00:30,269 --> 00:00:33,360
 list we can maintain the size of each of

15
00:00:33,360 --> 00:00:34,920
 these linked lists so that we can

16
00:00:34,920 --> 00:00:36,930
 quickly determine which of these two is

17
00:00:36,930 --> 00:00:39,329
 least loaded and then we can add in X

18
00:00:39,329 --> 00:00:41,190
 into that appropriate linked list and

19
00:00:41,190 --> 00:00:43,320
 then we can increment the size of that

20
00:00:43,320 --> 00:00:45,480
 linked list so this can all be done in

21
00:00:45,480 --> 00:00:48,690
 order one time for an insertion next

22
00:00:48,690 --> 00:00:50,399
 question is how do we do a query how do

23
00:00:50,399 --> 00:00:52,140
 we check whether an element Y up

24
00:00:52,140 --> 00:00:55,289
 proposed password Y is in our dictionary

25
00:00:55,289 --> 00:00:58,050
 of unacceptable passwords we start off

26
00:00:58,050 --> 00:00:59,789
 the same as an assertion we compute the

27
00:00:59,789 --> 00:01:03,000
 two hash values H one of Y and H 2 of Y

28
00:01:03,000 --> 00:01:05,280
 these are the two possible locations for

29
00:01:05,280 --> 00:01:07,950
 Y we have no way of determining which of

30
00:01:07,950 --> 00:01:09,960
 these two locations it might be in if at

31
00:01:09,960 --> 00:01:11,520
 all because we have no way of

32
00:01:11,520 --> 00:01:13,409
 determining what the dictionary looked

33
00:01:13,409 --> 00:01:15,390
 like at the time that we inserted Y if

34
00:01:15,390 --> 00:01:17,729
 we did insert Y so what do we do we

35
00:01:17,729 --> 00:01:19,950
 check both bins we check the linked list

36
00:01:19,950 --> 00:01:22,290
 at h1 of Y and we check the linked list

37
00:01:22,290 --> 00:01:25,560
 at h2 of Y and we look for Y in both of

38
00:01:25,560 --> 00:01:27,600
 these linked lists so we check the

39
00:01:27,600 --> 00:01:30,869
 linked list at H of H 1 of Y and we

40
00:01:30,869 --> 00:01:33,390
 check the linked list at H of H 2 of Y

41
00:01:33,390 --> 00:01:35,520
 and we look in both of these linked

42
00:01:35,520 --> 00:01:37,590
 lists for the element Y if it's in

43
00:01:37,590 --> 00:01:39,119
 either of these linked lists then we

44
00:01:39,119 --> 00:01:40,860
 know that Y is in the dictionary

45
00:01:40,860 --> 00:01:42,570
 if it's in either of these linked lists

46
00:01:42,570 --> 00:01:44,579
 then we know that Y was never inserted

47
00:01:44,579 --> 00:01:45,899
 into a dictionary of unacceptable

48
00:01:45,899 --> 00:01:48,540
 passwords so how long does it take to do

49
00:01:48,540 --> 00:01:51,000
 a query or the query time now depends on

50
00:01:51,000 --> 00:01:53,399
 the load at this location and the load

51
00:01:53,399 --> 00:01:55,680
 at this location so if we have an upper

52
00:01:55,680 --> 00:01:57,810
 bound on the maximum load then the query

53
00:01:57,810 --> 00:02:01,259
 time is twice the maximum load now if M

54
00:02:01,259 --> 00:02:03,840
 equals n so the size of our date

55
00:02:03,840 --> 00:02:06,030
 dictionary of unacceptable passwords and

56
00:02:06,030 --> 00:02:08,610
 the size of our hash table are the same

57
00:02:08,610 --> 00:02:10,709
 then what we know from our balls and

58
00:02:10,709 --> 00:02:13,379
 pinion analogy is that the query time

59
00:02:13,379 --> 00:02:13,900
 the max

60
00:02:13,900 --> 00:02:15,790
 load is gonna be order log log and in

61
00:02:15,790 --> 00:02:18,610
 this scenario so just changing from one

62
00:02:18,610 --> 00:02:20,500
 hash function to a pair of hash

63
00:02:20,500 --> 00:02:23,439
 functions and using this scheme then our

64
00:02:23,439 --> 00:02:25,360
 query time goes down dramatically from

65
00:02:25,360 --> 00:02:27,670
 order log n to order log log n and

66
00:02:27,670 --> 00:02:30,220
 there's no extra cost in terms of the

67
00:02:30,220 --> 00:02:32,500
 space though there is a question about

68
00:02:32,500 --> 00:02:35,129
 how we maintain this hash function H

69
00:02:35,129 --> 00:02:37,390
 especially if it's a truly random hash

70
00:02:37,390 --> 00:02:40,060
 function in practice we can't store a

71
00:02:40,060 --> 00:02:41,799
 truly random hash function instead we

72
00:02:41,799 --> 00:02:44,620
 use pseudo random hash functions so we

73
00:02:44,620 --> 00:02:46,420
 use a hash function which we obtain from

74
00:02:46,420 --> 00:02:50,290
 a library such as ran or D ran 48 but

75
00:02:50,290 --> 00:02:52,060
 for the purposes as an analysis it's

76
00:02:52,060 --> 00:02:53,739
 convenient to consider a truly random

77
00:02:53,739 --> 00:02:56,260
 hash function so that we can do this

78
00:02:56,260 --> 00:02:58,420
 nice analysis such as how we obtain the

79
00:02:58,420 --> 00:03:01,599
 order log and max load for the M equals

80
00:03:01,599 --> 00:03:04,060
 n case for the simple case of one hash

81
00:03:04,060 --> 00:03:06,760
 function we skipped the analysis for the

82
00:03:06,760 --> 00:03:09,159
 case of the balls and bins example where

83
00:03:09,159 --> 00:03:11,109
 we did the two choices where we had each

84
00:03:11,109 --> 00:03:13,750
 ball going to the best of two random

85
00:03:13,750 --> 00:03:16,389
 bins in that case we we claimed that the

86
00:03:16,389 --> 00:03:18,790
 max load is order log log n that

87
00:03:18,790 --> 00:03:21,129
 analysis is reasonable to do but it's

88
00:03:21,129 --> 00:03:22,900
 much more complicated so we skipped it

89
00:03:22,900 --> 00:03:22,900
 in this lecture

