1
00:00:00,000 --> 00:00:03,235
 Now, there are two natural variants of this problem,

2
00:00:03,235 --> 00:00:05,730
 and both have different dynamic programming solutions.

3
00:00:05,730 --> 00:00:07,225
 So it'd be useful to look at both.

4
00:00:07,225 --> 00:00:10,230
 In the first version, there's one copy of each object.

5
00:00:10,230 --> 00:00:13,190
 So we're trying to find a subset without repetition.

6
00:00:13,190 --> 00:00:14,615
 In the second version,

7
00:00:14,615 --> 00:00:16,635
 there's unlimited supply of each object.

8
00:00:16,635 --> 00:00:19,275
 So we can use an object as many times as we'd like.

9
00:00:19,275 --> 00:00:23,965
 In this version, the subset S has repetition possibly.

10
00:00:23,965 --> 00:00:26,440
 So the subset S is actually a multiset.

11
00:00:26,440 --> 00:00:28,730
 To summarize, in the two versions of the problem,

12
00:00:28,730 --> 00:00:32,156
 there is either unlimited supply of each object,

13
00:00:32,156 --> 00:00:34,240
 so we can use it as many times as we'd like,

14
00:00:34,240 --> 00:00:38,430
 or there's at most one copy of each object that we can use.

15
00:00:38,430 --> 00:00:40,605
 We're going to start up by looking at version 1.

16
00:00:40,605 --> 00:00:43,770
 So we have at most one copy of each object that we can use,

17
00:00:43,770 --> 00:00:45,450
 and then we'll go back, and we'll look at

18
00:00:45,450 --> 00:00:48,975
 the second version of the problem where we have unlimited supply of each object.

19
00:00:48,975 --> 00:00:48,975
 So let's dive in and look at the first version and try to design an algorithm [inaudible].

