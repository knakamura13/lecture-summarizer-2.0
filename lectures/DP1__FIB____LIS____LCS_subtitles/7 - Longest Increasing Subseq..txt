Let's look now at a more sophisticated example of dynamic programming. The problem we're going to consider is the longest increasing subsequence problem. And for simplicity, we'll call it LAS. The input to the problem are N numbers which we'll denote as, A1, A2, up to AN. Our goal is to compute the length of the longest increasing subsequence in the N numbers of the input. One important note, we're only trying to find the length of the longest increasing subsequence. We're not trying to find the subsequence itself. But if we can find the length, then we're going to get to the heart of the problem and then it will be easy to transform that into an algorithm to output an actual subsequence of longest length. Let's take a look at a specific example to help illustrate the terminology in this problem. Here's an example where N equals 12. Before defining subsequence, let's recall the definition of the more common term substring. A substring is a string that occurs inside the larger string. So it's a set of consecutive elements. For instance, here's one substring negative 3, 9, 1, 10. Another substring is for itself. And another substring is 9, 1, 10, 4, 5, 8, 9, 3. These are all substrings. How many substrings are there possible? We can specify a substring by the start index and the ending index. Therefore, there is a most order N squared substrings. Now, our problem is not defined for substrings, it's defined for subsequences. A subsequence is a string you can obtain by deleting elements of the larger string. So it's a subset of elements in order but we can skip elements. It doesn't have to be consecutive elements. Let's look at some examples subsequences. For instance, four minus three, one, nine is a subsequence. Another subsequence is one itself. Another subsequence is 5, 7, 3. Now, we're trying to find a subsequence which is increasing. That means that each number is strictly larger than the previous. In this case, it's not increasing because of 3 is smaller than 7 but an increasing subsequence for instance, is 4, 9,10. Another subsequence is 4, 4, 8, 9. But that is not an increasing subsequence. That's a non-decreasing subsequence, and we don't allow that in our example. Our goal is to find the longest increasing subsequence in the input array. For this example, what is the longest increasing subsequence? The longest increasing subsequence in this example is minus 3, 1, 4, 5, 8, 9 which is of length 6. So, the output of our algorithm on this instance is six. Now, let's try to design a dynamic programming algorithm for this longest increasing subsequence.