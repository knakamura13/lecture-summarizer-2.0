Now, we want to choose a pair of primes P and Q. One way to do that, is to have a table of prime numbers, and then just go through that table of prime numbers. What's the problem with that? Well, if somebody has access to our table, then it'll be easy to crack our cryptographic scheme. So, we want something more secure. So what's the better approach? A better approach is to choose random primes P and Q, and we want these primes P and Q to be chosen, so that every time we run the algorithm they are being chosen independently from previous runs. So, how do we choose these primes at random? Well, first off how do we choose random numbers? That's, what we're going to do first. Let R be a random N-bit number. How do we choose R? Let's say, little N is six, actually in practice though, little N is going to be a huge number like a 1000 or 2000. How do we generate this random 6 bit number? We have a one dimensional array of size 6 and we generate each of the bits, for each bit we choose a random number 0 or 1. And, we make sure that every bit is generated independently of every other bit. And, then every time we run the algorithm, the bits are generated independent of previous runs of the algorithm. So, this is quite easy to generate random N-bit number, but we want a random N-bit prime number. So what do we do? We choose a random N-bit number regardless of whether it's prime or not. And then we check whether this random number is prime or not. How do we do that? We'll see how to do that in a moment. But, suppose we have a test for primality, so we given a number we can check whether it's prime or not. Then, if this random number happens to be prime then, what do we know? Then, we know it's a random prime number. So in that case, if R is prime we can output it, because it is a random prime number. What do we do if it's not a prime number? Then we repeat this procedure. We generate a new random number, check whether it's prime or not. How long is this algorithm going to take before it finds a prime number? Well the key thing is that primes are dense. What do we mean more precisely? The probability that this random number R, happens to be a prime number is roughly 1 over little N, which is the number of bits in it. So, for generating a 1000 bit number or a 2000 bit number the probability that it's going to be prime is about 1 over a 1000 or 1 over 2000, which means how many times are we going to have to repeat this procedure, before we find a prime number? In expectation, is going to be about little N, it's going to be about a 1000 or 2000 times, which is not a big deal, to repeat this a 1000 or 2000 trials before we find a prime number. But the question remains, how do we check whether a given number R is prime or not?