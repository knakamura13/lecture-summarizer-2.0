Now, we've seen two algorithms from Max-SAT. Now, what if we look at Max-SAT on exact K-SAT formulas? So these are formulas were all clauses have size exactly K. And let's look at the performance of these two algorithms we've seen so far as a function of K. So we have the simple algorithm, that's a simple randomized assignment. So each variable is set to true with probably a half, and false with probably a half. And we have this LP based scheme. So we write Max-SAT is an integer in linear program, we relax it to a linear programming, and then we round it. How do these two schemes compare for different values of K? Let's take a look. Let's look at the performance of these two algorithms for K=1. So it's all uni clauses, so it's quite trivial, K=2 and K=3, and in general K. If you recall the simple algorithm, the probability of clauses not satisfied is 2 to the -K. So the probability this satisfied is 1-2-K. So in general for k, it achieves of 1-2-K approximation factor, plugging in K=1, and get one-half. K=2, we get three-quarters, K=3, we get 7 A's. Now the LP, the general form, was quite complicated. We proved for general k that it achieves one minus the quantity, one minus one over k to the kth. Plugging in K=1, we get 1, which is quite good. Simple scheme was quite bad for K=1, but the LP based scheme is quite good. Now K=2, they match, both three-quarters. For K=3, we got one minus two-thirds cubed. If you plug that into a calculator, that's roughly 0.704. So for K, at least three, the simple scheme beats the LP scheme. But for small clauses, the LP scheme is at least as good or even better. The key observation is that if you look at each row, the max in each row, the best of these two schemes for every K is at least three-quarters. So, can we combine these two schemes to achieve a three-quarters approximation? Yes we can.