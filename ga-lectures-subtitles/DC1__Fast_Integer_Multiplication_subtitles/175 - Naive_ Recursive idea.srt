1
00:00:00,000 --> 00:00:02,235
 Let's follow through on a recursive approach.

2
00:00:02,235 --> 00:00:05,175
 So our basic idea was to break the input into two halves.

3
00:00:05,175 --> 00:00:09,915
 So we partition this n-bit number x into two n over two-bit numbers.

4
00:00:09,915 --> 00:00:16,000
 So xl is the first n over 2 bits of x and xr is the last n over two bits of x.

5
00:00:16,000 --> 00:00:18,735
 Similarly for y, we partitioned it to yl,

6
00:00:18,735 --> 00:00:22,480
 the first n over two-bit and yr the last n over two-bit.

7
00:00:22,480 --> 00:00:26,295
 Notice we just saw how xl and xr are related to x.

8
00:00:26,295 --> 00:00:30,750
 In particular, x equals xl times 2 to the n over 2.

9
00:00:30,750 --> 00:00:33,915
 That corresponds to shifting it n over two times plus xr.

10
00:00:33,915 --> 00:00:38,230
 Similarly for y, y equals yl times

11
00:00:38,230 --> 00:00:42,995
 2 to the n over 2 plus yr. Now our goal is to compute x times y.

12
00:00:42,995 --> 00:00:45,635
 Well, we can replace x by this quantity.

13
00:00:45,635 --> 00:00:48,345
 X is the same as 2 to the n over 2 times

14
00:00:48,345 --> 00:00:53,025
 xl plus xr and we can replace y by this quantity.

15
00:00:53,025 --> 00:00:55,320
 2 to the n over 2 times yl plus

16
00:00:55,320 --> 00:00:59,120
 yr. Now let's expand out this expression and see what we get.

17
00:00:59,120 --> 00:01:04,000
 Multiplying the first terms together we get 2 to the n times xl times yl,

18
00:01:04,000 --> 00:01:07,714
 we get two terms which are scaled by 2 to the n over 2.

19
00:01:07,714 --> 00:01:10,710
 Namely we get 2 to the n over 2 times xl times

20
00:01:10,710 --> 00:01:15,656
 yr and we also get 2 to the n over 2 times yl times xr.

21
00:01:15,656 --> 00:01:19,350
 Finally, the last term is xr times yr.

22
00:01:19,350 --> 00:01:23,590
 If you notice now we have a recursive algorithm for computing x times y.

23
00:01:23,590 --> 00:01:26,505
 Now recall x and y are both n-bit numbers,

24
00:01:26,505 --> 00:01:29,400
 so we're trying to compute the product of these two n-bit numbers.

25
00:01:29,400 --> 00:01:31,360
 What we can recursively do,

26
00:01:31,360 --> 00:01:34,630
 is compute the product of 2 n over two bit numbers,

27
00:01:34,630 --> 00:01:37,340
 where we have four n over two bit numbers over here.

28
00:01:37,340 --> 00:01:39,780
 So we can compute the product of any pair of them.

29
00:01:39,780 --> 00:01:43,755
 For example, we can recursively compute the product of xl and yl,

30
00:01:43,755 --> 00:01:45,330
 and xl and yr,

31
00:01:45,330 --> 00:01:49,278
 xr and yl and xr and yr.

32
00:01:49,278 --> 00:01:55,015
 These are four products of n over two bit numbers which we can recursively compute.

33
00:01:55,015 --> 00:01:59,640
 This gives us a natural recursive algorithm for computing the product of x times y.

34
00:01:59,640 --> 00:02:02,560
 Let's go ahead and detail that algorithm to make sure everybody follows what

35
00:02:02,560 --> 00:02:02,560
 we've done so far and then we are going to try and improve on that.

