Now let's take a look at DAGs. These are directed acyclic graphs. Acyclic means that there are no cycles in the graph. What we just saw is that the graph has a cycle if and only if the DFS tree has a back edge. Since there are no cycles, there's going to be no back edges in our DFS tree. Now what we're going to try to do is, we're going to try to top allegedly sort that DAG. What does that mean? We're going to order the vertices so that all edges go from lower order number vertex to a higher order number of vertex. So for instance, if we write down the vertices in order from lowest to highest, then all edges are going to go from left to right. We're not going to have any edges going backwards. To topologically sort this DAG, what we're going to do is, we're just going to run DFS on this DAG. What is the key property we know for this DAG? We know it has no back edges. What do we know about the post order numbers for all other types of edges? We know that for back edges, the post order number increases along the edge. For all other types of edges, the post order number goes down along the edge. Now we want to order the vertices from lowest to highest so that all edges go left to right. So which vertex do we want to put first? We want to put the vertex with highest post order number first and therefore all edges are going to go from higher post order number to lower post order number, because there are no back edges. Just to summarize, we know for every edge of the graph. So for instance this edge from Z to W. We know that the post order number of Z is greater than the post order number of W. So in order to topologically sort the graph, we order the vertices by decreasing post order number. The highest post order number comes first and the lowest post or number comes last. So in order to top logically sort a DAG, we just have to do one run of DFS and then sort by decreasing post order number. Now how long does it take us to sort by decreasing post order number? Now you might think this is order n log n time, because we have to do sorting. Now what is the range of these post order numbers? Where the clock starts at one, so all the post order numbers are at least one. How large can the post order number be? Or the maximum imposed order number is going to be two times n so all the post order numbers range between one and 2n. So what can you do? You can make an array of size 2n. Now we can go through the vertices, take their post order number and insert them into the appropriate place in the array based on their post order number. Now we go through this array from highest to smallest and we just output the vertices as we see them. This gives us the vertices in decreasing order of post order number. How long does this take to construct? Just takes linear time. So it takes order n time to sort the vertices by decreasing post order numbers and takes linear order n plus M time to run DFS. So the total algorithm takes order N plus M time.