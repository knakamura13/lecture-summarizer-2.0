1
00:00:00,000 --> 00:00:03,475
 We've seen now, several times, assess viability problem.

2
00:00:03,475 --> 00:00:06,500
 We input once again is the Boolean formula in

3
00:00:06,500 --> 00:00:10,455
 conjunctive normal form with N variables and M clauses.

4
00:00:10,455 --> 00:00:13,500
 And the output from the SAT problem is an assignment,

5
00:00:13,500 --> 00:00:14,640
 a true false assignment,

6
00:00:14,640 --> 00:00:15,855
 for the N variables,

7
00:00:15,855 --> 00:00:20,738
 so that the formula evaluates true or we simply output no,

8
00:00:20,738 --> 00:00:22,955
 if there's no such satisfying assignment.

9
00:00:22,955 --> 00:00:25,905
 Now, as we know the SAT problem is NP-complete.

10
00:00:25,905 --> 00:00:30,090
 Hence, we can't hope to find a polynomial time algorithm for the SAT problem.

11
00:00:30,090 --> 00:00:31,425
 Now, this is a search problem.

12
00:00:31,425 --> 00:00:33,515
 Let's look at the optimization version.

13
00:00:33,515 --> 00:00:35,300
 It's the Max-SAT problem.

14
00:00:35,300 --> 00:00:38,095
 Now, in the Max-SAT problem the input is the same.

15
00:00:38,095 --> 00:00:40,755
 It's a boolean formula in conjunctive normal form.

16
00:00:40,755 --> 00:00:42,870
 And once again will use N to denote the number of

17
00:00:42,870 --> 00:00:45,260
 variables and M for the number of clauses.

18
00:00:45,260 --> 00:00:47,160
 The differences in terms of the output.

19
00:00:47,160 --> 00:00:49,080
 Even if there's no satisfying assignment,

20
00:00:49,080 --> 00:00:51,135
 we're still going to output an assignment.

21
00:00:51,135 --> 00:00:53,040
 And here, we're going to output an assignment which

22
00:00:53,040 --> 00:00:55,680
 maximizes the number of satisfied clauses.

23
00:00:55,680 --> 00:00:57,900
 In the optimization version of the SAT problem,

24
00:00:57,900 --> 00:01:02,160
 we want to find an assignment which satisfies many clauses as possible.

25
00:01:02,160 --> 00:01:04,045
 Now, this is still a hard problem.

26
00:01:04,045 --> 00:01:07,030
 In particular the Max-SAT problem is NP-hard.

27
00:01:07,030 --> 00:01:10,305
 It's no longer a search problem so it is no longer in the class NP,

28
00:01:10,305 --> 00:01:15,340
 because we have no way of verifying that the number of clauses satisfied is maximum.

29
00:01:15,340 --> 00:01:19,785
 By clearly, this Max-SAT problem is at least as hard as the SAT problem.

30
00:01:19,785 --> 00:01:24,900
 It's straightforward to reduce SAT to Max-SAT and therefore Max-SAT is NP-hard.

31
00:01:24,900 --> 00:01:29,095
 So once again, we can't hope to solve the Max-SAT problem in polynomial time.

32
00:01:29,095 --> 00:01:30,990
 Instead we're going to aim to approximate

33
00:01:30,990 --> 00:01:30,990
 the Max-SAT problem and to do that we're going to use linear programming.

