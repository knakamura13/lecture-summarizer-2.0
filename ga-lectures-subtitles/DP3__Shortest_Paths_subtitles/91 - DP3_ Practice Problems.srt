1
00:00:00,000 --> 00:00:03,756
 Here's a homework problem I often like to assign after this lecture.

2
00:00:03,756 --> 00:00:05,850
 It's from Chapter Four, problem 21.

3
00:00:05,850 --> 00:00:10,770
 It's about currency exchange and we're looking for an arbitrage situation.

4
00:00:10,770 --> 00:00:14,430
 We're going to start say with one currency, say dollars.

5
00:00:14,430 --> 00:00:17,540
 We're going to change it to another currency, let's say yen.

6
00:00:17,540 --> 00:00:21,743
 And then we exchange it to another currency, let's say pounds.

7
00:00:21,743 --> 00:00:23,320
 And then we go back to dollars.

8
00:00:23,320 --> 00:00:25,500
 We're looking for a situation when we do

9
00:00:25,500 --> 00:00:30,035
 this cycle and we end up with more than one dollar.

10
00:00:30,035 --> 00:00:34,555
 So after this series of exchanges we end up with more than we started with.

11
00:00:34,555 --> 00:00:37,020
 This is an arbitrage situation and

12
00:00:37,020 --> 00:00:39,800
 we're looking for such anomalies in the exchange market.

13
00:00:39,800 --> 00:00:43,320
 Now this is in Chapter Four which is about graph algorithms.

14
00:00:43,320 --> 00:00:47,250
 And what we want to do, is we want to reduce it to the negative weight cycle problem.

15
00:00:47,250 --> 00:00:51,930
 So we want to reduce this arbitrage situation to a negative weight cycle.

16
00:00:51,930 --> 00:00:56,100
 Now we just saw two algorithms for detecting negative weight cycles.

17
00:00:56,100 --> 00:00:59,255
 Now we want to use these algorithms as black boxes.

18
00:00:59,255 --> 00:01:02,760
 So, we don't want to modify these algorithms in any way.

19
00:01:02,760 --> 00:01:04,680
 We want to think of them as like a library,

20
00:01:04,680 --> 00:01:08,075
 as a subroutine we got from a library and we can't modify the code.

21
00:01:08,075 --> 00:01:12,030
 We can simply give it some graph as input and we can get the output,

22
00:01:12,030 --> 00:01:15,210
 which is a negative weight cycle if one exists in that graph.

23
00:01:15,210 --> 00:01:18,090
 Now we want to use this black box subroutine to

24
00:01:18,090 --> 00:01:21,945
 construct an algorithm for this currency exchange problem.

25
00:01:21,945 --> 00:01:26,905
 So we want to build an algorithm for detecting an arbitrage situation.

26
00:01:26,905 --> 00:01:30,810
 So we're going to take as input our currency exchange rates and we want to figure

27
00:01:30,810 --> 00:01:35,280
 out how to convert these currency exchange rates into a graph.

28
00:01:35,280 --> 00:01:37,830
 So we need to build this function.

29
00:01:37,830 --> 00:01:40,360
 This function is reducing

30
00:01:40,360 --> 00:01:46,555
 this currency exchange problem into a graph problem of detecting a negative weight cycle.

31
00:01:46,555 --> 00:01:51,030
 So we had to build this function which converts these currency exchanges into

32
00:01:51,030 --> 00:01:53,925
 a graph and then we simply want to run

33
00:01:53,925 --> 00:01:58,100
 this graph problem for detecting negative weight cycles.

34
00:01:58,100 --> 00:02:00,840
 We're going to take the output from that and that's going to give

35
00:02:00,840 --> 00:02:03,960
 us the output for our arbitrage problem.

36
00:02:03,960 --> 00:02:06,540
 We might have to do some conversion on that output,

37
00:02:06,540 --> 00:02:10,015
 but we don't have to touched this algorithm at all. It's called a reduction.

38
00:02:10,015 --> 00:02:12,390
 Where we're reducing the arbitrage problem,

39
00:02:12,390 --> 00:02:15,655
 to this negative weight cycle detection problem.

40
00:02:15,655 --> 00:02:17,130
 And we denote it this way,

41
00:02:17,130 --> 00:02:20,595
 we're reducing arbitrage to negative weight cycles.

42
00:02:20,595 --> 00:02:24,560
 So we want to use this as a black box to solve this problem.

43
00:02:24,560 --> 00:02:27,730
 Reductions are going to be an underlying theme in the course.

44
00:02:27,730 --> 00:02:28,980
 We're going to use them to design

45
00:02:28,980 --> 00:02:33,660
 efficient algorithms and later we're going to use them to prove hardness.

46
00:02:33,660 --> 00:02:36,728
 We're going to use them to show NP completeness.

47
00:02:36,728 --> 00:02:37,860
 But this is a general theme,

48
00:02:37,860 --> 00:02:39,935
 we know how to solve one problem.

49
00:02:39,935 --> 00:02:42,835
 We want to use that to solve a new problem.

50
00:02:42,835 --> 00:02:42,835
 So we want to reduce this new problem to some existing problem that we know how to solve.

