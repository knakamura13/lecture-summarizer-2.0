Here's the key fact that we're going to use. For even y, when we divide y by two we get an integer. So x to the y is the same as x to the y over two squared. What happens for odd y? Well, we got to be careful because when we do y divide by two, we get a fractional amount. So, for odd y, when we want to look at x to the y, let's take out an x, so that we look at x to the y minus one. Let's take out that x. Now, we're going to take y minus one, divided by two, which is the same as y over two floor. So, we take y over two and we round it down. So, we drop the fractional part. We raise x to that power and then we square it. And we multiply by the extra factor of x, and we get x to the y. Now, let's take this simple observation and detail a divide and conquer algorithm for modular exponentiation. And these three input parameters, x, y, and capital N are all little n-bit integers. And let's assume there are non negative integers. And our algorithm is computing x raised to the power y, mod, capital N. This can be a recursive algorithm. So, let's start with the base case. The exponent is going to keep going down. The base case is going to correspond to y equals zero, in which case we're taking x to the zero, which is one. So, when we take that mod N, that's also one, assuming N is at least one. So, let's, uh, let's actually assume here that N is positive number. Now, let's look at the general case, what are we going to do? We're going to compute this x to the y over two. If y is odd, then we got to round it down. If y is even, we don't have to worry about rounding it down. But, if we round it down, it doesn't make any difference. So, we're going to recursively call this algorithm with x, raise to the power y over two, round it down, mod capital N. We store that answer in z. Now, we check whether y is even and we follow this case, or y is odd and we follow this case. In the case when y is even, then we want to take the z, which is x to the y over two, and we want to square it, take it mod N, then return the answer. So, we're going to return z squared, mod, capital N. In the other case, when y is odd, we have to take z squared, which is the inner term, and then multiply by x. So, in this case, we want to take x times z squared, mod N. And that's our answer when we return.