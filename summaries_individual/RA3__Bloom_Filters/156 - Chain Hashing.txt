Chain hashing uses a hash table H with N-sized array of linked lists. Each list in H[i] contains elements from a set S that hash to index i, particularly tracking unacceptable passwords. Query time to find an element X in S depends on the linked list's length at H[X], essentially the load or number of elements at that hash bin. Notation: M is the set S size of forbidden passwords, n is the hash table size (bins). When M equals n, max load is log n with high probability, but worst case is n. Query time thus is log n with high probability, meaning a high n would result in slower queries. To achieve constant query time, the hash table size would need to increase from M to MÂ², a significant resource cost. Instead, adopting a "two choice scheme" from the balls and bins analogy, where each element has a choice of two bins and selects the lesser loaded one, reduces max load to log log n, thus potentially speeding up queries without substantial resource increases.