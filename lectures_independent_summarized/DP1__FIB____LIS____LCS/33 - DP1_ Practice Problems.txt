Recommended practice with dynamic programming (DP) problems, highlighting text from "Algorithms" by Dasgupta et al. Problems identified for practice include: finding a max sum contiguous sequence (6.1), planning a trip with minimal penalty hotel stops (6.2), a problem named "yuck Donald's" (6.3), segmenting a string into words (6.4), and finding the longest common subsequence (6.11), with a suggestion to try its variant involving substrings. Also outlines steps for creating a DP algorithm: (1) define subproblems, essentially smaller versions of the original problem applied to input prefixes; (2) create a recurrence relation to express a subproblem's solution in terms of previously solved subproblems, possibly modifying ("strengthening") subproblems to include an additional element constraint. Final solution may require searching entire table for optimal result rather than using last table element directly. Advises solving problems independently before seeking further instruction for maximized learning.