1
00:00:00,000 --> 00:00:02,902
 We've now seen many NP-complete problems.

2
00:00:02,902 --> 00:00:05,830
 When a problem is NP-complete it signifies to us that

3
00:00:05,830 --> 00:00:08,998
 it's computationally difficult. Formally what does that mean?

4
00:00:08,998 --> 00:00:11,740
 That means it is the most difficult problem in the class NP.

5
00:00:11,740 --> 00:00:15,070
 So, if we can solve this NP-complete problem in polynomial time,

6
00:00:15,070 --> 00:00:18,765
 we can solve all problems in the class NP in polynomial time.

7
00:00:18,765 --> 00:00:22,555
 And now since there are literally thousands of problems in the class NP from

8
00:00:22,555 --> 00:00:25,345
 all scientific fields it's unlikely that we're going to

9
00:00:25,345 --> 00:00:29,530
 derive a polynomial time algorithm for our NP-complete problem.

10
00:00:29,530 --> 00:00:32,680
 To be precise if P is not equal to NP,

11
00:00:32,680 --> 00:00:35,860
 then that implies that there's no algorithm which can run in

12
00:00:35,860 --> 00:00:39,670
 polynomial time on every input for this NP-complete problem.

13
00:00:39,670 --> 00:00:42,490
 Notice the important distinction is on every input.

14
00:00:42,490 --> 00:00:44,920
 We may have an algorithm which takes polynomial time on

15
00:00:44,920 --> 00:00:48,285
 some inputs or even on most inputs or almost every input,

16
00:00:48,285 --> 00:00:53,560
 but there's no algorithm which is guaranteed to take polynomial time on every input.

17
00:00:53,560 --> 00:00:56,690
 Now we're going to look at the class of undecidable problems.

18
00:00:56,690 --> 00:00:59,380
 These are problems which are computationally impossible.

19
00:00:59,380 --> 00:01:01,990
 For an NP-complete problem it's unlikely to have

20
00:01:01,990 --> 00:01:05,040
 an algorithm which solves the problem in polynomial time.

21
00:01:05,040 --> 00:01:08,770
 In contrast, for an undecidable problem there is no algorithm which

22
00:01:08,770 --> 00:01:13,150
 solves the problem on every input regardless of the running time of the algorithm.

23
00:01:13,150 --> 00:01:15,510
 You run polynomial time, exponential time;

24
00:01:15,510 --> 00:01:18,940
 there's no algorithm which is going to solve it on every input.

25
00:01:18,940 --> 00:01:24,130
 Now in 1936 the great Alan Turing proved that the halting problem is undecidable.

26
00:01:24,130 --> 00:01:26,580
 And we're going to see the idea of that result now.

27
00:01:26,580 --> 00:01:29,860
 Now this paper by Turing in 1936 introduced the notion which

28
00:01:29,860 --> 00:01:33,220
 we now refer to as Turing Machine what Turing showed

29
00:01:33,220 --> 00:01:36,400
 is that the halting problem is undecidable on a Turing Machine

30
00:01:36,400 --> 00:01:40,480
 and a Turing Machine captures the power of a conventional computer.

31
00:01:40,480 --> 00:01:43,630
 Now by conventional we're excluding things like quantum computer.

32
00:01:43,630 --> 00:01:47,070
 Now later, many other problems were showed to be undecidable,

33
00:01:47,070 --> 00:01:48,755
 but the halting problem is quite nice,

34
00:01:48,755 --> 00:01:48,755
 so we're going to dive into that proof.

