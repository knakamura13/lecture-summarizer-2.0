Let's go ahead and detail this straightforward divide and conquer algorithm for multiplying x times y. The input to the problem are these two integers x and y, which are both at most n-bits long. And we assume for simplicity, that n is a power of two. So n equals two to the k for some non-negative integer k. And the output of our algorithm is this number z which is equal to the product of x times y. First thing we do, is we break x and y into two, n over two bit numbers. So XL is the number corresponding to the first n over two bits of x. XR is the number corresponding to last n over two bits of x. Since n is a power two, these always divide evenly. So we don't have to worry about putting any floors or ceilings on either of these two terms. Similarly, we partition y into the first n over two bits, call that YL, and the last n over two bits of Y, that's YR. Now what we can do is we can recursively compute the product of pairs of these n over two bit numbers. We have four n over two bit numbers. We're going to take particular pairs, recursively compute their product, and combine those together to get this answer z. First pair of n over two bit numbers that we're going to use is XL and YL. We're going to recursively compute their product and we're going to store that answer in capital A. The second one we're going to use is XR times YR and we're going to store that answer in capital B. The last two recursive subproblems that we're going to do are XL times YR, store that in C, XR times YL, store that in D. Now we can get the product x times y using these for quantities A, B, C, and D. In particular, Z, which is x times y, that's equal to two to the n times A, that's a times that's not an X, plus two to the n over two times the quantity C plus D, that's these cross terms, XL times YR and XR times YL plus B. We got this expression on the last slide. Finally, Z is the quantity that we want to return. Z is equal to the product x times y. That completes the pseudocode for this easy divide and conquer algorithm. Let's take a look at the running time of this algorithm now.