The natural recursive algorithm for computing the Nth Fibonacci number, Fib1, sums the previous two numbers in the sequence. It accounts for base cases where the first two numbers are 0 and 1. The running time T(n) includes constant time for the base cases and the sum of T(n-1) and T(n-2) for recursive calls. This running time is at least as large as the Nth Fibonacci number, which grows exponentially with the constant phi (~1.618), the golden ratio. Due to the exponential growth of Fibonacci numbers, the running time for computing the Nth Fibonacci is also exponential in n, making Fib1 highly inefficient. The need exists for a more efficient algorithm due to this poor performance.