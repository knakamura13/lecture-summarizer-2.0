Recall our subproblem definition from the previous slide. For each i between 0 and n minus 1 and each vertex z, we define D(i,z) as the length of the shortest path from s to that chosen vertex z, where we only consider paths which use the most i edges. The final solution that we're trying to find is, i equals n minus 1. Therefore, the base case is i equals 0. In this case, we're going from s and we're not allowed to use any edges. So, the only vertex we can reach is s itself and, therefore, D(0,s) is 0. The length to go from s to itself is length 0 and the length to go to any other vertex is infinite. So, for every other vertex except s the lane is infinite. That defines a base case. Now, let's try to do the case when i is at least 1. Now, let's look at the shortest path from s to z using exactly i edges. So, this path starts at s ends at z. There's some penultimate vertex, let's call it y. So, there's a path of length, i minus 1 from s to y. And then there's an edge from y to z. So, y to z is the last edge on this path and the prefix of the path is of length i minus 1 since the entire path is length i. Now, noticed our subproblem is slightly different from what we proposed before. Now, we're talking about exactly i edges, whereas, before we were talking at most i edges. Let's just look at this version for now. Can we write a recurrence now for D(i,z)? What we're going to do is we're going to try all possibilities for the last, the penultimate vertex on the path and we're going to take the best of those choices for y. What is the best? The best means shortest, which means minimum. So, we're going to minimize over the choices of y. What are the choices for y? Well, y has to have an edge to z. This is a directed graph, so we're considering those y were the directed edge from y to z in our input graph. What does the length of this path which goes through y? Well, from s to y it's allowed to use exactly i minus 1 edges. Therefore, it is D(i-1,y) because, it's the shortest path using exactly i minus 1 edges from s to y. Notice we're talking about exactly i minus 1. And again, slightly different from our original version, which said at most i. We're just going to ignore that slight difference for a moment. And in addition, we get the weight of this last edge from y to z. What is the length of this last match? It's W(y,z). That's the length of this edge from y to z. So, the length of this shortest path from s to z, which goes through y, as the penultimate vertex, has length D(i-1,y) for this first i minus 1 edges, as captured right here, plus the length of this last edge from y to z. And we're going to take that sum, which is the total length of this path from s to z going through y and we have minimized over the choices of y. And the best choice of y is going to give us this value, D(i,z). This gives us a valid recurrence when the subproblem is defined as the length of the shortest path from s to z using exactly i edges. Notice, in this case when we're looking for dist of z, this is not necessarily the shortest path using i equals n minus 1. We might not necessarily use n minus 1 edges in the shortest path from s to z. So, this is not stored in D(n-1,z). Instead, to find dist of z, we've got to look at the min overall choices of i. So, to avoid this we instead, want to store D(i,z) as the length of the shortest path using at most i minus 1 edges, instead of exactly i edges. Let's look. Is there a simple way to modify a recurrence so that it changes the subproblem definition to our original proposal? Using at most i edges instead of exactly i edges. All we have to do is we have to modify so that we take the best of this solution, which minimizes over y, and the previous solution, which was D(i-1,z). So, if this stores the length of the shortest path from s to z using at most i minus 1 edges, this gives the length of the shortest path using exactly i edges. If we take the min of these two values, then that will give us the length using at most i edges.