The Fast Fourier Transform (FFT) algorithm evaluates a polynomial A(x) of degree at most N-1, where N is a power of 2. To multiply two such polynomials, it is necessary to evaluate A(x) at 2N points, which can be achieved by padding A(x) with zeros. The evaluation points chosen are the Nth roots of unity, which have the special properties of symmetry and square root relationships that reduce computational complexity. The algorithm breaks down A(x) into two smaller polynomials: A even(x) derived from the even coefficients of A(x), and A odd(x) from the odd coefficients, both of degree at most N/2-1. These polynomials are evaluated recursively at the squared roots, then merged back to find the values of A(x) at the original Nth roots of unity. This key merging step requires linear time relative to the number of evaluated points (order N). The process of breaking down the problem into subproblems of half the size, solving the subproblems recursively, and combining the solutions, follows a divide-and-conquer strategy similar to that used in merge sort and results in a running time of order NlogN. This efficient computational time scale allows the FFT to convert the polynomial from coefficient form to its values at the Nth roots of unity expediently.