Why do I care about the running time to verify a solution? Well, this is the key step for proving that SAT is in NP. So let's go ahead and formally prove that SAT is in NP, and then as part of that proof, we'll see the answer to this question. So let's go ahead and prove that SAT is in NP. First, I've to check that it's of the correct form. The correct form is that I'll output a solution if one exists, and I'll output no if there is no solution. So clearly, it's of the correct form. Now, here's a slightly non-trivial aspect. I have to show that I can verify solutions in polynomial time. So if I'm given a formula f and assignment of true and false to these variables, then how long does it take me to check that this assignment satisfies this formula? Well, for a particular clause, it takes me order_n time to check that at least one of the literals in that clause is satisfied. Since there are m clauses, it takes me a total of order_n_m time to verify that this assignment satisfies this formula. So that's the solution to the previous quiz. And also, we've just shown that we can verify solutions in polynomial time. Therefore, SAT is a search problem and therefore SAT is in NP. So if I want to prove that a problem such as SAT is in NP, I have to show you, here's an algorithm which verifies solutions in polynomial time. And normally, it's just going to take one or two sentences to show that a particular problem is in NP, that it is a search problem, that we can verify solutions in polynomial time.