1
00:00:00,000 --> 00:00:01,500
 Our second approach, we'll use

2
00:00:01,500 --> 00:00:04,725
 Linear programming to get an approximation algorithm for Max-SAT.

3
00:00:04,725 --> 00:00:07,020
 To do that, we'll use a stronger form of

4
00:00:07,020 --> 00:00:09,935
 Linear programming known as Integer Linear Programming.

5
00:00:09,935 --> 00:00:11,340
 Before we get into that, first,

6
00:00:11,340 --> 00:00:13,820
 let's recall the general form of Linear Programming.

7
00:00:13,820 --> 00:00:16,260
 Is a linear programming canonical form?

8
00:00:16,260 --> 00:00:18,515
 For the variable vector X,

9
00:00:18,515 --> 00:00:21,330
 where maximizing C transpose X,

10
00:00:21,330 --> 00:00:23,725
 subject to the following constraints.

11
00:00:23,725 --> 00:00:27,120
 Ax â‰¤ b, and X is non-negative.

12
00:00:27,120 --> 00:00:29,700
 This is a canonical form for Linear program.

13
00:00:29,700 --> 00:00:32,910
 Now, in an Integer Linear Program, so in ILP,

14
00:00:32,910 --> 00:00:36,460
 it has the same canonical form with one additional constraint,

15
00:00:36,460 --> 00:00:38,820
 X is constrained to be in Z to the N,

16
00:00:38,820 --> 00:00:40,845
 where Z are the integers.

17
00:00:40,845 --> 00:00:43,074
 So if you think of the vector X of size N,

18
00:00:43,074 --> 00:00:48,130
 this constraint is saying that each Xi is integer value.

19
00:00:48,130 --> 00:00:49,800
 So what's going on geometrically?

20
00:00:49,800 --> 00:00:51,510
 In the linear program,

21
00:00:51,510 --> 00:00:52,715
 we had a feasible region,

22
00:00:52,715 --> 00:00:55,950
 this convex set, define by these constraints,

23
00:00:55,950 --> 00:01:00,990
 and we're trying to find the best real numbered point X in that feasible set,

24
00:01:00,990 --> 00:01:03,955
 so that we maximize this objective function,

25
00:01:03,955 --> 00:01:07,580
 but we consider all real numbered points in that set X.

26
00:01:07,580 --> 00:01:09,695
 Now we're placing this grid,

27
00:01:09,695 --> 00:01:11,880
 this N dimensional grid,

28
00:01:11,880 --> 00:01:16,710
 and we're only looking at the grid points contained in that feasible set.

29
00:01:16,710 --> 00:01:18,817
 Those are the only feasible points now.

30
00:01:18,817 --> 00:01:23,945
 We want to find the best grid point which maximizes this objective function.

31
00:01:23,945 --> 00:01:26,610
 Linear program had a nice property that there always is

32
00:01:26,610 --> 00:01:29,730
 a vertex of the feasible region which is an optimal point,

33
00:01:29,730 --> 00:01:33,090
 which maximizes this objective function.

34
00:01:33,090 --> 00:01:36,256
 We no longer have such a property for Integer Linear Programming.

35
00:01:36,256 --> 00:01:40,065
 And whereas linear programming is, polynomial time solvable,

36
00:01:40,065 --> 00:01:43,095
 so it lies in the class P. In contrast,

37
00:01:43,095 --> 00:01:45,535
 integer linear programming is NP-hard,

38
00:01:45,535 --> 00:01:47,160
 and we're going to see that right now.

39
00:01:47,160 --> 00:01:51,140
 We're going to see how to reduce Max-SAT to Integer Linear Programming.

40
00:01:51,140 --> 00:01:54,630
 In fact, many of the NP complete problems that we've seen so far,

41
00:01:54,630 --> 00:01:56,889
 such as vertex cover, independent set,

42
00:01:56,889 --> 00:02:00,275
 and so on are easy to reduce to Integer Linear Programming.

43
00:02:00,275 --> 00:02:02,475
 So it's quite powerful technique.

44
00:02:02,475 --> 00:02:05,637
 Well since, ILP, Integer Lienear Programming is NP-hard,

45
00:02:05,637 --> 00:02:08,005
 we can expect to solve it in polynomial time.

46
00:02:08,005 --> 00:02:09,315
 So what's our game plan?

47
00:02:09,315 --> 00:02:11,385
 Well first, we're going to see how to reduce SAT or

48
00:02:11,385 --> 00:02:13,690
 Max-SAT to Integer Linear Programming,

49
00:02:13,690 --> 00:02:16,670
 then we're going to look at the Linear Programming relaxation.

50
00:02:16,670 --> 00:02:18,656
 So we're going to ignore this one constraint,

51
00:02:18,656 --> 00:02:20,450
 this integer value constraint.

52
00:02:20,450 --> 00:02:23,445
 So we're going to look at the best real number point X.

53
00:02:23,445 --> 00:02:25,875
 Of course, the objective function might go up.

54
00:02:25,875 --> 00:02:28,020
 We're going to use this real number point X which

55
00:02:28,020 --> 00:02:30,480
 is the optimal solution to the Linear Program,

56
00:02:30,480 --> 00:02:34,130
 to find an integer point which is nearby.

57
00:02:34,130 --> 00:02:37,995
 That's going to give us a feasible solution to the Integer Linear Program,

58
00:02:37,995 --> 00:02:41,905
 and then we'll see how far away it is from the optimal solution.

59
00:02:41,905 --> 00:02:41,905
 And that will give us our approximation algorithm to the Max-SAT

