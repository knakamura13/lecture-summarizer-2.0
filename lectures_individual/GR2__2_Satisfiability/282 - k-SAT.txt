A satisfying assignment for this formula is the assignment which sets X_1 to be false, X_2 to be true, X_3 to be false. X_1 to be false satisfies this clause, X_2 to be true satisfies this clause, X_3 to be false satisfies this clause and this clause. Now we're going to look at a restrictive form of the SAT problem called k-SAT. For example, for three-SAT, the input is going to be a formula in CNF with n variables and m clauses. But now, all the clauses are of size, at most, three, or k in general. Now, the size of a clause is the number of literals in it. So, this formula is an example of a three-SAT formula. Actually, it's an example of a k-SAT formula for all k at least three. Now, what we're going to see later is that SAT problem is NP-complete. And for every k at least three, we'll see that the k-SAT problem is NP-complete. So, three-SAT is NP-complete, four-SAT is NP-complete, and so on. What we're going to see now is a polynomial time algorithm for two-SAT. So, there's a very interesting dichotomy for two-SAT, that there's a polynomial time algorithm and we're going to solve it using our strongly connected components algorithm. And then, when k is at least three, so three-SAT is NP-complete. So let's dive into our algorithm for two-SAT.