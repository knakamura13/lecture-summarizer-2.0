This is a short refresher lecture on Solving Recurrences. We're going to focus on the type of recurrences that arise in divide and conquer algorithms. A classical recurrence is that for merge sort T of N equals two times T of N over two plus Order N. To sort N numbers, we partition the list into the first N over two numbers and the last N over two numbers. We recursively sort those two sub lists, that takes time, two times T of N over two and then it takes as Order N Time to merge these two sorted list together. As you probably know, this recurrence solves to order logN. Let's look at some other recurrences that we've seen so far in divide and conquer examples. The naive algorithm for integer multiplication had the following recurrence, T of N equals four times T of N over two plus order N. And we claim that this solves the Order N Square. We'll see you why momentarily. Our improved algorithm for integer multiplication had three sub problems instead of four sub problems. So we had the following occurrence, T of N is at most three times T of N over two plus Order N we claim that this solves to Order N to the exponent log base two of three. And recall this exponent is roughly one point six. Now another recurrence which we saw in the median finding algorithm was T of N equals T of three fourths N and plus Order N. And we claim that this recurrence solves to order N. Now let's go ahead and solve these recurrences. We'll start with this recurrence. The naive algorithm for integer multiplication then we'll look at this slightly more complicated example. And finally we'll look at the general solution for these recurrences of this form.