1
00:00:00,000 --> 00:00:02,595
 Now if you are presented with this problem in real life,

2
00:00:02,595 --> 00:00:05,815
 the first approach you might try is a Greedy approach.

3
00:00:05,815 --> 00:00:08,295
 let's take a look at a specific example,

4
00:00:08,295 --> 00:00:13,020
 and then this will highlight the pitfalls with the Greedy approach.

5
00:00:13,020 --> 00:00:15,060
 Now here's an example with four objects.

6
00:00:15,060 --> 00:00:17,685
 The values are 15,

7
00:00:17,685 --> 00:00:19,650
 10, eight and one.

8
00:00:19,650 --> 00:00:21,465
 The weights are 15,

9
00:00:21,465 --> 00:00:23,160
 12, 10 and five.

10
00:00:23,160 --> 00:00:26,190
 The total capacity will be 22.

11
00:00:26,190 --> 00:00:30,200
 Now we're looking at the version where we have one copy of each object that we can use.

12
00:00:30,200 --> 00:00:33,680
 Let's take a look and make sure that you understand the problem.

13
00:00:33,680 --> 00:00:36,345
 What is the optimal solution for this problem?

14
00:00:36,345 --> 00:00:38,850
 What does the subset of objects which

15
00:00:38,850 --> 00:00:38,850
 attain the maximum value while fitting in the backpack?

