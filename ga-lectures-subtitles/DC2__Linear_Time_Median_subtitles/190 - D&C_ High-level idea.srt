1
00:00:00,000 --> 00:00:04,665
 Now we're aiming for an O(n) running time and we're trying to use divide and conquer.

2
00:00:04,665 --> 00:00:07,530
 So let's look at the recurrences which yield

3
00:00:07,530 --> 00:00:13,755
 an order N solution and then this will give us some idea of the algorithm basic approach.

4
00:00:13,755 --> 00:00:15,314
 Take a look at this recurrence.

5
00:00:15,314 --> 00:00:17,059
 What does this recurrence solve to?

6
00:00:17,059 --> 00:00:18,480
 T(n) equals to T(n) over two plus O(n).

7
00:00:18,480 --> 00:00:22,574
 This recurrence solves to O(n).

8
00:00:22,574 --> 00:00:24,660
 How can we achieve a running time like this from

9
00:00:24,660 --> 00:00:27,434
 the basic approach that we align on the previous slide?

10
00:00:27,434 --> 00:00:30,570
 We have one sub problem which is of size and most N over 2.

11
00:00:30,570 --> 00:00:32,070
 In our previous approach,

12
00:00:32,070 --> 00:00:35,640
 we either recurse on A less than P or A bigger than

13
00:00:35,640 --> 00:00:40,814
 P. In order to achieve that the sub problems of size and most N over 2,

14
00:00:40,814 --> 00:00:45,009
 we need that the pivot P is the median.

15
00:00:45,009 --> 00:00:48,045
 If the pivot is the median of the unsorted list,

16
00:00:48,045 --> 00:00:53,609
 then we know that A less than P is in most N over 2 and a bigger n P is of size at

17
00:00:53,609 --> 00:00:56,100
 most n over two and therefore the running time of

18
00:00:56,100 --> 00:00:59,929
 our algorithm will be exactly this which solves to O(n).

19
00:00:59,929 --> 00:01:02,729
 Now the problem is that the whole problem that we're trying to solve

20
00:01:02,729 --> 00:01:06,305
 originally was to try to find the median of this list.

21
00:01:06,305 --> 00:01:08,579
 So if you give us a solution then I can

22
00:01:08,579 --> 00:01:11,290
 run for O(n) time and I can find the solution again.

23
00:01:11,290 --> 00:01:13,109
 That's the punch line so far.

24
00:01:13,109 --> 00:01:15,644
 But what if I don't actually have the median exactly?

25
00:01:15,644 --> 00:01:17,045
 What if I have an approximate,

26
00:01:17,045 --> 00:01:19,935
 a reasonable guess of the median?

27
00:01:19,935 --> 00:01:22,680
 So suppose P is an approximate median,

28
00:01:22,680 --> 00:01:26,319
 it's fairly close to the median but it's not exactly the median.

29
00:01:26,319 --> 00:01:28,079
 Let's just do a thought process.

30
00:01:28,079 --> 00:01:30,109
 Let me look at the sorted array A.

31
00:01:30,109 --> 00:01:33,015
 So I'm not actually sorting A but I'm just thinking about it,

32
00:01:33,015 --> 00:01:35,055
 this array A as being sorted,

33
00:01:35,055 --> 00:01:37,829
 and the median little sign right here in the middle.

34
00:01:37,829 --> 00:01:39,659
 And here I have the smallest element,

35
00:01:39,659 --> 00:01:41,555
 here I have the largest element.

36
00:01:41,555 --> 00:01:46,465
 Let me look at N over 4 smallest and let me look at the 3n over 4 smallest.

37
00:01:46,465 --> 00:01:48,015
 Suppose instead of giving you the median,

38
00:01:48,015 --> 00:01:51,790
 I just give you something which is guaranteed to lie within this band.

39
00:01:51,790 --> 00:01:56,427
 So it's at least the N over 4 smallest and it's at most 3n over 4 smallest.

40
00:01:56,427 --> 00:01:58,469
 So it's not lying in either of these extremes,

41
00:01:58,469 --> 00:02:00,790
 it's lying in this middle band.

42
00:02:00,790 --> 00:02:03,780
 Suppose I can find a pivot which satisfies this.

43
00:02:03,780 --> 00:02:05,840
 So it's going to lie in this band.

44
00:02:05,840 --> 00:02:09,134
 What does that imply about the running time of my algorithm.

45
00:02:09,134 --> 00:02:12,055
 How large are these sub problems going to be in the worst case.

46
00:02:12,055 --> 00:02:14,639
 When the worst case maybe it lies right here,

47
00:02:14,639 --> 00:02:21,555
 it's a 3n over 4 smallest and then A less than P is going to be a size 3n over 4.

48
00:02:21,555 --> 00:02:23,895
 Similarly, if it's N over 4 smallest

49
00:02:23,895 --> 00:02:27,460
 then a bigger than P is going to be of size 3n over 4.

50
00:02:27,460 --> 00:02:32,805
 And in general, I know that the size of the sub problem is going to be at most 3n over 4.

51
00:02:32,805 --> 00:02:35,580
 So my recurrence is going to satisfy this relation.

52
00:02:35,580 --> 00:02:38,550
 Now the question is, what does this recurrence solve to?

53
00:02:38,550 --> 00:02:42,935
 Turns out, it's still solves to O(n) and in fact I can relax it even more.

54
00:02:42,935 --> 00:02:45,060
 I don't even need three quarters here.

55
00:02:45,060 --> 00:02:52,259
 I can look at the N over 100th smallest here and then .99n smallest over here.

56
00:02:52,259 --> 00:02:55,835
 I just have to chop off a constant fraction on both sides.

57
00:02:55,835 --> 00:03:00,430
 So what is my recurrence going to satisfy in this case where I lies in this bandwidth.

58
00:03:00,430 --> 00:03:07,375
 So my pivot is at least the N over 100th smallest and is at most 99 over 100th smallest.

59
00:03:07,375 --> 00:03:11,280
 In this case, the size of my subproblem is the most .99n.

60
00:03:11,280 --> 00:03:13,840
 So my recurrence satisfies this relation.

61
00:03:13,840 --> 00:03:16,871
 What does this solve to? This also solves the O(n).

62
00:03:16,871 --> 00:03:21,534
 The key is, I need a constant here which is strictly less than one.

63
00:03:21,534 --> 00:03:25,694
 So I'm always chopping off a constant fraction of the nodes.

64
00:03:25,694 --> 00:03:28,919
 Now we're going to define a good pivot as a pivot which lies in

65
00:03:28,919 --> 00:03:33,060
 this middle band between N over 4 and 3n over 4 smallest.

66
00:03:33,060 --> 00:03:35,039
 That's going to give us this recurrence.

67
00:03:35,039 --> 00:03:40,199
 But it's going to be important for our algorithm actually to remember this recurrence.

68
00:03:40,199 --> 00:03:41,665
 We have some extra slack,

69
00:03:41,665 --> 00:03:43,439
 so we're going to aim for a pivot which satisfies

70
00:03:43,439 --> 00:03:48,509
 this relation but they're always going to be some extra slack because I'm allowed

71
00:03:48,509 --> 00:03:51,840
 to have any constant less than one here and we have to

72
00:03:51,840 --> 00:03:55,819
 utilize that extra slack in order to find the pivot which is a good pivot.

73
00:03:55,819 --> 00:03:58,169
 So in the end, our running time is going to satisfy

74
00:03:58,169 --> 00:04:01,409
 a relation similar to this, bottom recurrence.

75
00:04:01,409 --> 00:04:04,379
 But our definition of what is a good pivot is lying in

76
00:04:04,379 --> 00:04:04,379
 this middle band between N over 4 and 3n over 4.

