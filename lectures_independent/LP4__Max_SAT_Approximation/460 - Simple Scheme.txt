Now let's consider some input f to the max stack problem. And once again, let's denote the variables as X_1 through X_n. So there are n variables. And there are m clauses which we'll denote as C_1 through C_M. Now we're going to do the simplest possible scheme for making a true false assignment for these n variables. We're not even going to look at the formula f. We're simply going to assign these variables randomly to true and false. For each variable X_i, independently of the other ones, we're going to set X_i to be true with probability half, and false with probably half. So we simply flip a fair coin and if heads comes up, we set X_i to be true and if tails comes up, we said X_i to be false. And we do that for all n variables. Now how does this random assignment perform? We want to look at the expected performance of this random assignment. How do we measure the performance of the algorithm? Well, we measure the performance by looking at the number of clauses satisfied. Therefore, let W denote the number of satisfied clauses by this random assignment. Now since the assignment is random, W is also a random variable. Now since W is a random variable, we want to look at its expected value which in some sense is the average value of W. In particular, the expectation is the average value of W weighted by its probabilities. Now what are the possible values for W? Well, the minimum number of clauses we can satisfy is of course zero and the maximum number is at most m. So let's sum over the possible value. Let L denote the number of satisfied clauses, and L is going to vary between 0 and m. And then we get this value L and we have to weight it by the probability that the random variable W is equal to L. This is simply the definition of the expectation of a random variable. Now the expectation in this form is quite difficult to analyze. Why? Because whether a particular clause is satisfied or not is related to whether another clause is satisfied or not. Because they might have variables in common. Now what we're going to do is we're going to break up this random variable, which is the total number of satisfied clauses, into a clause by clause quantity. And in this manner we're going to be able to analyze each clause in isolation, independent of what happens for the other clauses. And in that way it's going to be straightforward to analyze the expected performance of the algorithm. So let's look at how exactly we do that.