So let's go ahead and try to find the recurrence for our new sub-problem definition. The length that the longest common sub-sequence, in the first I characters of X and the first J characters of Y. And let's go back and look at our earlier example. Here's our earlier example, and notice that here, they're both of the same length and just to illustrate our new sub-problem definition, let's add in one more character to Y, so there are now of different length. And if you recall our approach from before, what we're going to do is, we're going to look at the last character of both sequences, and we're going to condition on whether they're the same or different. If they're the same and then we can possibly match them together, if they're different, there's no way we can match them together. So let's do the case with a different first. Our key insight, is that in this case with the last characters are unequal, then the longest common sub-sequence either ends in A the last character of X, or in the last character of Y which in this case is D, or it ends in neither. Now if it ends in A, that means it does not end in, it does not end in D, it does not include D in the final solution, okay? There might be other occurrences of D, but we're differentiating the multiple occurrences of this character. This character is not included in the final solution, or this character is not included in the final solution, or both of these final characters are not included in the optimal solution. So there are three cases to consider, either the last character of X is not used in the optimal solution, the last character Y is not used in the optimal solution, or the last character of both is not used in the optimal solution. If the last character of both is not used, we can get there by dropping the last character of X and then dropping the last character or Y or vice versa or dropping less character Y and then X. So there's really only two cases to consider, either we drop the last character of X, or the last character of Y, and we're going to take the best of those two. So let's recap, so if we dropped the last character of X and X I is not used in the optimal solution then, L of I J is the same as L of I minus one, which has just dropped X I from it and J. The other scenario, is that we dropped the last character of Y and in this case L of I J, is L of I, J minus one, we just dropped Y J from Y. How do we know which of these two is the better solution? We just take the larger of the two. So that's going to be our recurrence. Our recurrences is L of I J is going to be the max of these two possible solutions. Let's recap, in this case where X I and Y J are different, so the last characters of the two prefixes are different, then we have a recurrence. L of I J is going to be the best of the two possible scenarios. Either we dropped the last character of X, and therefore we have this solution for I minus one characters of X, and J characters from Y, or we drop the last character from Y and we get the solution, L of I J minus one, and which of the two where we're going to take? We're gonna take the better of the two. Which means we're going to take the one which has larger length which is the max. So this defines a recurrence for the case when X I is not equal to Y J. Now let's do the case where X I equals Y..