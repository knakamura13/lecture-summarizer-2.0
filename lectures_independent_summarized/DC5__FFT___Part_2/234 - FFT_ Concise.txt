FFT algorithm's elegance lies in its brevity. Simple base case: n=1, return polynomial constant term a0. Split vector a into even-indexed a_even, odd-indexed a_odd. Apply FFT recursively to a_even, a_odd with ω^2. Record results from a_even as s0 to s(n/2-1), from a_odd as t0 to t(n/2-1). Combine subproblem results to resolve original problem: rj = a(x) at ω^j is s_j + ω^j*tj; r(n/2+j) is s_j - ω^j*tj. Return sequence r0 to r(n-1).