1
00:00:00,000 --> 00:00:02,670
 Let's go ahead and analyze the running time of this algorithm.

2
00:00:02,670 --> 00:00:07,670
 How long does it take us to partition x into the two halves and y into the two halves?

3
00:00:07,670 --> 00:00:09,700
 These steps take us O(n) time,

4
00:00:09,700 --> 00:00:14,905
 in order to break up x into the first n/2 bits and the last n/2 bits and similarly for y.

5
00:00:14,905 --> 00:00:19,935
 How long does it take us to recursively compute these four products A, B, C and D?

6
00:00:19,935 --> 00:00:23,000
 These are each pairs of n/2 bit numbers.

7
00:00:23,000 --> 00:00:28,560
 So if we use T(n) to denote the running time and the worst case for inputs of size n,

8
00:00:28,560 --> 00:00:34,105
 then each of these takes T(n/2), and there's four of them.

9
00:00:34,105 --> 00:00:39,490
 So the total time for these four recursive subproblems is 4 times T(n/2).

10
00:00:39,490 --> 00:00:42,780
 Finally, given the solutions to these four recursive subproblems,

11
00:00:42,780 --> 00:00:45,000
 how long does it take us to compute z?

12
00:00:45,000 --> 00:00:48,300
 Well we have three additions of O(n) bit numbers.

13
00:00:48,300 --> 00:00:49,498
 How long does that take?

14
00:00:49,498 --> 00:00:51,015
 That takes O(n) time.

15
00:00:51,015 --> 00:00:55,695
 We also have to multiply this O(n) bit number times 2 to the n. How do we do that?

16
00:00:55,695 --> 00:00:59,450
 Well it's much faster than a multiplication which takes O(n) square time.

17
00:00:59,450 --> 00:01:01,620
 This is just a shift n times.

18
00:01:01,620 --> 00:01:06,270
 In order to multiply by 2 to the n we just have to shift this number A, n times.

19
00:01:06,270 --> 00:01:10,180
 Similarly, to multiply this number C + D

20
00:01:10,180 --> 00:01:14,170
 times 2 to the n/2 we have to shift it and n/2 times.

21
00:01:14,170 --> 00:01:17,780
 So it just takes O(n) time to do this multiplication by a power of 2.

22
00:01:17,780 --> 00:01:19,705
 So to compute z,

23
00:01:19,705 --> 00:01:21,485
 it takes us O(n) time.

24
00:01:21,485 --> 00:01:26,790
 So the total time is O(n) + 4 times T(n/2).

25
00:01:26,790 --> 00:01:30,565
 So let's look at T(n) denote the running time of this algorithm

26
00:01:30,565 --> 00:01:35,115
 EasyMultiply on input of size n and this is for the worst input.

27
00:01:35,115 --> 00:01:37,860
 So we take the worst input of size n and

28
00:01:37,860 --> 00:01:41,220
 T(n) is the running time on that worst case input.

29
00:01:41,220 --> 00:01:42,750
 We just looked at the running time of

30
00:01:42,750 --> 00:01:46,840
 our pseudocode and we saw the T(n) satisfies the following relation.

31
00:01:46,840 --> 00:01:50,240
 We have four subproblems of size n/2 each.

32
00:01:50,240 --> 00:01:52,620
 And we take an additional O(n) time to combine

33
00:01:52,620 --> 00:01:55,725
 these solutions together to get the product of x times y.

34
00:01:55,725 --> 00:01:58,155
 So the running time for an input of size n,

35
00:01:58,155 --> 00:02:01,810
 is at most 4 times T(n/2) + O(n).

36
00:02:01,810 --> 00:02:06,335
 Now if you remember how to solve recurrences or this is a good time to brush up on it,

37
00:02:06,335 --> 00:02:08,065
 this recurrence might look familiar.

38
00:02:08,065 --> 00:02:12,285
 And what you might recall is that this recurrence solves to O(n) square.

39
00:02:12,285 --> 00:02:17,670
 So, the easy divide and conquer algorithm that we just described takes O(n) square time.

40
00:02:17,670 --> 00:02:20,430
 So the running time of this divide and conquer algorithm is the

41
00:02:20,430 --> 00:02:24,465
 same as of running time of the straightforward multiplication approach.

42
00:02:24,465 --> 00:02:26,580
 Can we improve this? Can we do better?

43
00:02:26,580 --> 00:02:30,930
 The key thing is, can we improve this four down to three?

44
00:02:30,930 --> 00:02:34,415
 Can we get away with just doing three subproblems?

45
00:02:34,415 --> 00:02:34,415
 This is where we're going to utilize the Gauss's idea that we talked about.

