Now, let's get the idea for the proof of correctness of Kruskal's algorithm by looking at our earlier example. So, recall what Kruskal's algorithm is going to do. It's going to consider these edges by increasing weight. So, we're going to add in these first five edges. The sixth edge we're going to skip because it creates a cycle. Then we add in these five edges of weight seven. And then finally we're going to consider one of these edges of weight nine. Now, which edge of weight nine do we consider first? Well, that's an arbitrary choice. Let's suppose we consider this edge of weight nine first. Let's mark the end points as V and W. Now in general how are we going to prove that this algorithm is correct? Well, we're going to do it by induction. So, let's suppose that the algorithm is correct so far, so that the current X is correct so far. What does that mean to be correct so far? That means that these edges are part of an MST. So, there is MST T and X is a sub-graph of T. So, we're on our way to an MST to a solution to this problem. So, we're assuming that these red edges, which I've now highlighted as green edges, are part of an MST. Now let's suppose that we add this edge that we're considering right now to this sub-graph X. If we don't at this edge to the sub-graph X, then X is still part of MST. But, if we add this edge E to this sub-graph X, then we want to make sure that X union E is part of MST. And that's our claim that we're going to prove. We're going to prove that X union E is part of MST. T prime, T prime might be different than T. So, we might be heading in the direction of a different a MST than we were headed for before, but we're still on our way to an MST. Now, what is the key property that ensures that adding E to X ensures that we're still on our way to an MST. Well, when are we adding this edge E to X? When we look at the component containing V, which are these six vertices and we look at the component containing W, which are these two vertices. These are different components. Therefore, we can add this edge and it doesn't create any cycles. Now, the key property is that if we consider one of these components, let's say the component containing V and we let S be the set of vertices and the component containing V. An S_bar is the complement of this set. So that's the rest of these vertices. Then the key property is that our current subset X, has no edges which go from S to S_bar. If there was an edge that goes from S to S_bar, then that vertex in S_bar which is connected to S would be added into S. So, it would be in the component containing V. This component is a maximal set. So, we know that nobody in S_bar is connected to anybody in S. Therefore, there are no edges of X going from S to the rest of the graph. That's the definition of a component. So X has no edges that go between S and S_bar. So, X doesn't cross between S and the rest of the graph, S_bar. But this edge E does cross between S and S_bar, because V is in S and W is not in S. Now, what is the key property about E? E is a minimum weight edge crossing from S to S_bar. Now, there are several edges of minimum weight crossing between S and S_bar, two in particular. We can take any of those minimum weight edges. For any minimum weight edge crossing between S and S_bar. If we add E to X, then X union E will be part of an MST. That's what we're going to prove. And we're going to prove in general that if we take a subset of edges, which are part of an MST and we take an edge which crosses from S to S_bar of minimum weight and no other edges of this current subset cross from S to S_bar. So, this minimum weight edge crossing from S to S_bar. Then we can add this edge into our current subset and that will still be part of MST. This general claim will be known as the cut property. Before we go ahead and formalize the cut property statement, let me formalize what I mean by a cut. This partition of vertices into S and S_bar.