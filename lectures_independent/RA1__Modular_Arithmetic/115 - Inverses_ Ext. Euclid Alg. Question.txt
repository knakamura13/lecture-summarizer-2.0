Let's go ahead and detail the extended Euclid algorithm. Recall, it takes two parameters as input X and Y where X is at least Y and we're going to output three parameters. D alpha and beta. D is the GCD. So, if we just look at the first parameter, it's going to behave like Euclid's algorithm and we're also going to output this alpha and this beta, which satisfy this relation. Let's start again with the base case. So, when Y equals zero, where do we return.? Well, the first parameter D is the GCD. So, that should be equal to X. Now, we want to find alpha and beta which satisfy the relation, where D in this case is equal to X. So, we want X equals X times alpha plus Y times beta. Well, that's easier to satisfy. We can just say alpha equal to one, and beta equal to zero. That takes care of the base case. Now, for the general case, we're going to use Euclid's rule, which says that the GCD of X and Y is equal to the GCD of Y and X mod Y. So, we recursively call this algorithm on Y and X mod Y. That's going to return three numbers, D, alpha, beta. Let's call it D alpha prime, beta prime. Now, we're going to have to do a little bit of manipulation of these three parameters, in order to get our output for X and Y. Now, we know the first parameter stays the same. The GCD of these two parameters is the same as the GCD of X and Y. Now, what do we know about alpha prime and beta prime? Well, we know that D equals Y times alpha prime plus X mod Y times beta prime. Now, in order to find an alpha and beta which satisfy this relation for X and Y, we have to do some algebra to manipulate this alpha prime and beta prime. It turns out that it's sufficient to set alpha equal to beta prime, and we set beta equal to alpha prime minus X divided by Y, rounded down times beta prime. In order to see where this quantity comes from, you got to look at the proof of correctness which is not too bad, but it's just a bit of algebra. I'll refer you to the textbook for the details on that proof of correctness. That completes its pseudo code for the extended Euclid algorithm. Finally, what's the running time with this algorithm? Well notice, each step, the non-trivial operations are X mod Y and there's little bit of algebra, right here. So, it takes order N squared time per round, and the number of rounds is order N just like Euclid's algorithm. So the total run time is order N cube time.