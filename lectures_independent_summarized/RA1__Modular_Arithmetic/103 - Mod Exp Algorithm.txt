For even y, x^y simplifies to (x^(y/2))^2. For odd y, subtract 1 from y, halve it (rounding down to nearest integer), and square x to this power, then multiply by x to obtain x^y. A recursive algorithm performs modular exponentiation of x^y mod N, where x, y, N are n-bit integers, with N being positive. Base case: for y=0, result is 1 mod N. General case: compute x^(y/2) rounded down if y is odd, store as z. If y is even, return z^2 mod N; if odd, return x*z^2 mod N. Algorithm calls itself with halved y until base case reached.