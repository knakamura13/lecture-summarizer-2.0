Let's start with the Ford-Fulkerson algorithm. Recall the input to the Ford-Fulkerson algorithm is a flow network which is a directed graph with capacities along the edges specified by C_sub_e. And for the Ford-Fulkerson algorithm, we assume that these capacities are integer values. Now we start off by setting the flow to zero along every edge of the graph. Next, we build the residual network for the current flow f. We denote this residual network by G_superscript_f. Now we look for an augmenting path in the residual network. More precisely, we check for a path from s to t in the residual network. And we do this using either BFS or DFS. If such a path exists, that's denoted by cal P. Now if no such path from s to t in the residual network exists, then we return the current flow. We'll prove later that if there is no augmenting path, no path from s to t in the residual network, then the current flow is guaranteed to be a maximum size flow. Now if there is such a path, then we want to augment along this path as much as possible. Therefore, we let c(P) be the capacity of this path. More specifically, it's the minimum over the edges of this path, of the capacity of these edges in the residual network. This is the maximum amount that we can augment this path. Finally, we augment the current flow by c(P) units along this path, and then we repeat the algorithm. We use the current flow and we build a new residual network, and we check for a path and continue. And we stop when there's no st-path in the residual network. This completes the description of the Ford-Fulkerson algorithm. Let's look now at the Edmonds-Karp algorithm.