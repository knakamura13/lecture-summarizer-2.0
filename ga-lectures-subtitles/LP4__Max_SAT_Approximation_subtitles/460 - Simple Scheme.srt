1
00:00:00,000 --> 00:00:03,870
 Now let's consider some input f to the max stack problem.

2
00:00:03,870 --> 00:00:07,170
 And once again, let's denote the variables as X_1 through X_n.

3
00:00:07,170 --> 00:00:09,045
 So there are n variables.

4
00:00:09,045 --> 00:00:12,835
 And there are m clauses which we'll denote as C_1 through C_M.

5
00:00:12,835 --> 00:00:15,210
 Now we're going to do the simplest possible scheme for

6
00:00:15,210 --> 00:00:18,120
 making a true false assignment for these n variables.

7
00:00:18,120 --> 00:00:20,760
 We're not even going to look at the formula f. We're

8
00:00:20,760 --> 00:00:24,210
 simply going to assign these variables randomly to true and false.

9
00:00:24,210 --> 00:00:26,280
 For each variable X_i,

10
00:00:26,280 --> 00:00:27,810
 independently of the other ones,

11
00:00:27,810 --> 00:00:31,020
 we're going to set X_i to be true with probability half,

12
00:00:31,020 --> 00:00:32,890
 and false with probably half.

13
00:00:32,890 --> 00:00:37,080
 So we simply flip a fair coin and if heads comes up,

14
00:00:37,080 --> 00:00:39,750
 we set X_i to be true and if tails comes up,

15
00:00:39,750 --> 00:00:41,440
 we said X_i to be false.

16
00:00:41,440 --> 00:00:44,220
 And we do that for all n variables.

17
00:00:44,220 --> 00:00:46,890
 Now how does this random assignment perform?

18
00:00:46,890 --> 00:00:50,290
 We want to look at the expected performance of this random assignment.

19
00:00:50,290 --> 00:00:52,630
 How do we measure the performance of the algorithm?

20
00:00:52,630 --> 00:00:56,470
 Well, we measure the performance by looking at the number of clauses satisfied.

21
00:00:56,470 --> 00:01:01,350
 Therefore, let W denote the number of satisfied clauses by this random assignment.

22
00:01:01,350 --> 00:01:03,180
 Now since the assignment is random,

23
00:01:03,180 --> 00:01:05,440
 W is also a random variable.

24
00:01:05,440 --> 00:01:07,440
 Now since W is a random variable,

25
00:01:07,440 --> 00:01:09,720
 we want to look at its expected value which in

26
00:01:09,720 --> 00:01:13,305
 some sense is the average value of W. In particular,

27
00:01:13,305 --> 00:01:17,815
 the expectation is the average value of W weighted by its probabilities.

28
00:01:17,815 --> 00:01:19,620
 Now what are the possible values for W?

29
00:01:19,620 --> 00:01:23,250
 Well, the minimum number of clauses we can satisfy is of course zero and

30
00:01:23,250 --> 00:01:27,320
 the maximum number is at most m. So let's sum over the possible value.

31
00:01:27,320 --> 00:01:30,195
 Let L denote the number of satisfied clauses,

32
00:01:30,195 --> 00:01:33,420
 and L is going to vary between 0 and m. And then we get

33
00:01:33,420 --> 00:01:36,750
 this value L and we have to weight it by the probability that

34
00:01:36,750 --> 00:01:39,475
 the random variable W is equal to

35
00:01:39,475 --> 00:01:43,800
 L. This is simply the definition of the expectation of a random variable.

36
00:01:43,800 --> 00:01:46,905
 Now the expectation in this form is quite difficult to analyze.

37
00:01:46,905 --> 00:01:49,800
 Why? Because whether a particular clause is

38
00:01:49,800 --> 00:01:53,815
 satisfied or not is related to whether another clause is satisfied or not.

39
00:01:53,815 --> 00:01:56,330
 Because they might have variables in common.

40
00:01:56,330 --> 00:01:58,740
 Now what we're going to do is we're going to break up this random variable,

41
00:01:58,740 --> 00:02:01,035
 which is the total number of satisfied clauses,

42
00:02:01,035 --> 00:02:03,410
 into a clause by clause quantity.

43
00:02:03,410 --> 00:02:07,605
 And in this manner we're going to be able to analyze each clause in isolation,

44
00:02:07,605 --> 00:02:10,465
 independent of what happens for the other clauses.

45
00:02:10,465 --> 00:02:12,540
 And in that way it's going to be straightforward to

46
00:02:12,540 --> 00:02:15,405
 analyze the expected performance of the algorithm.

47
00:02:15,405 --> 00:02:15,405
 So let's look at how exactly we do that.

