1
00:00:00,000 --> 00:00:02,250
 Let's dive into the FFT algorithm.

2
00:00:02,250 --> 00:00:03,810
 It's a divide and conquer algorithm.

3
00:00:03,810 --> 00:00:05,845
 So let's start with the base case.

4
00:00:05,845 --> 00:00:07,765
 The base cases is when N equals one.

5
00:00:07,765 --> 00:00:09,374
 What are the roots of unity in this case?

6
00:00:09,374 --> 00:00:10,675
 Well, it's just one.

7
00:00:10,675 --> 00:00:14,380
 So we can simply return A evaluated at the point one.

8
00:00:14,380 --> 00:00:18,175
 Now, we have to partition this vector A into A even and AI.

9
00:00:18,175 --> 00:00:21,205
 These correspond to the polynomials A even and AI.

10
00:00:21,205 --> 00:00:22,485
 So let A even,

11
00:00:22,485 --> 00:00:26,500
 the vector A even be even terms in the vector A.

12
00:00:26,500 --> 00:00:28,125
 So A naught, A2,

13
00:00:28,125 --> 00:00:30,340
 A4 up to AN minus two,

14
00:00:30,340 --> 00:00:32,995
 and A odd are the odd terms.

15
00:00:32,995 --> 00:00:35,760
 So A1, A3 up to AN minus one.

16
00:00:35,760 --> 00:00:38,554
 The input vector A was a vector of size N.

17
00:00:38,554 --> 00:00:44,400
 These two vectors A even and AI that we just defined are vectors of size N over two.

18
00:00:44,400 --> 00:00:46,255
 Now, we have our two recursive steps.

19
00:00:46,255 --> 00:00:50,790
 We call FFT the same algorithm with the vector A even,

20
00:00:50,790 --> 00:00:52,505
 and instead of Omega,

21
00:00:52,505 --> 00:00:53,985
 we use Omega square,

22
00:00:53,985 --> 00:00:58,620
 and we also call FFT with A odd and also Omega square.

23
00:00:58,620 --> 00:01:00,730
 What do we get back from this call?

24
00:01:00,730 --> 00:01:05,370
 What we get back is A even at the square of these endpoints,

25
00:01:05,370 --> 00:01:07,910
 which are these N over two points.

26
00:01:07,910 --> 00:01:09,900
 Omega naught, Omega square,

27
00:01:09,900 --> 00:01:11,960
 up to Omega to the N minus two.

28
00:01:11,960 --> 00:01:14,730
 So if Omega is the Nth root of unity,

29
00:01:14,730 --> 00:01:18,960
 then we get A even at the N over second roots of unity.

30
00:01:18,960 --> 00:01:23,040
 And similarly, we get A odd at the N of a second roots of unity.

31
00:01:23,040 --> 00:01:25,346
 Notice that if Omega equals Omega sub N,

32
00:01:25,346 --> 00:01:28,650
 then the Jth of these points square

33
00:01:28,650 --> 00:01:32,865
 is the Jth point in this sequence or actually the J plus first.

34
00:01:32,865 --> 00:01:36,640
 This is Omega sub N over two to the Jth power.

35
00:01:36,640 --> 00:01:41,695
 So this is the Jth or J plus first of the N over second roots.

36
00:01:41,695 --> 00:01:47,915
 Now using these values for A even and A odd we can get A at the Nth root to unity.

37
00:01:47,915 --> 00:01:51,600
 Now we use our formula for A of X in terms of A even and AI.

38
00:01:51,600 --> 00:01:56,360
 So A evaluated at the point Omega to the Jth power equals A even,

39
00:01:56,360 --> 00:01:58,305
 evaluated at this point square,

40
00:01:58,305 --> 00:02:03,285
 plus Omega to the J times A odd at this point square.

41
00:02:03,285 --> 00:02:07,775
 And similarly, if we look at the point Omega to N over two plus J.

42
00:02:07,775 --> 00:02:10,035
 This is the opposite of Omega J.

43
00:02:10,035 --> 00:02:11,660
 So using the same formula,

44
00:02:11,660 --> 00:02:16,070
 this requires A even and A odd at exactly the same points.

45
00:02:16,070 --> 00:02:19,585
 The only difference is we subtract these two terms instead of adding them together.

46
00:02:19,585 --> 00:02:21,980
 This takes order one time for each J.

47
00:02:21,980 --> 00:02:24,420
 So it takes order N total time.

48
00:02:24,420 --> 00:02:26,550
 Finally, we have A evaluated at

49
00:02:26,550 --> 00:02:31,080
 these endpoints and that's our output that we returned from the algorithm.

50
00:02:31,080 --> 00:02:35,800
 Now, notice this algorithm works for any Omega which is an Nth root of unity.

51
00:02:35,800 --> 00:02:41,915
 We only require that Omega to the Jth power is opposite Omega to the N over two plus J.

52
00:02:41,915 --> 00:02:45,428
 That's true for any root of unity except when Omega is one,

53
00:02:45,428 --> 00:02:48,950
 because then this would be one and this would also be one.

54
00:02:48,950 --> 00:02:50,565
 So they're not opposites of each other,

55
00:02:50,565 --> 00:02:52,295
 but for any other root of unity,

56
00:02:52,295 --> 00:02:52,295
 the Jth power is opposite the N over second plus to the Jth power.

