At this point you're prepared to approach any of the problems in chapter six of the textbook. But let me point out a few particular ones which are especially useful. Once again, these are problems from the desk Gupta Papademetriou Abaza Ronnie algorithms textbook and I'm using the numbering from the print version. Problem 6.17, problem 17 in chapter 6, is about change making. Given a set of coins, a set of denominations and a particular value, can you make change for that value using that set of denominations? In fact, there are three variants of the change making problem in the textbook. I suggest doing all three. Another good problem is problem 20 which is about building an optimal binary search tree. There's problem 7 which is about finding the longest palindrome subsequence, and you might also try the variant where instead of doing a palindrome subsequence you look for a palindrome substring. So they have to be contiguous. Now, to summarize some of what we learned in this lecture, when you're devising your subproblem, try prefixes first. If that doesn't work, you might be led in the direction of substrings. Now, one important note to keep in mind is that if you do use substrings and you get it to work and you get a valid solution, then I often go back and look at whether substrings were actually necessary or could I have simplified it and used prefixes. This might lead to a faster algorithm, but it's good to get a valid solution first. Get a polynomial time algorithm using substrings if necessary and then go back and check and think about whether actually substrings were required or not. It's better to have a correct algorithm which is a bit slower than an incorrect algorithm. Once again, the key for getting fluent in dynamic programming is to do lots of practice problems. There are a lot of practice problems in the textbook, but there are a lot available in the web too from other courses and from other books. Do as many as you can and at some point you'll get the hang of it and they'll feel easy. The solutions will start to seem similar to each other but the only way to get to that point is to do lots of practice problems. So good luck. I hope you start to enjoy it once you get.