Dynamic programming applied to a simplified knapsack problem focusing on a single parameter, weight (b). Maximum capacity (B) ranges down to zero. Subproblem K(b) finds the maximum value using a weight up to b, using any items from a set of n. Unlike previous versions, the subproblem lacks an extra parameter and is not limited to the first i items. Recurrence is developed by considering all items as potential last items to add, maximizing their value (Vi), and respecting the weight constraint (Wi â‰¤ b). If an item fits, it is added, Vi is gained, and remaining capacity reduces by Wi, creating a new subproblem K(b-Wi) for optimal solution of reduced weight. Pseudo code for the algorithm fills a one-dimensional table from K(0) to K(B). Final entry K(B) solves the problem.