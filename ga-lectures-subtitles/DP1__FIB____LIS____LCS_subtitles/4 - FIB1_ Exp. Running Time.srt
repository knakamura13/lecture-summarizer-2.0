1
00:00:00,000 --> 00:00:02,609
 Let's take a look at the recursive nature of our algorithm.

2
00:00:02,609 --> 00:00:04,724
 At the top level of the recursion,

3
00:00:04,724 --> 00:00:06,932
 we're computing the nth Fibonacci number.

4
00:00:06,932 --> 00:00:12,054
 Then we have recursive subclause computing the n minus first and n minus second.

5
00:00:12,054 --> 00:00:15,269
 And we recursively compute the n minus first Fibonacci number,

6
00:00:15,269 --> 00:00:18,210
 in which our algorithm is going to recursively compute

7
00:00:18,210 --> 00:00:21,364
 the n minus second and n minus third Fibonacci number.

8
00:00:21,364 --> 00:00:23,045
 And for the n minus second,

9
00:00:23,045 --> 00:00:28,524
 it recursively computes the n minus third and n minus fourth Fibonacci numbers and so on.

10
00:00:28,524 --> 00:00:33,795
 Notice that the n minus fourth Fibonacci numbers can be compute in many times.

11
00:00:33,795 --> 00:00:36,450
 Similarly, when we get down to small Fibonacci numbers,

12
00:00:36,450 --> 00:00:40,270
 we're gonna be recomputed them many times exponential number of times.

13
00:00:40,270 --> 00:00:42,780
 That causes the inefficiency of our algorithm because we're

14
00:00:42,780 --> 00:00:47,234
 recomputing the solution to the small sub-problems many times.

15
00:00:47,234 --> 00:00:50,630
 To get around that, we're gonna flip the algorithm on its head.

16
00:00:50,630 --> 00:00:53,520
 We're gonna compute the small sub-problems first,

17
00:00:53,520 --> 00:00:57,335
 and then work our way to the larger sub-problems.

18
00:00:57,335 --> 00:01:00,750
 In particular, we're gonna make an array F, we're gonna call it,

19
00:01:00,750 --> 00:01:02,549
 to denote the Fibonacci numbers,

20
00:01:02,549 --> 00:01:05,915
 and F of I is gonna be the I Fibonacci number.

21
00:01:05,915 --> 00:01:07,665
 We're gonna start at index zero,

22
00:01:07,665 --> 00:01:10,754
 and we're gonna record the first Fibonacci number,

23
00:01:10,754 --> 00:01:12,765
 and the second Fibonacci number,

24
00:01:12,765 --> 00:01:15,510
 and then we're gonna use a recursive formula to

25
00:01:15,510 --> 00:01:18,644
 compute the third Fibonacci number and so on.

26
00:01:18,644 --> 00:01:22,379
 We're gonna increase our index using the recursive formula.

27
00:01:22,379 --> 00:01:25,299
 Finally, we'll get the n Fibonacci number.

28
00:01:25,299 --> 00:01:26,920
 This is the idea of our algorithm.

29
00:01:26,920 --> 00:01:28,709
 We start with the small indices,

30
00:01:28,709 --> 00:01:31,590
 compute the small Fibonacci numbers, and then,

31
00:01:31,590 --> 00:01:33,515
 we'll work our way up to compute

32
00:01:33,515 --> 00:01:38,159
 the larger Fibonacci numbers using our recursive formula.

33
00:01:38,159 --> 00:01:40,090
 This is our dynamic programming algorithm.

34
00:01:40,090 --> 00:01:40,090
 So let's define it more precisely, so we are all clear.

