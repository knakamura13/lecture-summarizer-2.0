Exploring shortest path problems in directed graphs using dynamic programming, considering graphs represented as G with weighted edges W(e). Directed graphs are used to model undirected ones by replacing each edge with anti-parallel edges. The focus is on calculating the shortest path from a start vertex S to all other vertices, formulated as a distance array, dist(z), for every vertex Z, where dist(z) is the length of the shortest path from S to Z. Dijkstra's algorithm is traditionally used to solve this problem. It operates similarly to BFS but requires a min heap or priority queue due to edge weights, making operations cost log(n) time, leading to a total runtime of (n+m) log(n). However, Dijkstra's algorithm is limited to graphs with positive edge weights, failing when negative edges are present since it doesn't reassess distances once computed. For graphs with negative edge weights, dynamic programming provides a solution to the shortest path problem as Dijkstra's algorithm falls short in these cases. The goal is to develop an algorithm that can handle negative edge weights effectively.