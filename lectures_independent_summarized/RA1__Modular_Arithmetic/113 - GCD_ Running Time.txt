Euclid's algorithm executes by finding X mod Y, a calculation taking O(N^2) time, with 'N' as the bit number in 'X'. A key lemma indicates after each round the changing parameter halves, ensuring at most 2N rounds. With recursive calls at O(N^2) per round, total time complexity becomes O(N^3). The lemma is proven by dividing 'Y' into cases. If 'Y' is â‰¤ X/2, X mod Y < X/2. If 'Y' is > X/2, X mod Y equals X - Y, which is < X/2, confirming the lemma and establishing the algorithm's O(N^3) running time.