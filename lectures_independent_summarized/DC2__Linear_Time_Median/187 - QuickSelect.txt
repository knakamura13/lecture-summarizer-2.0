Algorithm to find the K smallest elements in an unsorted list A involves selecting a pivot P and partitioning A into three sub-arrays: elements smaller than, equal to, and larger than P. The pivot selection is crucial. Depending on K's value and sub-array sizes, the search for the K smallest recurses into the appropriate sub-array. If K is within the size of the smallest array, the search continues there. If K equals the size of the smallest array plus one, the pivot P is the K smallest element. If K extends into the larger sub-array, the search recurses there for K adjusted by the sizes of the other sub-arrays. The crux is how to choose an efficient pivot that enables the algorithm to run in O(n) time.