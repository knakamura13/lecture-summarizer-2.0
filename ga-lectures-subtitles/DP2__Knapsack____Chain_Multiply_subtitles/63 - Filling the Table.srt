1
00:00:00,000 --> 00:00:03,555
 Before we detail the Pseudocode for this dynamic programming algorithm,

2
00:00:03,555 --> 00:00:06,660
 let's go back and look at our recurrence a little more carefully,

3
00:00:06,660 --> 00:00:09,351
 and see how we're going to fill the table up.

4
00:00:09,351 --> 00:00:12,235
 This recurrence is a little different from earlier examples,

5
00:00:12,235 --> 00:00:14,430
 so how we're going to fill the table up is actually

6
00:00:14,430 --> 00:00:17,095
 going to be a little bit more complicated than before.

7
00:00:17,095 --> 00:00:19,260
 We're looking at this two-dimensional table C,

8
00:00:19,260 --> 00:00:23,010
 and we're trying to compute the upper diagonal of this table.

9
00:00:23,010 --> 00:00:26,460
 So those entries where j is at least i. Now, what was our base case?

10
00:00:26,460 --> 00:00:28,850
 Our base case was diagonal,

11
00:00:28,850 --> 00:00:31,545
 these are the entries C(i, i).

12
00:00:31,545 --> 00:00:35,025
 This is the first thing we're going to fill in.

13
00:00:35,025 --> 00:00:37,400
 What is the next thing that we're going to fill in?

14
00:00:37,400 --> 00:00:41,345
 The next entries we're going to fill in are the entries C(i,i+1).

15
00:00:41,345 --> 00:00:43,660
 Look at the recurrence for these entries.

16
00:00:43,660 --> 00:00:47,510
 L is going to vary between i and that's it,

17
00:00:47,510 --> 00:00:50,730
 that's the only choice for L. And then what are subproblems looks like?

18
00:00:50,730 --> 00:00:56,840
 Our subproblems are C(i,i) and (i+1, i+1).

19
00:00:56,840 --> 00:00:59,330
 So to compute this entry,

20
00:00:59,330 --> 00:01:02,980
 we use these diagonal entries which are there in our base case.

21
00:01:02,980 --> 00:01:06,920
 What is this? What are these entries correspond to in our table?

22
00:01:06,920 --> 00:01:08,740
 These are the off diagonals,

23
00:01:08,740 --> 00:01:12,820
 these are the second type of entries that we're going to fill in.

24
00:01:12,820 --> 00:01:16,405
 So we're going to first do the diagonal and then we're going to do these off diagonal.

25
00:01:16,405 --> 00:01:18,070
 And in order to compute the off diagonal,

26
00:01:18,070 --> 00:01:19,270
 we use the diagonal entries.

27
00:01:19,270 --> 00:01:20,975
 What is the next ones we're going to do?

28
00:01:20,975 --> 00:01:22,705
 C(i,i+2).

29
00:01:22,705 --> 00:01:25,590
 Look at the recurrence in order to compute these,

30
00:01:25,590 --> 00:01:29,780
 we're going to use either diagonal entries or the off diagonal entries.

31
00:01:29,780 --> 00:01:31,420
 So there are going to be there on the table.

32
00:01:31,420 --> 00:01:33,425
 Finally, what is the last one we're going to compute?

33
00:01:33,425 --> 00:01:38,360
 It's this one right here that corresponds to C(1,n) what is that?

34
00:01:38,360 --> 00:01:39,580
 That's our final answer.

35
00:01:39,580 --> 00:01:41,050
 That's the one we're trying to compute.

36
00:01:41,050 --> 00:01:45,765
 This is the minimum cost to compute the product of matrices from A_1 up to A_n.

37
00:01:45,765 --> 00:01:47,470
 So what our algorithm is going to do?

38
00:01:47,470 --> 00:01:49,135
 It's going to start at this diagonal,

39
00:01:49,135 --> 00:01:51,485
 and then it's going to move up, okay?

40
00:01:51,485 --> 00:01:55,060
 How do we index that in our algorithm? Well, look.

41
00:01:55,060 --> 00:01:59,385
 Look at this difference between the j and i.

42
00:01:59,385 --> 00:02:04,040
 Let's call it the width and let's call that S. So S is j minus i.

43
00:02:04,040 --> 00:02:06,310
 For the diagonal entries which are a base case,

44
00:02:06,310 --> 00:02:09,030
 the width is S = 0.

45
00:02:09,030 --> 00:02:12,610
 The off diagonals which we do next are have S = 1,

46
00:02:12,610 --> 00:02:15,205
 they have width one, then we have width two,

47
00:02:15,205 --> 00:02:18,335
 and so on until we get to width n-1.

48
00:02:18,335 --> 00:02:22,150
 So we're going to vary the width from zero up to n-1.

49
00:02:22,150 --> 00:02:22,150
 Now, we can go ahead and detail our Pseudocode for our dynamic programming algorithm.

