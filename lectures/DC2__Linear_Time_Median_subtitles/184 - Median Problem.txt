Let's look now at another nice example of divide and conquer. This is the problem of finding the median. The input to the problem are n numbers, and these are an arbitrary order. So we assume the list is unsorted and input is given to us as this one dimensional array, capital A. Our goal is to find the median of A, this is the middle element. When n is even, it's not exactly clear what we mean by the median. So for concreteness, let's define the median as the N over second, ceiling, smallest element of A. So when n is odd. So N equals two times L plus one for some integer L. Then in this case, the median is the L plus first smallest and there are exactly L which are, at most, this median element, and there is at least L which are at least this median element. It will be useful for us to solve a more general problem. Instead of finding the median element, we want to find the K smallest, where K is an input given to us. More specifically, we're going to look at the following problem. We're given an unsorted list A, just as before, and we're also given an integer K, where K is between one and n. Our goal is to find the K smallest of A. So if we said K equal to n over two, then that'll be the median. Now if A happens to be sorted, then it's easy to find the K smallest. We just output the Kth element of the sorted list. So that gives us a very trivial algorithm for solving this problem. Given an arbitrary A, we simply sort A and then we output the Kth element of this sorted list. How long does this algorithm take? Well, merge sort or several other algorithms take order n log n time to sort A. So the total runtime of this algorithm will be order n log n. Now is it possible to find the Kth smallest without first sorting A? That's what we're going to do now. And, in fact, we'll find the Kth smallest in order and time instead of order n log n time. What we're going to do now is this very clever divide and conquer algorithm for finding the Kth smallest in order n time. This algorithm is due to Blum, Floyd, Pratt, Rivest and Tarjan from 1973. The story is that they figured it out over lunch. Once you see the algorithm and it's quite clever, it will be quite impressive that they just figured this out just over one lunchtime.