Now, let's go ahead and try to define our dynamic programming algorithm for this problem. The first step in our recipe is to define the subproblem in words and we'll always try prefixes as our first attempt. Therefore, we let c of i be the minimum cost for computing the product of the first i matrices in the input. Now, let's go back and see if we can define a recurrence for this subproblem definition. Let's look at our graphical view, our root, which we're trying to compute is A1 times A2 times up to An, the product of these n matrices. In our graphical view, we're going to have a left child and right child. The left child is going to correspond to some prefix. It's going to be the product of A1 times A2 up to Ai for some i. The right child is going to correspond to the product of Ai plus one up to An. Now, let's look at a recurrence which is going to tell us the minimum cost for computing A1 times A2 up through An. What we're going to do is we're going to try all possibilities for the split i and then we're going to recursively look up what is the minimal cost for computing this subtree, which has root A1 times A2 up to Ai. And we're going to look up, hopefully, recursively, what is the minimum cost for computing this subtree, which has a root A plus one through An. Now, we're aiming for prefixes, but this subproblem is a suffix. So, you might think, well, instead of just doing prefixes, why don't we just do prefixes and suffixes? Well, let's go one more level in this tree, in this binary tree and we'll see that it gets worse. Let's look at the children of this node. There's going to be some split here at some j, index j and the left's child is gonna correspond to the product of Ai plus one up to Aj and the right child is going to correspond to the product of Aj plus one up to An. Now, we'd like to try all possibilities for the split index j and then we'd like to look up in our table the minimum cost for this subtree and the minimum costs for this subtree. Well, this subtree is a suffix. That's good. But what is this tree? This is not a prefix or suffix. This is a substring. That's the key thing, is that all the intermediate computations are going to correspond to substrings. It's going to be some index i and some index j. And we're going to look at the product from i to j. And this is going to suffice to consider substrings. So, we're going to have to go back and revise our subproblem definitions, so that we don't consider prefixes, we're going to look at substring-