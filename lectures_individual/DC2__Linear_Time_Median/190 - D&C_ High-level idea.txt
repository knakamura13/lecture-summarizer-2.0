Now we're aiming for an O(n) running time and we're trying to use divide and conquer. So let's look at the recurrences which yield an order N solution and then this will give us some idea of the algorithm basic approach. Take a look at this recurrence. What does this recurrence solve to? T(n) equals to T(n) over two plus O(n). This recurrence solves to O(n). How can we achieve a running time like this from the basic approach that we align on the previous slide? We have one sub problem which is of size and most N over 2. In our previous approach, we either recurse on A less than P or A bigger than P. In order to achieve that the sub problems of size and most N over 2, we need that the pivot P is the median. If the pivot is the median of the unsorted list, then we know that A less than P is in most N over 2 and a bigger n P is of size at most n over two and therefore the running time of our algorithm will be exactly this which solves to O(n). Now the problem is that the whole problem that we're trying to solve originally was to try to find the median of this list. So if you give us a solution then I can run for O(n) time and I can find the solution again. That's the punch line so far. But what if I don't actually have the median exactly? What if I have an approximate, a reasonable guess of the median? So suppose P is an approximate median, it's fairly close to the median but it's not exactly the median. Let's just do a thought process. Let me look at the sorted array A. So I'm not actually sorting A but I'm just thinking about it, this array A as being sorted, and the median little sign right here in the middle. And here I have the smallest element, here I have the largest element. Let me look at N over 4 smallest and let me look at the 3n over 4 smallest. Suppose instead of giving you the median, I just give you something which is guaranteed to lie within this band. So it's at least the N over 4 smallest and it's at most 3n over 4 smallest. So it's not lying in either of these extremes, it's lying in this middle band. Suppose I can find a pivot which satisfies this. So it's going to lie in this band. What does that imply about the running time of my algorithm. How large are these sub problems going to be in the worst case. When the worst case maybe it lies right here, it's a 3n over 4 smallest and then A less than P is going to be a size 3n over 4. Similarly, if it's N over 4 smallest then a bigger than P is going to be of size 3n over 4. And in general, I know that the size of the sub problem is going to be at most 3n over 4. So my recurrence is going to satisfy this relation. Now the question is, what does this recurrence solve to? Turns out, it's still solves to O(n) and in fact I can relax it even more. I don't even need three quarters here. I can look at the N over 100th smallest here and then .99n smallest over here. I just have to chop off a constant fraction on both sides. So what is my recurrence going to satisfy in this case where I lies in this bandwidth. So my pivot is at least the N over 100th smallest and is at most 99 over 100th smallest. In this case, the size of my subproblem is the most .99n. So my recurrence satisfies this relation. What does this solve to? This also solves the O(n). The key is, I need a constant here which is strictly less than one. So I'm always chopping off a constant fraction of the nodes. Now we're going to define a good pivot as a pivot which lies in this middle band between N over 4 and 3n over 4 smallest. That's going to give us this recurrence. But it's going to be important for our algorithm actually to remember this recurrence. We have some extra slack, so we're going to aim for a pivot which satisfies this relation but they're always going to be some extra slack because I'm allowed to have any constant less than one here and we have to utilize that extra slack in order to find the pivot which is a good pivot. So in the end, our running time is going to satisfy a relation similar to this, bottom recurrence. But our definition of what is a good pivot is lying in this middle band between N over 4 and 3n over 4.