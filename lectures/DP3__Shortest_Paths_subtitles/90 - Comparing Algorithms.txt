Let me modify this example slightly. I've taken the example from the last slide and I would just flip this one edge from d to b, it used to be, and now goes from b to d. And, I want to compare the two algorithms we have for detecting negative weight cycles. First algorithm is Bellman-Ford. The second algorithm we have is Floyd-Warshall. Floyd-Warshall does all pair shortest path. Bellman-Ford does single source shortest path. So, we give it a start vertex and it finds the shortest path from that started vertex to all other vertices. Now, in this example, suppose we run Bellman-Ford with the start vertex as d. It's not going to do much interesting because from d, you can't even reach any end of the graph. But, is it going to find this negative weight cycle, a, b, c? It's not going to find it because that cycle is not reachable from the start vertex. So Bellman-Ford only finds negative weight cycles reachable from the start vertex. It can't find this cycle because it's not reachable from the start vertex d, in this case. If we had run Bellman-Ford from a or b or c or even e, then we would have found this negative weight cycle. So Bellman-Ford finds negative weight cycles which are reachable from the start vertex, whereas Floyd-Warshall will find a negative weight cycle anywhere in the graph because it's doing all pairs, so it's finding everything in the graph.