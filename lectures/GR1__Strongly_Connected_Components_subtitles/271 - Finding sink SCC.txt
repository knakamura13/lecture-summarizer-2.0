This is the property that we just claimed is true. When we run DFS on any directed graph, the vertex with the highest post order number lies in a source SCC. We'll go back and prove this property momentarily, but let's first use it to get an SCC algorithm. We need a vertex which lies in a sink SCC. How can we find such a vertex W which is guaranteed to lie in a sink SCC? Well, we know how to find a vertex which lies in a source SCC. I claim we can use this as a subroutine in order to find a vertex which is guaranteed to lie in a sink SCC. And then we're all done then we have our SCC algorithm. Why don't you go ahead and think about this? How can we find a vertex which is guaranteed to lie in a sink SCC using this property that the highest post order number lies in a source SCC? In some sense we just want to redefine the terms. We want to redefine a source to be a sink and a sink to be a source. What do we mean by that? Think about our topologically ordering of a DAG. The edges go left to right, and the beginning of the ordering is a source and at the end is a sink. What if we flipped all the edges to go backwards? Then this vertex which used to be a sink would now be a source, and this vertex which used to be a source will now be a sink because all the edges go right to left. So the ordering will be opposite. That's what we want to do now for our general directed graph. We want to flip the graph. We want to look at the opposite graph or the reverse graph. And then the source component will become a sink component, and the sink component will become a source component. Now, for a general directed graph G which has vertex set V, and edge set E. We're going to look at GR. This is going to be the reverse of the graph G. The vertex set is going to stay the same. The edge set is going to change from E to E-reversed. We're just going to reverse all the edges. These are directed edges so we're just going to look at the reverse edges. What exactly is E-R? For every edge in E, if we have an edge from V to W, we're going to add into E-R, we're going to add in the edge from W to V. E-R is simply the reverse of every edge in E. Notice if we flip all the edges, we look from G to G-R then all of the sources and sinks get flipped. Now, how does these strongly connected components of G compared to the strongly connected componentes of G-R? Notice that if a pair of vertices are strongly connected in G then they're also strongly connected in G-R There's a path from V to W and G, and a path from W to V. Then in G-R there also is a path from V to W and W to B. The set of strongly connected components are the same in the two graphs. Now, how is the meta graph on the strongly connected components? Look in these two graphs It might be different. In particular, the meta graph of strongly connected components in G is a DAG. And now, what does it look like in G-R? Well, we flipped that DAG so all the strongly connected components which were at the beginning of the topological ordering are now at the end. The edges are not going right to left instead of left to right. If we take a component which was a source SCC and G then it becomes a sink as SCC in G-R because the ordering goes backwards. Similarly, if we take a component which was at the end of the ordering for G then it's going to be at the beginning of the ordering for G-R. Now, how do we address our original problem? We want to find a vertex which is guaranteed to lie in a sink SCC of G. All we can do is find vertices which are guaranteed to lie in a source SCC. Well, the sink SCC of G corresponds to a source of G-R. So we take this input graph G, we construct its reverse graph, and then we run DFS on this reverse graph, and then we take the vertex with highest post order number as guaranteed to be in a source SCC of this graph G-R. This vertex which is guaranteed to be in a source SCC of G-R, or that SCC, is a sink in G. So this vertex with highest post order number for the DFS run on G-R is guaranteed to be in a sink SCC of G, the original graph. That's it. That's our algorithm for finding a vertex which is guaranteed to lie in a sink SCC of a graph G. You just reverse the graph, run DFS, take the highest post order number of vertex, and is guaranteed to be in a source of G-R, and therefore a sink of G. And now we have our algorithm for finding strongly connected components and is going to find the strongly connected components in topological ordering. We're going to find a sink SCC and move on, so we're going to find this ordering from right to left.