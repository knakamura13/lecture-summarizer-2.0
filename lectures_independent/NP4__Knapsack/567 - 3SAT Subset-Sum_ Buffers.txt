Let's go back and specify the remainder of the reduction in general. For each clause, we encoded the literals which appear in that clause using V_i and V_i prime. To ensure that at least one of these literals is satisfied, we put a three in digit n plus j of t. Then, if all of the literals in this clause are satisfied, we get the desired sum in this digit. What if only one or two of the literals in this clause are satisfied, how do we get the desired sum? Well, that's where we use S_j and S_j prime to act as buffers. We put a one in digit n plus j of both of these numbers, and finally put a zero in digit n plus j of all the other numbers which we haven't specified so far. The main point is that, if all three of the literals in this clause are satisfied, then we get the desired sum of three in this digit. If exactly one or two of these literals are satisfied, then using these buffer numbers, we get the desired sum of three in this digit. But if none of the literals in this clause are satisfied, then there's no way to achieve a sum of three in this digit because the sum of these buffer numbers only adds up