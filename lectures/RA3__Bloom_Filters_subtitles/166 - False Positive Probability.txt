So what have we done so far? We've shown that the probability that a specific bit is zero is equal to one minus one over N raised to the power M times K. Let's try to manipulate this to get a slightly more convenient expression. I want to replace this by an exponential. Supposed I look at E to the minus A for a number A. Let's take a look at the Taylor series for the exponential function. Let me remind you of that expression. So I have the exponential of minus A, where A is a number. That start off with one minus A, plus A squared over two factorial, minus A cubed over three factorial. Notice it's a alternating sign next term is A to the fourth over four factorial, and so on. You have this infinite series. Now for small A this series is decreasing, and as A goes to zero, then this series is approximated by one minus A. So this is a good approximation when A is sufficiently small. That's going to correspond in our case to N being sufficiently large and we're looking at A as N grows to infinity. So let's use this approximation to simplify our analysis of the false positive rate. So what can I do here? Here I have a equals one over N, as N grows one over N goes to zero. So there's a reasonable approximation, so I can replace one minus one over N by E to the minus one over N. So I have E to the minus MK over N. Recall that C is the ratio of the size of the hash table to the size of the database. Therefore, this expression can be simplified to E to the minus K over C. So now I have a very simple expression for the probability that a specific bit is zero. Recall our original problem. We have an element X which was not inserted into our database. We want to look at the probability of a false positive for this element. So what's the chance we output yes, even though X was not inserted into the database? So what's the probability that all of these K Bits corresponding to X were set to one by some other insertions? Well, the probability of a specific Bit being set to zero. We've just analyzed and shown that it's approximately E to the minus K over C. So what's the probability one of these specific Bits is set to one? It's one minus the probability that is set to zero. The probability set to zero is E minus K over C, the probability set to one is one minus E minus K over C. And we want K specific Bits all set to one. So the probability of that, is this raised to the power K. This expression is the false positive probability. It's not very nice right now because we have this K. Can we simplify this by eliminating K? Can we figure out what is the optimal K in order to minimize this false positive probability? Recall our intuition from before, we wanted to have K not too small, if K is small, then when we do a query, we're checking too few bits. But if K was big, if it's too large, then when we do an assertion we're setting too many bits to one, for each insertion. So there's some middle ground and we want to figure out the optimal choice of K in order to minimize this false positive probability. So what are we going to do? We're going to take this function. We're going to take its derivative. Set it at equal to zero and find the optimal choice of K in order to minimize this expression. So a bit of calculus, we're going to skip it. But I'll tell you the punchline.