1
00:00:00,000 --> 00:00:04,395
 For this example, the maximum value that we can obtain is 18,

2
00:00:04,395 --> 00:00:08,245
 and that is obtained by using objects two and three.

3
00:00:08,245 --> 00:00:14,730
 The total weight of these objects is 22,12 + 10 and the value we obtained from them,

4
00:00:14,730 --> 00:00:17,785
 the total value is 10 + 8 is 18.

5
00:00:17,785 --> 00:00:20,070
 Now, let's compare this to the greedy algorithm.

6
00:00:20,070 --> 00:00:21,540
 What would a greedy approach do?

7
00:00:21,540 --> 00:00:22,860
 A greedy approach would take

8
00:00:22,860 --> 00:00:25,800
 the most valuable object and try to

9
00:00:25,800 --> 00:00:29,350
 fill up the backpack as much as possible with that most valuable object.

10
00:00:29,350 --> 00:00:31,040
 What is the most valuable object?

11
00:00:31,040 --> 00:00:35,165
 That's not the one with the total maximum total value.

12
00:00:35,165 --> 00:00:40,380
 It's instead the one with the maximum value per unit of weight.

13
00:00:40,380 --> 00:00:44,940
 If the weights are in pounds or kilograms and the value is in dollars,

14
00:00:44,940 --> 00:00:48,380
 then we're looking at the object with maximum

15
00:00:48,380 --> 00:00:53,210
 to the other value per pound or per kilogram.

16
00:00:53,210 --> 00:00:58,154
 In summary, the greedy approach would sort the objects by their value per unit of weight,

17
00:00:58,154 --> 00:00:59,610
 which is this, quantity ri,

18
00:00:59,610 --> 00:01:02,985
 which is states value divided by its weight.

19
00:01:02,985 --> 00:01:06,425
 In this example the objects are already sorted by that ratio.

20
00:01:06,425 --> 00:01:09,075
 We have that r1 > r2,

21
00:01:09,075 --> 00:01:11,480
 > r3, > r4.

22
00:01:11,480 --> 00:01:13,235
 So now what would a greedy approach do?

23
00:01:13,235 --> 00:01:17,915
 The greedy approach would try to add object one, if it can,

24
00:01:17,915 --> 00:01:21,635
 in this case it can, then we go to object two,

25
00:01:21,635 --> 00:01:24,580
 and it would try to add object two if it can put.

26
00:01:24,580 --> 00:01:27,960
 In this example, once you add in object one,

27
00:01:27,960 --> 00:01:30,615
 you have 15 units of weight.

28
00:01:30,615 --> 00:01:32,425
 You only have seven units of weight remaining,

29
00:01:32,425 --> 00:01:34,355
 so you can no longer add in object two.

30
00:01:34,355 --> 00:01:36,120
 Then we go to object three.

31
00:01:36,120 --> 00:01:37,955
 The next most valuable object.

32
00:01:37,955 --> 00:01:40,345
 We would try to add it in, does it fit?

33
00:01:40,345 --> 00:01:44,550
 No it doesn't fit. Then we try to add object four, if it can.

34
00:01:44,550 --> 00:01:48,090
 In this example it can because 15 + 5 is 20.

35
00:01:48,090 --> 00:01:51,360
 It fits in the backpack so the greedy approach

36
00:01:51,360 --> 00:01:55,495
 could obtain the solution using objects one and object four.

37
00:01:55,495 --> 00:01:58,410
 Notice that the total value of this solution,

38
00:01:58,410 --> 00:02:01,845
 object one and object four is 15 + 1,

39
00:02:01,845 --> 00:02:03,585
 so it has total value 16,

40
00:02:03,585 --> 00:02:07,740
 whereas our optimal solution has total value 18.

41
00:02:07,740 --> 00:02:10,430
 This example illustrates why the greedy approach fails.

42
00:02:10,430 --> 00:02:12,255
 It would try to add an object one,

43
00:02:12,255 --> 00:02:13,935
 and once it does that,

44
00:02:13,935 --> 00:02:18,360
 it's filling up the backpack too much and it can no longer fit in object two or three,

45
00:02:18,360 --> 00:02:22,500
 and it ends up being more useful to skip object one and,

46
00:02:22,500 --> 00:02:24,230
 instead, add in objects two and three.

47
00:02:24,230 --> 00:02:26,130
 If you want to make a sub optimal choice at

48
00:02:26,130 --> 00:02:30,375
 the beginning to allow you to squeeze in more objects later on.

49
00:02:30,375 --> 00:02:30,375
 Now, let's go back and try to make our dynamic programming solution for this problem.

