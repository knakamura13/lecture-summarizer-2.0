1
00:00:00,000 --> 00:00:03,720
 I want to look at the metagraph on strongly connected components.

2
00:00:03,720 --> 00:00:06,975
 So we're going to have a vertex for each strongly connected component.

3
00:00:06,975 --> 00:00:09,870
 So let's go ahead and mark the five strongly connected components,

4
00:00:09,870 --> 00:00:12,076
 the five vertices in this metagraph.

5
00:00:12,076 --> 00:00:14,265
 Here are the five strongly connected components,

6
00:00:14,265 --> 00:00:17,385
 A, BE, D, CFG,

7
00:00:17,385 --> 00:00:22,020
 and H through L. So I've marked those five vertices down here, A,

8
00:00:22,020 --> 00:00:25,890
 BE, CFG, D, and H through L. Now,

9
00:00:25,890 --> 00:00:28,099
 what are the edges in this metagraph?

10
00:00:28,099 --> 00:00:30,045
 Well, some vertex in this component,

11
00:00:30,045 --> 00:00:33,520
 BE, has an edge to some vertex in this component,

12
00:00:33,520 --> 00:00:36,650
 CFG, namely B to C. So,

13
00:00:36,650 --> 00:00:39,485
 we'll put an edge from this component to this component.

14
00:00:39,485 --> 00:00:42,970
 Similarly, there's an edge from this component, BE, to D,

15
00:00:42,970 --> 00:00:46,100
 from A to B, F to I,

16
00:00:46,100 --> 00:00:48,270
 and E to L. Now,

17
00:00:48,270 --> 00:00:50,115
 what do you notice about this graph?

18
00:00:50,115 --> 00:00:53,030
 This metagraph on strongly connected components?

19
00:00:53,030 --> 00:00:56,040
 Now, this metagraph on strongly connected components may,

20
00:00:56,040 --> 00:00:57,910
 in fact, be a multigraph.

21
00:00:57,910 --> 00:01:02,190
 For example, I may have an edge from G to J and then,

22
00:01:02,190 --> 00:01:06,155
 I'll have another edge from this component to this component.

23
00:01:06,155 --> 00:01:09,750
 So, I have a pair of edges from this component, C F G,

24
00:01:09,750 --> 00:01:12,260
 to H through L. Now,

25
00:01:12,260 --> 00:01:13,780
 the multiplicity doesn't matter.

26
00:01:13,780 --> 00:01:16,700
 So we can keep those multiple edges or we can drop them.

27
00:01:16,700 --> 00:01:20,915
 It doesn't matter. So let's go ahead and drop those multiple edges for simplicity.

28
00:01:20,915 --> 00:01:25,575
 Either way, what is the key property of this metagraph on strongly connect components?

29
00:01:25,575 --> 00:01:28,340
 What do you notice about this metagraph?

30
00:01:28,340 --> 00:01:30,025
 Notice that there are no cycles.

31
00:01:30,025 --> 00:01:33,095
 So, this metagraph is a DAG. And that's always the case.

32
00:01:33,095 --> 00:01:36,110
 Every metagraph on strongly connected components for

33
00:01:36,110 --> 00:01:39,885
 every directed graph is a DAG. Why is that?

34
00:01:39,885 --> 00:01:42,255
 Why are there no cycles in this metagraph?

35
00:01:42,255 --> 00:01:46,470
 Well, suppose there's two strongly connected components which are involved in a cycle.

36
00:01:46,470 --> 00:01:48,620
 Then that means there's a path from somebody in

37
00:01:48,620 --> 00:01:50,660
 this component to somebody in this component,

38
00:01:50,660 --> 00:01:51,950
 and from somebody in this component,

39
00:01:51,950 --> 00:01:54,465
 there's a path back to this component.

40
00:01:54,465 --> 00:01:56,390
 Now, we know everybody in this component S is

41
00:01:56,390 --> 00:01:59,020
 connected to each other because it's strongly connected.

42
00:01:59,020 --> 00:02:02,540
 Everybody over here in S prime is strongly connected to each other.

43
00:02:02,540 --> 00:02:07,340
 So, therefore if there's these paths from S to S prime and S prime to S,

44
00:02:07,340 --> 00:02:10,580
 that means everybody in S can reach everybody in S prime

45
00:02:10,580 --> 00:02:14,000
 and everybody in S prime can reach everybody in S. Therefore,

46
00:02:14,000 --> 00:02:17,595
 S union, S prime is a strongly connected component.

47
00:02:17,595 --> 00:02:23,735
 Now these components are defined to the maximal sets of strongly connected vertices.

48
00:02:23,735 --> 00:02:25,450
 Therefore, we have a contradiction because

49
00:02:25,450 --> 00:02:28,445
 a strongly connected component should be S union,

50
00:02:28,445 --> 00:02:31,855
 S prime, it shouldn't be S separated from S prime.

51
00:02:31,855 --> 00:02:34,415
 So, if there is a cycle in this metagraph,

52
00:02:34,415 --> 00:02:37,900
 then we can merge strongly connected components together to get

53
00:02:37,900 --> 00:02:41,735
 a larger strongly connected component and therefore we get a contradiction.

54
00:02:41,735 --> 00:02:47,695
 Therefore, there can't be any cycles in this metagraph and thus it must be a DAG.

55
00:02:47,695 --> 00:02:49,520
 We now have this amazing property.

56
00:02:49,520 --> 00:02:53,450
 Every directed graph is a DAG of it's strongly connected components.

57
00:02:53,450 --> 00:02:55,520
 So, we can break up a directed graph into

58
00:02:55,520 --> 00:02:57,890
 strongly connected components and then we can order

59
00:02:57,890 --> 00:03:02,850
 these strongly connected components into topological ordering because it's a DAG.

60
00:03:02,850 --> 00:03:04,970
 So, you can take an arbitrary directed graph,

61
00:03:04,970 --> 00:03:06,575
 which may be very complicated,

62
00:03:06,575 --> 00:03:09,660
 and you can find this beautiful structure hidden in it.

63
00:03:09,660 --> 00:03:13,695
 You can break it up into strongly connected components and then you can topologically

64
00:03:13,695 --> 00:03:18,825
 sort these strongly connected components so that all edges go left to right.

65
00:03:18,825 --> 00:03:21,710
 That's what we're going to do now. We're going to find an algorithm which is going to

66
00:03:21,710 --> 00:03:24,590
 find the strongly connected components and it's going to find

67
00:03:24,590 --> 00:03:27,800
 the strongly connected components in some order and the order is going to

68
00:03:27,800 --> 00:03:32,130
 be topological ordering of these strongly connected components.

69
00:03:32,130 --> 00:03:33,770
 So, we're going to topologically sort

70
00:03:33,770 --> 00:03:37,235
 these strongly connected components as we find them.

71
00:03:37,235 --> 00:03:38,900
 Now, the amazing thing is that we're going to

72
00:03:38,900 --> 00:03:41,240
 find these strongly connected components and

73
00:03:41,240 --> 00:03:45,780
 this topological ordering with just two runs of DFS.

74
00:03:45,780 --> 00:03:47,600
 Now, let's dive into the algorithm to see how we're

75
00:03:47,600 --> 00:03:47,600
 going to find these strongly connected components.

