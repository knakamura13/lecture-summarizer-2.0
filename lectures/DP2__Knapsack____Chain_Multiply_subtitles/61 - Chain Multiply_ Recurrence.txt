We're trying to find recurrence for the entry C(i,j). This corresponds to computing the product of the matrices defined by the substring from i to j. Let's go back and look at our graphical representation. The root of the tree that we're trying to compute, corresponds to the product of the matrices Ai through Aj. Now, what are we trying to do? We're trying to find the split. Let's say at L and then the left subtree corresponds to the product of the matrices Ai through Al. The right subtree corresponds to the product of the matrices Al +1 through Aj. How is our recurrence going to work? We're going to try all possibilities for this index L for the split, and then we're going to look up in our table to minimum cost for computing this subtree, which corresponds to a smaller substring, and we're going to look up in our table the minimal costs for computing this subtree, and then we're going to combine those together. How much does it cost to combine them together? Well, this matrix is of size.Mi -1 by Ml, and this matrix is of size Ml by Mj. Sort of multiply these together it cost Mi -1 times Ml times Mj. So computing the root cause, this amount computing the left subtree costs, this entry corresponding to this substring which is C(i,l) and similarly, the right subtree corresponds to the entry Cl +1 j. So the total cost for this split at index L is the sum of these three. And what are we going to do? We're going to try all possibilities for L and we're going to take the one which has minimum sum.