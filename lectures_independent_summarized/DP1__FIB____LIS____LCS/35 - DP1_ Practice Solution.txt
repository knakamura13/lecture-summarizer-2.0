Solved problem 6.1 by defining s(i) as the maximum sum obtainable from a substring ending with a_i, from a_1 to a_i with the inclusion of a_i. Base case s(0)=0 represents an empty substring. For s(i) where i >= 1, the recurrence is the maximum of either a_i alone or a_i plus s(i-1), depending on if s(i-1) is positive. Final algorithm output is the maximum value across all s(i), not just s(n), since the maximum sum substring may end before a_n. The table is filled iteratively from i=0 to n, and the running time of the algorithm is O(n), with each entry requiring constant time and there being n entries.