Now let's dive into the analysis of the maximum load. What we've seen so far, is that for a particular set of log and balls, the probability that these log and balls are assigned to a particular Bin Bi is one over N raised to the power LogN. We're going to try to show that the max load is typically at most LogN. Now, what does typically mean? We're going to have to detail exactly what we mean by that. But in order to prove that the max load is a most LogN, we want to show that the probability that a particular Bin Bi gets load greater than LogN and we want to propound that probability and show that it's small. It's unlikely to get load at least LogN. In order for Bin Bi to get loaded least LogN, a particular set of log N balls have to get assigned to bin Bi. Now maybe more than log and balls that get assigned to Bi but we know that there's at least LogN balls that are assigned to Bi. So we're going to get an upper bound on this probability. First, we have to choose the particular set of LogN balls that are going to be assigned to Bin Bi. How many ways are there of choosing the LogN balls? There's N choose LogN. Now, for this particular set of LogN balls, what's the chance that they are all assigned to Bin Bi? Well, that's what we found before, that's one over N raised to the power LogN. Now what happens for the other N minus LogN balls? Well, some of them might get assigned to this Bin Bi as well, in which case we may be counting these events multiple times. So we're getting an upper bound on this probability. Notice, that if we had an extra term here which is one minus one over N raised to the power N minus LogN, this is saying that all of the other balls besides these LogN balls that we chose are assigned to other bins. So what is the probability that a particular ball is not assigned to Bin Bi? That's one minus one over N, N minus LogN balls that are not assigned to Bin Bi. Then what is this bound? This is actually equal to the probability that this Bin Bi gets load exactly LogN. But that's not what we want to bound. We want to bound the probability that the Bin gets at least LogN. So we want to get an upper bound. We ignore where the other balls, the other N minus is LogN balls are assigned. And then we get an upper bound on the probability because we allow these balls, these N minus Log N balls to be assigned to any Bin. Maybe Bi or maybe a different Bin. Now let's try to get a handle on this term, N choose LogN. Let's look at it more generally, N choose K. Recall what is N choose K. It's N factorial over and minus K factorial times K factorial. If we expand this out we got N factorial on the numerator, but all the terms from N minus K downwards cancel out with this N minus K factorial in the denominator. So we get N times N minus one, down to N minus K plus one. The remaining terms again cancel with this N minus K factorial on the denominator and then also in the denominator what are we left with? We're left with K factorial which is K times K minus one times K minus two, and so on down to one. Let's try to get a handle on this quantity. Notice the first term is N over K, the second term is similar, is N minus one over K minus one. If N is big, that's pretty similar to N over K, and so on. So we have N over K, N minus one over K minus one, and so on down to N minus K plus one over one. So there's K quantities, K ratios there. So here are the K ratios. Each one let's say is approximately N over K. So this is approximately N over K raised to the power K. Actually, this approximation is not too bad of a bound on this quantity. What one can show using Stirling's formula, is that N choose K is the most, N times E over K all raised to the power K. So if we put an extra factor of E in the numerator, then we get a rigorous upper bound on N choose K. And that's what we're aiming for. We're aiming for an upper bound on the Load size of Bin Bi. So we can upper bound N choose LogN by using this formula. So plugging in this bound for our case, we have K equals LogN in our scenario. So we get the upper bound N times E over LogN raised to the power of Log N, that's for the N choose LogN, and then we still have this term one over N to LogN, one over N to LogN. Now these are both raised to the power of LogN, so we can cancel out this N with this N. So what are we left with? We're left with E over LogN, E over LogN raised to the power of LogN. Now notice the denominator is growing with N, whereas the numerator is a fixed constant. So as N grows this becomes smaller and smaller. We're going to look at this asymptotically as a function of N so we can bound this inner term by any fixed cost and we want. So let's bound it by the constant one quarter. So, we're going to say E over LogN is in most one fourth, and so we get this whole quantity is bounded by one fourth to the LogN. Now what is the bound that we used here on N? We use the fact that LogN is bigger than four times E. When is that true? That's true when N is big enough. In particular, if N is bigger than two to the 11 then LogN is bigger than four times E, so we can replace E over LogN by one fourth. Now what is the nice thing about using one fourth here? Well, assuming that the log was base two, then this quantity one fourth raised to the LogN is equal to one over N square. So in summary, we've shown that the probability that Bin Bi gets load at least LogN is at most to one over N square which is tiny as N grows.