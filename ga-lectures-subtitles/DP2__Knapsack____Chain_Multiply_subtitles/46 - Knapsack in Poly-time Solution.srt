1
00:00:00,000 --> 00:00:02,220
 Now, the answer is No.

2
00:00:02,220 --> 00:00:06,375
 This running time is not polynomial in the input size.

3
00:00:06,375 --> 00:00:08,550
 Why not? All right. This is a polynomial.

4
00:00:08,550 --> 00:00:11,450
 I mean this is the polynomial in n capital B,

5
00:00:11,450 --> 00:00:15,670
 but it's not a polynomial in the input size. Why not?

6
00:00:15,670 --> 00:00:19,130
 The problem is this factor, capital B,

7
00:00:19,130 --> 00:00:21,105
 if we wanna represent this number,

8
00:00:21,105 --> 00:00:23,455
 capital B, it's just a number, right?

9
00:00:23,455 --> 00:00:26,205
 How much space does it take to represent this number?

10
00:00:26,205 --> 00:00:28,340
 The space required is the number of bits.

11
00:00:28,340 --> 00:00:30,270
 What's the number of bits in capital B?

12
00:00:30,270 --> 00:00:32,645
 It's log of capital B.

13
00:00:32,645 --> 00:00:36,210
 So, the input to this problem is this number, capital B,

14
00:00:36,210 --> 00:00:37,920
 and to represent his number,

15
00:00:37,920 --> 00:00:42,085
 capital B is o to log B space.

16
00:00:42,085 --> 00:00:44,890
 And so, the input size is o to log B.

17
00:00:44,890 --> 00:00:51,210
 Now, of course, we also have n different numbers for the weights and the values.

18
00:00:51,210 --> 00:00:55,010
 And those are gonna each take o to one bits for each of those numbers,

19
00:00:55,010 --> 00:01:01,275
 and there's the o to n of those numbers for the two end weights and values.

20
00:01:01,275 --> 00:01:06,185
 So, the input size is n and log B size.

21
00:01:06,185 --> 00:01:11,400
 So, our goal is a running time which is polynomial in n and log B,

22
00:01:11,400 --> 00:01:14,925
 whereas this is exponential in the input size.

23
00:01:14,925 --> 00:01:17,886
 So, our running time is exponential in input size.

24
00:01:17,886 --> 00:01:19,165
 Now, this is not surprising.

25
00:01:19,165 --> 00:01:23,290
 Why not? What we're going to see is that knapsack is NP-complete.

26
00:01:23,290 --> 00:01:24,850
 What does that mean?

27
00:01:24,850 --> 00:01:28,680
 It might be that there is a polynomial time algorithm for this problem,

28
00:01:28,680 --> 00:01:31,830
 but the fact is NP-complete means that,

29
00:01:31,830 --> 00:01:36,330
 if we design a polynomial time algorithm for this problem,

30
00:01:36,330 --> 00:01:41,990
 this Np-complete problem, then every problem in NP will have a polynomial time algorithm.

31
00:01:41,990 --> 00:01:45,440
 So, it's unlikely that we're going to design a polynomial time algorithm for

32
00:01:45,440 --> 00:01:47,520
 knapsack because that would imply

33
00:01:47,520 --> 00:01:50,850
 polynomial time algorithm for a wealth of other problems.

34
00:01:50,850 --> 00:01:53,610
 And many of them people have tried for many years,

35
00:01:53,610 --> 00:01:55,860
 so it's unlikely that we're gonna design it right now

36
00:01:55,860 --> 00:01:58,300
 with the simple dynamic programming algorithm.

37
00:01:58,300 --> 00:02:02,310
 When we see this proof for this NP-completeness of the knapsack problem,

38
00:02:02,310 --> 00:02:07,635
 it will be quite illuminating and you'll see why this algorithm is not efficient.

39
00:02:07,635 --> 00:02:12,325
 Because what we'll do is we'll take a graph problem with n vertices,

40
00:02:12,325 --> 00:02:14,145
 this will be a hard graph problem,

41
00:02:14,145 --> 00:02:17,340
 and then we'll convert that into a knapsack problem.

42
00:02:17,340 --> 00:02:21,330
 So, we reduce it to knapsack and we'll make a knapsack instance where

43
00:02:21,330 --> 00:02:26,910
 this parameter capital B will be exponential in the graph size.

44
00:02:26,910 --> 00:02:28,425
 So, this running time,

45
00:02:28,425 --> 00:02:32,080
 where it will depends on capital B is polynomial,

46
00:02:32,080 --> 00:02:37,195
 and capital B will give exponential running time for that original graph problem.

47
00:02:37,195 --> 00:02:42,990
 And that will help it illustrate why this running time is exponential in the input size,

48
00:02:42,990 --> 00:02:42,990
 whereas this is polynomial in the input size.

