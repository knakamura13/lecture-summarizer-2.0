1
00:00:00,000 --> 00:00:03,640
 Part of the appeal of FFT is that the algorithm is quite concise.

2
00:00:03,640 --> 00:00:05,220
 The algorithm is very simple.

3
00:00:05,220 --> 00:00:08,275
 So let's re-express FFT in a more compact manner.

4
00:00:08,275 --> 00:00:10,910
 First off we have the base case, n equals one.

5
00:00:10,910 --> 00:00:13,195
 This is a polynomial of degree zero.

6
00:00:13,195 --> 00:00:16,485
 So in this case we simply return the constant term a naught.

7
00:00:16,485 --> 00:00:18,840
 Once again we define a even, the vector,

8
00:00:18,840 --> 00:00:21,185
 as the even terms in the vector a,

9
00:00:21,185 --> 00:00:24,360
 and a odd as the odd terms in the vector a.

10
00:00:24,360 --> 00:00:30,290
 Then we recursively run the FFT algorithm with the vector a even and omega square.

11
00:00:30,290 --> 00:00:36,390
 The output we get back we record as s naught through sn over two minus one.

12
00:00:36,390 --> 00:00:38,820
 Similarly we will run FFT with

13
00:00:38,820 --> 00:00:41,160
 a odd and omega square and we record

14
00:00:41,160 --> 00:00:44,325
 the output in t naught through t n over two minus one,

15
00:00:44,325 --> 00:00:46,200
 then we combine the solutions for

16
00:00:46,200 --> 00:00:49,390
 these subproblems to get the solution to the original problem.

17
00:00:49,390 --> 00:00:56,719
 So rj, which is going to be a of x at the point omega to the j equals s sub j,

18
00:00:56,719 --> 00:01:05,065
 which is a even at the point omegas to the two J plus omega to the J times tj.

19
00:01:05,065 --> 00:01:13,450
 And similarly r sub n over two plus j two equals s sub j minus omega to the j times tj.

20
00:01:13,450 --> 00:01:13,450
 Finally we return these n numbers r naught through rn minus one.

