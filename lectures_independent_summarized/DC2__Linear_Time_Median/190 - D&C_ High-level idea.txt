Aiming for O(n) run time using divide and conquer, we consider recurrences for an O(n) solution. The recurrence T(n) = T(n/2) + O(n) solves to O(n), implying an algorithm where the pivot P is the median of the list, giving subproblems each at most n/2 size. This satisfies the recurrence, but finding the median is the original problem. A pivot that is an approximate median will still work, within the n/4 to 3n/4 smallest elements in the list. Worst-case, subproblems reach 3n/4 size, but the recurrence T(n) = T(3n/4) + O(n) still solves to O(n). Even if the pivot is merely guaranteed between the n/100th to 99n/100th smallest, the subproblem at .99n size still leads to O(n). The key is using a constant fraction less than one. Thus, a "good pivot" is within n/4 to 3n/4 smallest elements, creating a recurrence mimicking the latter but allowing some slack; a good pivot must satisfy the constant fraction condition for the algorithm to meet the runtime goal of O(n).