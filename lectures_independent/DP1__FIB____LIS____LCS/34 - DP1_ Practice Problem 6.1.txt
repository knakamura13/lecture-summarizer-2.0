The input to this problem is a_1 through a_n. Our goal is to find the contiguous sub-sequence. Noticed, that a contiguous subsequence is the same as a substring, and we want to find the substring with maximum sum. Now, the first step is to define the subproblem in words. I'm going to try the same problem on a prefix of the input. So, we have a parameter i, which is the length of the prefix. So, we have an i, and this is going to vary between zero and n. And now, I'm going to find s of i, in words, first off. It's going to be the max sum that I can obtain. The same format as the original problem. But, instead of considering the whole input, and I'm going to consider the first i numbers. So, it's a max sum from a substring of a_1 through a_i. So it's the first i characters of the input. Now, we want to try to find a recurrence relation, we want to express s of i in terms of s_1 through s_i minus one, smallest subproblems. Let's take s of i minus one, is the max sum that we can obtain from a substring of a_1 through a_i minus one. So, let's take that sum. Now, there's two possibilities that I would consider. Either, or add on, a_i on to the end of it or not. First off, can I add on a_i on to the end of this solution? Well, I have to maintain that it's a substring, that is contiguous. I don't know where this one ends, so, I don't know whether I can add on a_i unto the end of this solution. So, I need to know where this one ends. With this current definition, there's no way, I don't know how to express s of i in terms of the smaller subproblems. But I notice, that if I knew where this solution ended at, so, if it included a of i minus one, then, I know that if it includes a_i minus one then I can add on a_i and maintain that it's a substring. So, I have to go back and strengthen my subproblem definition.