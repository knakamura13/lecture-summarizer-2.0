1
00:00:00,000 --> 00:00:04,120
 Now, let's detail the pseudo code for a linear time median algorithm.

2
00:00:04,120 --> 00:00:08,288
 The input to the algorithm is unsorted array A, of size n,

3
00:00:08,288 --> 00:00:13,140
 and an integer k. Where the integer k lies between one and

4
00:00:13,140 --> 00:00:18,655
 little n. And the output of the algorithm is the k-th smallest element of the array A.

5
00:00:18,655 --> 00:00:21,089
 The first thing we need to do is find a good pivot.

6
00:00:21,089 --> 00:00:26,295
 To do that we break A into n over five groups of five elements each.

7
00:00:26,295 --> 00:00:27,420
 Now to be precise,

8
00:00:27,420 --> 00:00:30,030
 we should say the ceiling of n over five groups,

9
00:00:30,030 --> 00:00:33,590
 because little n might not be a multiple of five.

10
00:00:33,590 --> 00:00:36,799
 But let's ignore floors and ceilings in this pseudo code.

11
00:00:36,799 --> 00:00:39,945
 Let's denote these n over five groups as G_1,

12
00:00:39,945 --> 00:00:42,799
 G_2 up to G_n over five.

13
00:00:42,799 --> 00:00:46,549
 Now, how exactly do we break a into these n over five groups.

14
00:00:46,549 --> 00:00:49,255
 Well, we can do it in any arbitrary way we like.

15
00:00:49,255 --> 00:00:50,640
 The easiest way to do it,

16
00:00:50,640 --> 00:00:55,079
 is to take the first five elements of A and put those into group one,

17
00:00:55,079 --> 00:01:00,030
 take the next five elements of A and put those in group G_2 and so on.

18
00:01:00,030 --> 00:01:03,625
 Now we have chosen one representative from each of these groups.

19
00:01:03,625 --> 00:01:06,674
 Here's a for loop to go over the n over five groups.

20
00:01:06,674 --> 00:01:08,031
 For the ith group,

21
00:01:08,031 --> 00:01:10,530
 group G_i, we want to find the median.

22
00:01:10,530 --> 00:01:12,715
 To do that we first sort this group.

23
00:01:12,715 --> 00:01:16,844
 There's only five elements so we can take any algorithm we like to sort it.

24
00:01:16,844 --> 00:01:19,560
 And then we take the median of these five elements.

25
00:01:19,560 --> 00:01:23,694
 And let's let mi denote the median of group G_i.

26
00:01:23,694 --> 00:01:27,680
 Now we want to look at these n over five medians which we found in step two.

27
00:01:27,680 --> 00:01:32,569
 Let's let capital S denote this set of n over five medians.

28
00:01:32,569 --> 00:01:34,844
 Next, we want to find the median of this set

29
00:01:34,844 --> 00:01:38,885
 S. This will be our pivot P. How do we find this pivot P?

30
00:01:38,885 --> 00:01:40,840
 How do we find the median of this set?

31
00:01:40,840 --> 00:01:44,084
 Well, we recursively call this same algorithm Fast select,

32
00:01:44,084 --> 00:01:48,144
 on this subset S. Now S has n over five elements,

33
00:01:48,144 --> 00:01:49,534
 we want to find its median,

34
00:01:49,534 --> 00:01:53,284
 therefore we look for K equal to n over 10.

35
00:01:53,284 --> 00:01:56,010
 The n over 10 smallest element of S,

36
00:01:56,010 --> 00:02:03,030
 is the median of this set S. And we store that in element P. Now we use P as our pivot.

37
00:02:03,030 --> 00:02:06,525
 We partition the original set A into three sets.

38
00:02:06,525 --> 00:02:08,909
 Those elements less than pivot P,

39
00:02:08,909 --> 00:02:10,735
 those equal to the pivot P,

40
00:02:10,735 --> 00:02:15,685
 and those bigger than the pivot P. This requires just one scan over the set A.

41
00:02:15,685 --> 00:02:18,870
 Now we can use the quick select approach from before.

42
00:02:18,870 --> 00:02:21,514
 Based on the sizes of these three sets,

43
00:02:21,514 --> 00:02:26,009
 we either recursively search in small set, the big set,

44
00:02:26,009 --> 00:02:29,250
 or we simply output P. In particular,

45
00:02:29,250 --> 00:02:32,268
 if the size of the small set is at least as large as k,

46
00:02:32,268 --> 00:02:36,020
 then we know that the k-th smallest lies in this small set.

47
00:02:36,020 --> 00:02:41,310
 So, we recursively run this same fast select algorithm on the small set,

48
00:02:41,310 --> 00:02:43,400
 looking for the k-th smallest.

49
00:02:43,400 --> 00:02:45,840
 Now if k is big enough, in particular,

50
00:02:45,840 --> 00:02:48,435
 if k is bigger than the size of a small set,

51
00:02:48,435 --> 00:02:50,115
 plus the equal set,

52
00:02:50,115 --> 00:02:54,043
 then we know the k-th smallest lies in this big set.

53
00:02:54,043 --> 00:03:00,564
 So, we recursively run fast select on the big set with this K scale.

54
00:03:00,564 --> 00:03:04,064
 So, we set k equal to k minus

55
00:03:04,064 --> 00:03:09,360
 the size of a small set and the size of the equal set the part that we discarded.

56
00:03:09,360 --> 00:03:11,895
 Finally, if neither of these two cases held,

57
00:03:11,895 --> 00:03:15,389
 then we know that the k-th smallest lies in the equal set,

58
00:03:15,389 --> 00:03:18,870
 and therefore we simply output P. Now these three cases are

59
00:03:18,870 --> 00:03:22,879
 simply the same as we detailed before for the quick select algorithm.

60
00:03:22,879 --> 00:03:25,194
 This completes the pseudo code for our algorithm.

61
00:03:25,194 --> 00:03:27,419
 Now we can analyze this running time assuming

62
00:03:27,419 --> 00:03:30,254
 that this pivot P that we found is a good pivot.

63
00:03:30,254 --> 00:03:32,250
 And then we'll go back and prove that

64
00:03:32,250 --> 00:03:32,250
 this pivot P is in fact guaranteed to be a good pivot.

