We saw in the last slide how to use the DFS algorithm to find the connected components of an undirected graph. Before we move on to directed graph, let's gleam a little bit more information from the DFS algorithm. In particular, suppose I have a pair of vertices, v and w which are in the same connected component. I want to find a path between this pair of vertices. To do that, we simply have to keep track of the predecessor Vertex when we first visit a vertex. Here's the DFS algorithm once again for finding connected components of an undirected graph. We're going to use this previous array as is used in Dijkstra's algorithm to keep track of the predecessor Vertex. We initialize this previous array to null for every vertex. And when we first visit a vertex. So at this point in the algorithm, we should set its previous array to its predecessor Vertex, which is Vertex Z. So, we set previous W to Vertex Z. Now, after running DFS algorithm, given this previous array, we can use this previous array to backtrack. So, for a pair of vertices which are in the same connected component, we can use the previous array to find a path between this pair of connected vertices. That completes our discussion of DFS algorithms for undirected graphs. Let's move on now to directed graphs.