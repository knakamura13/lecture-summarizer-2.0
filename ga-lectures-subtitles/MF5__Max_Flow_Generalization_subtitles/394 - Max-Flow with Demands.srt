1
00:00:00,000 --> 00:00:02,880
 Let's look now at a generalization of max-flow problem.

2
00:00:02,880 --> 00:00:05,805
 We're going to add in demand constraints along every edge.

3
00:00:05,805 --> 00:00:07,950
 We're going to see how to reduce this generalization of

4
00:00:07,950 --> 00:00:11,050
 the max-flow problem to the standard max-flow problem.

5
00:00:11,050 --> 00:00:14,180
 Let's formalize this generalization of the max-flow problem.

6
00:00:14,180 --> 00:00:17,550
 The input starts off the same as before for the max-flow problem.

7
00:00:17,550 --> 00:00:19,035
 So we have a flow network,

8
00:00:19,035 --> 00:00:21,510
 which consists of a director graph, G,

9
00:00:21,510 --> 00:00:24,120
 with a specified start and end vertex,

10
00:00:24,120 --> 00:00:28,050
 s and t, along with the capacities for every edge.

11
00:00:28,050 --> 00:00:31,315
 Now the new aspect is that we're also given the demands for every edge.

12
00:00:31,315 --> 00:00:34,400
 So for edge e, were giving the non-negative number,

13
00:00:34,400 --> 00:00:37,850
 d of e, which specifies the demand for this edge.

14
00:00:37,850 --> 00:00:40,295
 Now our goal is to find a feasible flow.

15
00:00:40,295 --> 00:00:42,560
 What exactly do we mean by feasible flow?

16
00:00:42,560 --> 00:00:45,575
 A feasible flow is a valid flow as before.

17
00:00:45,575 --> 00:00:47,085
 So along every edge,

18
00:00:47,085 --> 00:00:49,485
 the flow is in most capacity,

19
00:00:49,485 --> 00:00:51,555
 but then we have the additional constraint,

20
00:00:51,555 --> 00:00:55,130
 that the flow must be at least the demand along that edge.

21
00:00:55,130 --> 00:00:57,805
 And of course, the other constraint still hold as before.

22
00:00:57,805 --> 00:00:59,655
 So for every internal vertex,

23
00:00:59,655 --> 00:01:01,740
 so for every vertex except for s and t,

24
00:01:01,740 --> 00:01:04,140
 we want to flow in to equal the flow out.

25
00:01:04,140 --> 00:01:07,875
 So we're looking for a valid flow as before with the additional constraint

26
00:01:07,875 --> 00:01:12,060
 that the flow along every edge is at least the demand along that edge.

27
00:01:12,060 --> 00:01:13,545
 Now if we can find a feasible flow,

28
00:01:13,545 --> 00:01:16,585
 of course we want a feasible flow of maximum size.

29
00:01:16,585 --> 00:01:20,685
 But the first problem is whether we can even find a feasible flow.

30
00:01:20,685 --> 00:01:23,096
 Is there a way to satisfy all of the demands?

31
00:01:23,096 --> 00:01:25,370
 That's the first question we're going to address.

32
00:01:25,370 --> 00:01:29,400
 Can we figure out whether there is a feasible flow for this input?

33
00:01:29,400 --> 00:01:31,500
 Once we find a feasible flow,

34
00:01:31,500 --> 00:01:31,500
 then will be straightforward to augment it into a maximum size feasible flow.

