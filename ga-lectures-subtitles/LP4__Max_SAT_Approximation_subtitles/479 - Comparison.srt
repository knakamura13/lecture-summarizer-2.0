1
00:00:00,000 --> 00:00:02,750
 Now, we've seen two algorithms from Max-SAT.

2
00:00:02,750 --> 00:00:07,260
 Now, what if we look at Max-SAT on exact K-SAT formulas?

3
00:00:07,260 --> 00:00:09,780
 So these are formulas were all clauses have size

4
00:00:09,780 --> 00:00:12,240
 exactly K. And let's look at the performance of

5
00:00:12,240 --> 00:00:14,430
 these two algorithms we've seen so far as

6
00:00:14,430 --> 00:00:17,399
 a function of K. So we have the simple algorithm,

7
00:00:17,399 --> 00:00:19,340
 that's a simple randomized assignment.

8
00:00:19,340 --> 00:00:21,968
 So each variable is set to true with probably a half,

9
00:00:21,968 --> 00:00:23,955
 and false with probably a half.

10
00:00:23,955 --> 00:00:25,845
 And we have this LP based scheme.

11
00:00:25,845 --> 00:00:29,260
 So we write Max-SAT is an integer in linear program,

12
00:00:29,260 --> 00:00:33,190
 we relax it to a linear programming, and then we round it.

13
00:00:33,190 --> 00:00:36,235
 How do these two schemes compare for different values of K?

14
00:00:36,235 --> 00:00:40,925
 Let's take a look. Let's look at the performance of these two algorithms for K=1.

15
00:00:40,925 --> 00:00:42,000
 So it's all uni clauses,

16
00:00:42,000 --> 00:00:45,600
 so it's quite trivial, K=2 and K=3,

17
00:00:45,600 --> 00:00:48,480
 and in general K. If you recall the simple algorithm,

18
00:00:48,480 --> 00:00:51,270
 the probability of clauses not satisfied is 2 to the

19
00:00:51,270 --> 00:00:54,940
 -K. So the probability this satisfied is 1-2-K.

20
00:00:54,940 --> 00:00:59,833
 So in general for k, it achieves of 1-2-K approximation factor,

21
00:00:59,833 --> 00:01:01,980
 plugging in K=1, and get one-half.

22
00:01:01,980 --> 00:01:04,200
 K=2, we get three-quarters,

23
00:01:04,200 --> 00:01:06,915
 K=3, we get 7 A's.

24
00:01:06,915 --> 00:01:10,600
 Now the LP, the general form, was quite complicated.

25
00:01:10,600 --> 00:01:14,440
 We proved for general k that it achieves one minus the quantity,

26
00:01:14,440 --> 00:01:16,620
 one minus one over k to the kth.

27
00:01:16,620 --> 00:01:21,360
 Plugging in K=1, we get 1, which is quite good.

28
00:01:21,360 --> 00:01:24,565
 Simple scheme was quite bad for K=1,

29
00:01:24,565 --> 00:01:26,860
 but the LP based scheme is quite good.

30
00:01:26,860 --> 00:01:28,950
 Now K=2, they match, both three-quarters.

31
00:01:28,950 --> 00:01:33,510
 For K=3, we got one minus two-thirds cubed.

32
00:01:33,510 --> 00:01:37,260
 If you plug that into a calculator, that's roughly 0.704.

33
00:01:37,260 --> 00:01:39,050
 So for K, at least three,

34
00:01:39,050 --> 00:01:41,540
 the simple scheme beats the LP scheme.

35
00:01:41,540 --> 00:01:43,160
 But for small clauses,

36
00:01:43,160 --> 00:01:47,010
 the LP scheme is at least as good or even better.

37
00:01:47,010 --> 00:01:49,665
 The key observation is that if you look at each row,

38
00:01:49,665 --> 00:01:51,350
 the max in each row,

39
00:01:51,350 --> 00:01:55,770
 the best of these two schemes for every K is at least three-quarters.

40
00:01:55,770 --> 00:01:58,200
 So, can we combine these two schemes to achieve

41
00:01:58,200 --> 00:01:58,200
 a three-quarters approximation? Yes we can.

