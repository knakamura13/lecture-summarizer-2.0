A search problem is a problem in the following form. First time given an instance I. What is I? I is the input to the problem. For example, it might be a draft if I'm doing a graph problem, or I might be a formula, if I'm doing a problem such as satisfiability. Now, if I has a solution for this problem, then I want to find such a solution. I can output any solution S which is a solution for I. But if I has no solutions, then I simply output NO. So, if this input has a solution, then I output any such solution. If it has no solutions, I output NO. Now, this is the basic form of a search problem, but I have a further requirement in order to be a search problem. Now, let me rephrase this requirement. So, for a particular problem to be a search problem, it first has to be of this form. So, if it's a yes instance so there is a solution to this input, then we have to output some such solution. And if there are no solutions then we simply output NO. Furthermore, we have the following requirement, for an input that has a solution. If I give you a solution, it doesn't have to be the one that's generated by some particular algorithm. I give you any solution that we need to be able to verify in polynomial time, that S, this proposed solution is in fact a solution to this instance. So, we just have to be able to check the proof. So if I give you a proof, then I can check that proof line by line that it is a proof to this input, to this theorem. Now if this input is a NO instance, so there are no solutions, I don't have to do anything in that case. Simply on yes instances, then I have to be able to verify solutions. But I only have to verify solutions when I'm given the solution. So I don't have to generate the solutions at all. Simply, I have to be if I'm given the solution, then I can verify that, that is a solution to the input. And it's important to stress that, what we mean by efficiently verify, we mean in time polynomial in the input size. Now, how would I show that a particular problem is a search problem? Well, I will show you an algorithm which can verify solutions in polynomial time. So I would show you an algorithm which would take as input an instance I, which is an input to the original search problem and a proposed solution to that input. Now given I and S, now what should my algorithm do? Well my algorithm is going to verify that S is in fact a solution to the I, and it's going to do so in time polynomial in the size of I. Typically, it's very easy to show such an algorithm. So let's take a look at a few example problems that we've seen so far in this course and will verify that they are in fact search problems and therefore they are