There's going to be two types of edges. The first type were called clause edges because these are defined by the clauses. The second type are variable edges. Let's begin with the clause edges. Let's consider a clause of size three. So here the clause which is x_1 or x_3 bar or x_2. In our graph, we're going to have three vertices corresponding to the three literals. So this first vertex corresponds to x_1. This second vertex corresponds x_3 bar. And the third vertex corresponds to x_2. Now, some of these literals might appear in other clauses. For example if there is another clause containing x_2, we'll have another vertex corresponding to x_2. So there are multiple vertices corresponding to the same literal. Now, how do we encode this clause? Well, we simply add a triangle. We add edges between all pairs of these three vertices. In other words, we add the complete graph on these three vertices. What if we had a clause of size 2? For example, x_4 bar or x_5, then we add two vertices corresponding to these two literals, and we add an edge between them. Finally, if we have a clause of size one, for example x_1 bar, then we adjust at a singleton vertex by itself. This construction to keep property is in an independent set S in this graph is going to have at most one vertex per clause. If you look at these three vertices, we can only include one of them because there's edges between all pairs. Now recolor goal was to find an independent set of size at least m. Since every independent set has at most one vertex per clause. In order to achieve our goal of an independent set of size at least m, this solution has to have exactly one vertex per clause. Now, this one vertex per clause will correspond to this satisfied literal in that clause. Now there may be other satisfied literals in the clause due to other copies of that literal in other clauses, but this property that we have exactly one vertex per clause will ensure that we have at least one satisfied literal in every clause. And therefore, this solution, this independent set will be able to relate it to a satisfying assignment for this original formula. Now, what happens if I take an independent set containing this vertex corresponding to x_1, and this vertex corresponding to x_1 bar? Well, if this is the graph, this is in fact an independent set in this graph. And it can take one of these two vertices, and then I have an independent set of my goal size of three. Now, a natural way of converting this independent set into an assignment for the original formula is to satisfy each of the corresponding literals. So to satisfy this literal, I set x_1 to be true. For this literal, I set x_5 to be true. For this literal, I want to set x_1 bar to be satisfied, which means I set x_1 to be false. Now I have a contradiction, this is not a valid assignment because I'm setting x_1 to be true, and I'm setting x_1 to be false. So I want to ensure that my independent sets correspond to valid assignments. I never try to set a variable to true and to false.