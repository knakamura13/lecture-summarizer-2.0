Now, there are two natural variants of this problem, and both have different dynamic programming solutions. So it'd be useful to look at both. In the first version, there's one copy of each object. So we're trying to find a subset without repetition. In the second version, there's unlimited supply of each object. So we can use an object as many times as we'd like. In this version, the subset S has repetition possibly. So the subset S is actually a multiset. To summarize, in the two versions of the problem, there is either unlimited supply of each object, so we can use it as many times as we'd like, or there's at most one copy of each object that we can use. We're going to start up by looking at version 1. So we have at most one copy of each object that we can use, and then we'll go back, and we'll look at the second version of the problem where we have unlimited supply of each object. So let's dive in and look at the first version and try to design an algorithm [inaudible].