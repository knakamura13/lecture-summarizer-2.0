Finally, let's take a look at the running time of our algorithm. The two base cases are each order one per step and then they are in order n sized for loop. Therefore, they take order n total time. Then we have a for loop of size order n and a nested for loop of a size order n and inside it takes order one time. So the total time is order n square with these nested for loops and the total run time of our algorithm is dominated by the order n square, so we get order n square total time. This completes the dynamic programming algorithm for the longest common subsequence problem. The interesting thing that arose in this solution was that we needed to use a two dimensional table. This came about because we needed to consider prefixes of x of different length than prefixes of y.