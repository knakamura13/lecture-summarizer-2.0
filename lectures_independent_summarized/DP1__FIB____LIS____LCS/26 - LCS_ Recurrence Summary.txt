Recurrence for non-empty strings I, J where I, J ≥ 1. Case analysis: X_I ≠ Y_J (characters differ), select the larger length from dropping last char from X or Y. If X_I = Y_J (chars match), add 1 and take optimal solution for (I-1, J-1). Base cases, when one string is empty yields length 0. Dynamic programming builds 2D table L row-wise for optimal solution lengths. Cells depend on three computed neighbors: diagonal (L_I−1_J−1), above (L_I_J−1), or left (L_I−1_J). Pseudocode adheres to populating 2D array L using these dependencies to build solutions incrementally.