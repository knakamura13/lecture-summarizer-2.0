1
00:00:00,000 --> 00:00:03,295
 You just proved that the subset sum problem is NP-complete.

2
00:00:03,295 --> 00:00:07,090
 Now a nice homework problem is to use that fact that subset sum problem is

3
00:00:07,090 --> 00:00:11,465
 NP-complete and then prove that the knapsack problem is NP-complete.

4
00:00:11,465 --> 00:00:14,990
 And make sure that you use the correct version of the knapsack problem.

5
00:00:14,990 --> 00:00:17,445
 The version that which lies in the class NP.

6
00:00:17,445 --> 00:00:21,565
 Now to prove that the knapsack problem or any problem is NP-complete,

7
00:00:21,565 --> 00:00:26,973
 there's two parts: You first have to prove that the desired problem lies in the class NP,

8
00:00:26,973 --> 00:00:30,540
 and second you have to take a known NP-complete problem and you have to

9
00:00:30,540 --> 00:00:34,385
 reduce the known NP-complete problem to this new problem,

10
00:00:34,385 --> 00:00:36,135
 in this case knapsack problem.

11
00:00:36,135 --> 00:00:40,980
 We know that all problems in NP reduce to this known NP-complete problem,

12
00:00:40,980 --> 00:00:42,480
 therefore if we show a reduction from

13
00:00:42,480 --> 00:00:45,118
 this known NP-complete problem to the knapsack problem,

14
00:00:45,118 --> 00:00:48,735
 then we know that all problems in NP reduced to the knapsack problem.

15
00:00:48,735 --> 00:00:51,320
 Which problem are you going to use for this part?

16
00:00:51,320 --> 00:00:52,685
 Well I'm not trying to trick you,

17
00:00:52,685 --> 00:00:54,720
 so what are you going to use is the problem that looks

18
00:00:54,720 --> 00:00:56,760
 most similar to the knapsack problem,

19
00:00:56,760 --> 00:00:59,467
 in this case is subset sum problem.

20
00:00:59,467 --> 00:01:00,655
 On the homework or exam,

21
00:01:00,655 --> 00:01:04,140
 if you have a graph problem which you're trying to prove is NP-complete,

22
00:01:04,140 --> 00:01:05,565
 what are you going to use here?

23
00:01:05,565 --> 00:01:10,420
 Probably a graph problem which sounds similar or looks similar to the desired problem.

24
00:01:10,420 --> 00:01:12,555
 If you have a logic problem you're trying to prove is

25
00:01:12,555 --> 00:01:16,465
 NP-complete and probably you're going to use set or three set over here.

26
00:01:16,465 --> 00:01:18,450
 The other thing to make sure of is that you're

27
00:01:18,450 --> 00:01:21,480
 doing the reduction in the correct direction.

28
00:01:21,480 --> 00:01:24,240
 So you're assuming you have a polynomial time algorithm for

29
00:01:24,240 --> 00:01:28,890
 this problem and you are using that to solve this problem in polynomial time.

30
00:01:28,890 --> 00:01:33,126
 So you have taken input to this known NP-complete problem and reduce it,

31
00:01:33,126 --> 00:01:35,870
 transform it into an input for this problem.

32
00:01:35,870 --> 00:01:39,330
 Then if we take a solution to this problem then you

33
00:01:39,330 --> 00:01:43,345
 can transform it back to a solution to this original problem.

34
00:01:43,345 --> 00:01:45,600
 So you have to transform inputs from

35
00:01:45,600 --> 00:01:50,340
 this known NP-complete problem to inputs to this new problem.

36
00:01:50,340 --> 00:01:52,155
 That's a common mistake that students make,

37
00:01:52,155 --> 00:01:54,810
 even though they write the direction this way,

38
00:01:54,810 --> 00:01:56,935
 they actually do the reduction in the other direction.

39
00:01:56,935 --> 00:02:00,870
 They take inputs for this problem and transform it to input to this problem.

40
00:02:00,870 --> 00:02:03,790
 You have to make sure you're doing it the correct direction.

41
00:02:03,790 --> 00:02:05,220
 So you take inputs to

42
00:02:05,220 --> 00:02:05,220
 the known NP-complete problem and transform it to inputs to this new problem.

