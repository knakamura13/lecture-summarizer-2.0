Now, the answer is No. This running time is not polynomial in the input size. Why not? All right. This is a polynomial. I mean this is the polynomial in n capital B, but it's not a polynomial in the input size. Why not? The problem is this factor, capital B, if we wanna represent this number, capital B, it's just a number, right? How much space does it take to represent this number? The space required is the number of bits. What's the number of bits in capital B? It's log of capital B. So, the input to this problem is this number, capital B, and to represent his number, capital B is o to log B space. And so, the input size is o to log B. Now, of course, we also have n different numbers for the weights and the values. And those are gonna each take o to one bits for each of those numbers, and there's the o to n of those numbers for the two end weights and values. So, the input size is n and log B size. So, our goal is a running time which is polynomial in n and log B, whereas this is exponential in the input size. So, our running time is exponential in input size. Now, this is not surprising. Why not? What we're going to see is that knapsack is NP-complete. What does that mean? It might be that there is a polynomial time algorithm for this problem, but the fact is NP-complete means that, if we design a polynomial time algorithm for this problem, this Np-complete problem, then every problem in NP will have a polynomial time algorithm. So, it's unlikely that we're going to design a polynomial time algorithm for knapsack because that would imply polynomial time algorithm for a wealth of other problems. And many of them people have tried for many years, so it's unlikely that we're gonna design it right now with the simple dynamic programming algorithm. When we see this proof for this NP-completeness of the knapsack problem, it will be quite illuminating and you'll see why this algorithm is not efficient. Because what we'll do is we'll take a graph problem with n vertices, this will be a hard graph problem, and then we'll convert that into a knapsack problem. So, we reduce it to knapsack and we'll make a knapsack instance where this parameter capital B will be exponential in the graph size. So, this running time, where it will depends on capital B is polynomial, and capital B will give exponential running time for that original graph problem. And that will help it illustrate why this running time is exponential in the input size, whereas this is polynomial in the input size.