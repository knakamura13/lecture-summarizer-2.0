1
00:00:00,000 --> 00:00:02,069
 Now we're going to use divide and conquer to solve

2
00:00:02,069 --> 00:00:04,674
 this case smallest problem and our algorithm,

3
00:00:04,674 --> 00:00:08,339
 the basic approach is going to be quite reminiscent of the quicksort algorithm.

4
00:00:08,339 --> 00:00:10,410
 Let me remind you about the quicksort algorithm

5
00:00:10,410 --> 00:00:13,574
 and then we'll see the modifications for our approach.

6
00:00:13,574 --> 00:00:16,890
 So we're looking at quicksort for sorting this unsorted list A.

7
00:00:16,890 --> 00:00:19,949
 The first step in the quicksort algorithm is to choose a pivot,

8
00:00:19,949 --> 00:00:24,660
 p. Then we partition the array A into three buckets based on

9
00:00:24,660 --> 00:00:29,910
 their relation to the pivot p. One bucket is for those elements strictly smaller than p,

10
00:00:29,910 --> 00:00:31,425
 those equal to p,

11
00:00:31,425 --> 00:00:34,560
 and those strictly bigger than p. We do one scan through

12
00:00:34,560 --> 00:00:38,865
 the array A and we put each element into one of these three buckets.

13
00:00:38,865 --> 00:00:45,094
 Then we recursively run quicksort on the small elements and the big elements.

14
00:00:45,094 --> 00:00:51,329
 We take that output and our final output is the sorted list of the small elements,

15
00:00:51,329 --> 00:00:53,325
 followed by the equal elements,

16
00:00:53,325 --> 00:00:55,259
 followed by the big elements.

17
00:00:55,259 --> 00:00:58,829
 Now recall the whole challenge in quicksort is how to choose a good pivot.

18
00:00:58,829 --> 00:01:00,240
 If we chose a terrible pivot,

19
00:01:00,240 --> 00:01:03,094
 such as the smallest element or the largest element,

20
00:01:03,094 --> 00:01:06,359
 then one of these two lists is going to be of size n minus1.

21
00:01:06,359 --> 00:01:08,489
 It's just going to go down by one element and

22
00:01:08,489 --> 00:01:11,480
 then the running time of our algorithm is going to be order n square.

23
00:01:11,480 --> 00:01:13,329
 So what's a good pivot for quicksort?

24
00:01:13,329 --> 00:01:16,305
 It's the median, or something close to the median.

25
00:01:16,305 --> 00:01:19,814
 For our problem we're going to have the same challenge. How to choose a good pivot?

26
00:01:19,814 --> 00:01:21,594
 That's going to be the main task.

27
00:01:21,594 --> 00:01:24,474
 But quicksort ideally runs in order n log n time.

28
00:01:24,474 --> 00:01:26,950
 We're aiming for an order n time algorithm.

29
00:01:26,950 --> 00:01:32,060
 The key is that we don't have to recursively consider both a less

30
00:01:32,060 --> 00:01:37,920
 than p and a bigger than p. We only have to recursively search in one of these two lists.

31
00:01:37,920 --> 00:01:37,920
 Let's look at a specific example to see exactly what I mean for this third step.

