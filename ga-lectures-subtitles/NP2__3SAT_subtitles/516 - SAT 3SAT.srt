1
00:00:00,000 --> 00:00:03,810
 Now let's look at the task of reducing SAT to 3SAT.

2
00:00:03,810 --> 00:00:06,320
 Let's outline first what we need to prove.

3
00:00:06,320 --> 00:00:08,130
 Now, we're assuming we have an algorithm a

4
00:00:08,130 --> 00:00:10,695
 polynomial time algorithm for the 3SAT problem,

5
00:00:10,695 --> 00:00:12,900
 and we're going to use this as a black box.

6
00:00:12,900 --> 00:00:15,900
 And we're going to construct an algorithm for the SAT problem,

7
00:00:15,900 --> 00:00:18,905
 using this 3SAT algorithm as a subroutine.

8
00:00:18,905 --> 00:00:22,570
 So what do we need to do? We need to take an input for the SAT problem.

9
00:00:22,570 --> 00:00:26,869
 So we have an f, which is an input formula for the SAT problem,

10
00:00:26,869 --> 00:00:31,710
 then we have to transform this input f into an input for the 3SAT problem.

11
00:00:31,710 --> 00:00:35,710
 We'll use f prime to denote the input to 3SAT problem.

12
00:00:35,710 --> 00:00:37,360
 Now this is a bit tricky to do.

13
00:00:37,360 --> 00:00:40,105
 Why? Because f might have some big clauses.

14
00:00:40,105 --> 00:00:42,811
 It might have some clauses which contain maybe n literals.

15
00:00:42,811 --> 00:00:48,315
 But our input for 3SAT has to have clauses of size and most three.

16
00:00:48,315 --> 00:00:51,520
 So somehow we have to transform these big clauses,

17
00:00:51,520 --> 00:00:54,200
 into a series of small clauses.

18
00:00:54,200 --> 00:00:58,750
 And we need to do it in such a way that if we have a satisfying assignment sigma prime,

19
00:00:58,750 --> 00:01:01,060
 which is a satisfying assignment for f prime,

20
00:01:01,060 --> 00:01:05,380
 our 3SAT formula, then we can transform this satisfying assignment for

21
00:01:05,380 --> 00:01:11,533
 the 3SAT input into a satisfying assignment sigma for the original SAT input.

22
00:01:11,533 --> 00:01:14,470
 Moreover, we want that if our 3SAT formula,

23
00:01:14,470 --> 00:01:16,520
 f prime has no satisfying assignments.

24
00:01:16,520 --> 00:01:18,230
 So there's no Sigma prime.

25
00:01:18,230 --> 00:01:20,445
 So the algorithm is going to output No,

26
00:01:20,445 --> 00:01:25,935
 we want that our original SAT formula f also has no satisfying assignment.

27
00:01:25,935 --> 00:01:28,885
 So you want that f prime has no satisfying assignment,

28
00:01:28,885 --> 00:01:31,861
 if and only if f has no satisfying assignment.

29
00:01:31,861 --> 00:01:36,100
 And that way we can simply output No, in both cases.

30
00:01:36,100 --> 00:01:37,260
 So once again what do we need to do?

31
00:01:37,260 --> 00:01:39,650
 We need to take an input f,

32
00:01:39,650 --> 00:01:41,045
 for the SAT problem,

33
00:01:41,045 --> 00:01:44,440
 and we need to create an input for the 3SAT problem,

34
00:01:44,440 --> 00:01:49,460
 and then given a satisfying assignment sequence prime for the 3SAT input,

35
00:01:49,460 --> 00:01:52,435
 we need to transform it and make a satisfying assignment,

36
00:01:52,435 --> 00:01:54,060
 for the SAT formula.

37
00:01:54,060 --> 00:01:57,755
 And we need that Sigma prime satisfies f prime.

38
00:01:57,755 --> 00:02:02,455
 So this is a satisfying assignment for f prime the 3SAT input, if and only if,

39
00:02:02,455 --> 00:02:05,260
 this transformed output sigma,

40
00:02:05,260 --> 00:02:08,560
 is a satisfying assignment for our original set formula.

41
00:02:08,560 --> 00:02:11,260
 So we have a satisfying assignment for the 3SAT input if

42
00:02:11,260 --> 00:02:14,380
 and only if we have a satisfying assignment for the SAT formula.

43
00:02:14,380 --> 00:02:15,970
 Why do we need this equivalence?

44
00:02:15,970 --> 00:02:19,525
 Because we need that No instances for the 3SAT formula,

45
00:02:19,525 --> 00:02:23,380
 correspond to no instances for the SAT formula.

46
00:02:23,380 --> 00:02:24,685
 So if we get a No output,

47
00:02:24,685 --> 00:02:26,256
 we can output a No,

48
00:02:26,256 --> 00:02:27,845
 for the SAT input.

49
00:02:27,845 --> 00:02:29,735
 Now this is the main test, so let's dive into it.

50
00:02:29,735 --> 00:02:32,230
 We want to take an input f for the SAT problem,

51
00:02:32,230 --> 00:02:32,230
 and transform it into a valid input for the 3SAT problem.

