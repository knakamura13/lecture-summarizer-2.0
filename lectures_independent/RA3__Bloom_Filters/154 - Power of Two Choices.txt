This new best of two approach is a simple twist on the original approach. What are we doing now? Well, instead of choosing a random bin, we choose two random bins, and we assign the ith ball to the least loaded of these two random bins. It turns out that with this scheme, the maximum load is order log log n, with high probability. Recall that the previous approach had max load on the order of roughly log n and we've reduced it from log n to log log n just by, instead of choosing one random bin, we choose two random bins, and we send to the best of the two. This is a substantial gain because log log n is quite small, even for very large n. So this is almost like order one, it's very close, it's a very small quantity. After seeing this result, you might say, "Well, why choose two random bins. " Let's choose three random bins and maybe we'll get log log log n." Well, it turns out that the big gain is from one to two, and after that there's not much gain. In particular, if you choose d, at least two bins, so instead of choosing two random bins you choose d random bins and you assign the ith ball to the least loaded of all of these d bins, then the max load is going to be log log n over log d. So the improvement with d is very small. Now, keep this idea in mind later, this idea of choosing the best of two choices. We're going to use this intuition later to get better hashing schemes and then to drive the intuition behind the Bloom filters. So finally, let's dive into hashing.