What precisely does it mean for a problem to be NP complete? Let's define it now and let's use SAT as our example. So what does it mean for SAT to be NP complete? SAT is NP complete means the following. First off, we need that SAT lies in the class NP. So if we think as a class of problems that lie in NP, then the first requirement is that SAT lies in this class NP. So we have checked that for the SAT problem, we can efficiently verify solutions. And we've seen how to do that before. We saw how to prove that SAT lies in the class NP. Now the second requirement, is that SAT is the hardest problem in this class. What exactly do we mean by that? Well, we're looking at these problems in terms of whether we can efficiently solve them or not. So for SAT to be the hardest in this class, we mean that it's the least likely to have an efficient solution. What's another way of saying that it's the least likely to have an efficient solution? Is that, if we have an efficient solution for SAT, then we have an efficient solution for every other problem in NP. So let us write this down. So if we can solve SAT in polynomial time then we can solve every problem in NP in polynomial time. What does this mean? This means for every problem in NP, for example MST problem, colorings problem, there are other problems such as the TSP Traveling Salesman Problem, there's the independent set problem which we'll see shortly. For all these problems in NP, there is a reduction or transformation to the SAT problem. So we can take an input for the MST problem and we can transform it to an input to the SAT problem. And then if we have an algorithm which efficiently solves SAT, so it solves a SAT problem in polynomial time, then we can use that algorithm to solve MST. How? We take an input for the MST problem, we reduce it to an input for the SAT problem, and then we run our algorithm on the SAT problem and that gives us an output, a solution to the MST problem. And we can reduce all the problems in NP to SAT. Therefore, if we have an algorithm to solve SAT in polynomial time, we get an algorithm for all of the problems in NP. Now the point is that if P is not equal to NP, then we know that there are some problems in NP which cannot be solved in polynomial time. And therefore, we can't solve SAT in polynomial time because if we could solve SAT in polynomial time, then we can solve all of the problems in NP in polynomial time. Since there are some problems in NP that we can't solve in polynomial time under the assumption that P is not equal to NP, then therefore SAT is not in polynomial time. So SAT is not in the class P. So this means that SAT is the computationally most difficult problem in the class NP. So if you believe that P is not equal to NP, then there is no polynomial time algorithm for SAT. Or alternatively, if you believe that nobody knows how to prove that P equals NP, then nobody knows a polynomial time algorithm for SAT. So it's a reasonably fair assumption that as of right now there is no polynomial time algorithm for SAT. Why? Because if somebody had a polynomial time algorithm for SAT, then they could prove that P equals NP. And if they can prove that P equals NP, they could get a fair bit of money from some mathematical prizes, and they get some fame from proving that P equals NP. They get a Fields Medal and so on. Now let's formalize this a bit more. We know how to do this step. We know how to prove that SAT lies in the class NP. But how do we do this step? How do we prove that if there is a polynomial time algorithm for SAT, then there is a polynomial time algorithm for every problem in NP? So what we're going to do now is formalize this notion of a reduction. We want to show a reduction from problems such as MST and colorings to the SAT problem. What exactly do we mean by reducing this colorings problem to the SAT problem?