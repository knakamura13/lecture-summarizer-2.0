Develop pseudocode for the longest increasing subsequence (LIS) dynamic programming algorithm, using previously defined recurrence. Input sequence is a1 to an; use array L to store solutions. Fill L bottom-up, i from 1 to n. Initialize L of i to 1. Nested for loop where j ranges from 1 to i-1, checks if aj < ai and if appending ai to L of j yields a longer subsequence than current. If so, update L of i to this new max. After constructing L, algorithm's output isn't last entry (unlike with Fibonacci sequence), which only gives LIS ending at an. Instead, scan L to find max value, indicating the longest subsequence length, independent of ending position. Maintain max index in loop, and return the value at max index. Algorithm's efficiency depends on running time analysis.