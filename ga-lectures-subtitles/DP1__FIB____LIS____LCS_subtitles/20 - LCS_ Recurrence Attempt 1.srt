1
00:00:00,000 --> 00:00:03,130
 Let's detail the subproblem definition we proposed.

2
00:00:03,130 --> 00:00:06,615
 We have a parameter i which corresponds to the prefix link.

3
00:00:06,615 --> 00:00:11,910
 i is going to vary between zero and n. i equals zero corresponds to the empty string.

4
00:00:11,910 --> 00:00:14,880
 i equals n corresponds to the original input.

5
00:00:14,880 --> 00:00:17,205
 Now, we're going to define a function l of i.

6
00:00:17,205 --> 00:00:20,760
 This will be the length of the longest common subsequence in

7
00:00:20,760 --> 00:00:25,662
 a prefix of X of length i and a prefix of Y of length i.

8
00:00:25,662 --> 00:00:29,385
 So, X_1 through X_i and Y_1 through Y_i.

9
00:00:29,385 --> 00:00:34,590
 Note, this is analogous to the original problem except on a prefix of the input.

10
00:00:34,590 --> 00:00:36,242
 One other notable difference,

11
00:00:36,242 --> 00:00:38,625
 this does not store the subsequence itself.

12
00:00:38,625 --> 00:00:40,300
 It simply stores the length.

13
00:00:40,300 --> 00:00:45,050
 We want our table to store our number or true false.

14
00:00:45,050 --> 00:00:47,680
 Now, let's take a look back at our earlier example.

15
00:00:47,680 --> 00:00:49,585
 Now, this was our earlier example.

16
00:00:49,585 --> 00:00:52,350
 We're trying to find a recursive relation for l of i.

17
00:00:52,350 --> 00:00:56,760
 We're trying to express l of i in terms of smaller subproblems,

18
00:00:56,760 --> 00:00:58,880
 L_1 through L_i minus one.

19
00:00:58,880 --> 00:01:01,005
 Let's try to gain some insight from this example.

20
00:01:01,005 --> 00:01:02,785
 In order to get a smaller subproblem,

21
00:01:02,785 --> 00:01:04,695
 we're going to look at the last character.

22
00:01:04,695 --> 00:01:07,050
 So we're going to look at X_i and Y_i.

23
00:01:07,050 --> 00:01:11,880
 We're going to look at how X_i and Y_i are used in the solution to l of i and then,

24
00:01:11,880 --> 00:01:16,425
 we can use the solution to the subproblem of size i minus one.

25
00:01:16,425 --> 00:01:20,160
 We take the optimal solution for the subproblem of size i minus one and then

26
00:01:20,160 --> 00:01:24,355
 we append on the solution for X_i and Y_i.

27
00:01:24,355 --> 00:01:26,100
 Now, there are two cases to consider,

28
00:01:26,100 --> 00:01:28,402
 either of these last characters are different,

29
00:01:28,402 --> 00:01:30,850
 in this case, or they're the same.

30
00:01:30,850 --> 00:01:33,105
 We're going to consider these two cases separately.

31
00:01:33,105 --> 00:01:37,530
 The first case is when the last characters X_i and Y_i are the same.

32
00:01:37,530 --> 00:01:41,990
 The second case is when the last characters X_i and Y_i are different.

33
00:01:41,990 --> 00:01:43,530
 We're going to do this case first.

34
00:01:43,530 --> 00:01:45,125
 X_i equals Y_i.

35
00:01:45,125 --> 00:01:47,035
 The last characters are the same.

36
00:01:47,035 --> 00:01:48,910
 This turns out to be the easy case.

37
00:01:48,910 --> 00:01:52,140
 Now, let's modify our example so that the last characters are the same.

38
00:01:52,140 --> 00:01:56,100
 So, I append on character C onto the end of both strings.

39
00:01:56,100 --> 00:01:58,530
 Now, in this case, where the last character is the same,

40
00:01:58,530 --> 00:02:01,745
 what do we know about the longest common subsequence?

41
00:02:01,745 --> 00:02:05,680
 Well, we know it must include and must end in this common character.

42
00:02:05,680 --> 00:02:07,290
 Why? Well, it give me

43
00:02:07,290 --> 00:02:11,685
 a common subsequence and suppose it does not include this last character.

44
00:02:11,685 --> 00:02:16,785
 Well, then, I can append on this common character and I get a longer subsequence.

45
00:02:16,785 --> 00:02:22,380
 So, therefore, the longest common subsequence must include this last character.

46
00:02:22,380 --> 00:02:24,900
 So, in this case, where X_i equals Y_i,

47
00:02:24,900 --> 00:02:26,550
 what do we know about l of i?

48
00:02:26,550 --> 00:02:30,145
 We know that the longest common subsequence includes this last character.

49
00:02:30,145 --> 00:02:32,430
 So, we get one in the length for

50
00:02:32,430 --> 00:02:34,500
 that common character and then we can simply

51
00:02:34,500 --> 00:02:36,990
 drop this last character and then we can take

52
00:02:36,990 --> 00:02:39,940
 this input sequence of length i minus one and we can

53
00:02:39,940 --> 00:02:43,110
 take the longest common subsequence in this input sequence of

54
00:02:43,110 --> 00:02:46,440
 length i minus one and append on this common character

55
00:02:46,440 --> 00:02:50,260
 C. What is the length of the longest common subsequence in this input?

56
00:02:50,260 --> 00:02:52,855
 It's simply l of i minus one.

57
00:02:52,855 --> 00:02:54,136
 So, we have a recursive relation.

58
00:02:54,136 --> 00:02:57,630
 We can express l of i in terms of l of i minus one.

59
00:02:57,630 --> 00:03:00,390
 This handles a case when X_i equals Y_i.

60
00:03:00,390 --> 00:03:00,390
 Now, let's take a look at the case when X_i is not equal to Y_i.

