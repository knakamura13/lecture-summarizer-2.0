Drafted pseudocode for the single-use knapsack problem with N objects, valuing input weights (W1-Wn), values (V1-Vn), and a total capacity (B). Base cases set first table row/column to zero (no capacity, or empty subset). Algorithm fills table dynamically, checking if object fits current capacity (b): if Wi < b, calculate max value by including or excluding object i, taking max. If Wi doesn't fit, K(i, b) equals K(i-1, b). Final solution is the bottom right table value, representing max value for total capacity B. Running time: initialization (order B + order N), nested loops for table interior with constant time check (order N * B); total time complexity is order N * B, applicable to single-use object scenario.