1
00:00:00,000 --> 00:00:02,130
 The first n digits correspond to

2
00:00:02,130 --> 00:00:06,455
 the variables so the next m digits correspond to the clauses.

3
00:00:06,455 --> 00:00:10,460
 So digit n plus j is going to correspond to clause Cj.

4
00:00:10,460 --> 00:00:13,890
 If the literal Xi appears in the clause Cj,

5
00:00:13,890 --> 00:00:18,080
 well, Xi, this literal corresponds to this number of Vi.

6
00:00:18,080 --> 00:00:23,000
 So we're going to put a one in digit n plus j for this number Vi.

7
00:00:23,000 --> 00:00:27,090
 Similarly, if the literal Xi bar appears in this clause, well,

8
00:00:27,090 --> 00:00:32,045
 in this case, this literal Xi bar corresponds to this number Vi prime.

9
00:00:32,045 --> 00:00:36,625
 So we put a one in digit n plus j for this number, Vi prime.

10
00:00:36,625 --> 00:00:39,945
 What this does is it encodes the clauses in these numbers,

11
00:00:39,945 --> 00:00:41,965
 Vi and Vi prime.

12
00:00:41,965 --> 00:00:43,735
 Let's go back to our running example.

13
00:00:43,735 --> 00:00:45,990
 Our first clause contains X1 bar,

14
00:00:45,990 --> 00:00:48,175
 X2 bar, and X3 bar.

15
00:00:48,175 --> 00:00:51,390
 This clause corresponds to the fourth digit so we're going to put

16
00:00:51,390 --> 00:00:55,635
 a one in V1 prime and put a one in V2 prime,

17
00:00:55,635 --> 00:00:58,170
 and a one in V3 prime.

18
00:00:58,170 --> 00:00:59,940
 Similarly, for the second clause,

19
00:00:59,940 --> 00:01:02,516
 we put a one in V1 prime for X1 bar,

20
00:01:02,516 --> 00:01:05,625
 V2 prime and V3.

21
00:01:05,625 --> 00:01:08,850
 For clause three, we put a one in V1,

22
00:01:08,850 --> 00:01:11,430
 V2 prime, and V3.

23
00:01:11,430 --> 00:01:13,113
 Clause four, V1 and V2.

24
00:01:13,113 --> 00:01:16,808
 Now for the first clause,

25
00:01:16,808 --> 00:01:19,200
 we want to ensure that either V1 prime, V2 prime,

26
00:01:19,200 --> 00:01:25,515
 or V3 prime are included in the subset in the solution to the a subset-sum problem.

27
00:01:25,515 --> 00:01:28,290
 We just need that at least one of these is included.

28
00:01:28,290 --> 00:01:31,170
 We don't need that exactly one so we can't just put a one

29
00:01:31,170 --> 00:01:34,215
 here in t. We want that either one, two,

30
00:01:34,215 --> 00:01:36,420
 or three of these numbers are included in

31
00:01:36,420 --> 00:01:40,155
 the solution so we put a three in the fourth digit of t,

32
00:01:40,155 --> 00:01:43,200
 fifth digit, sixth digit, and seventh digit.

33
00:01:43,200 --> 00:01:45,760
 Now, if we include all three of these numbers in our solution,

34
00:01:45,760 --> 00:01:49,020
 then we're okay, but what if we only include one of these digits?

35
00:01:49,020 --> 00:01:51,530
 What if only one of these literals is satisfied?

36
00:01:51,530 --> 00:01:54,335
 Well, that's where we use these buffer numbers, S1 and S1 prime.

37
00:01:54,335 --> 00:01:58,830
 We're going to put a one in the fourth digit for these two numbers.

38
00:01:58,830 --> 00:02:02,585
 The point is that if only one of these three literals is satisfied,

39
00:02:02,585 --> 00:02:07,640
 then we get up to some of the three by including both of these buffer numbers.

40
00:02:07,640 --> 00:02:12,855
 So we get a one from one of these three plus one plus one and that gives us three.

41
00:02:12,855 --> 00:02:15,250
 What if all three of these literals are satisfied?

42
00:02:15,250 --> 00:02:18,220
 Then, we don't have to use either of these buffer numbers.

43
00:02:18,220 --> 00:02:21,100
 What if exactly two of these literals are satisfied?

44
00:02:21,100 --> 00:02:24,430
 Then we use one or the other of these buffer numbers.

45
00:02:24,430 --> 00:02:26,820
 But if none of these literals are satisfied,

46
00:02:26,820 --> 00:02:31,170
 then using both of the buffer numbers only gets us up to a sum of two so we

47
00:02:31,170 --> 00:02:35,890
 can't satisfy t. We can't get a solution to the subset-sum problem.

48
00:02:35,890 --> 00:02:37,080
 The only way to get a solution to

49
00:02:37,080 --> 00:02:39,980
 the subset-sum problem is to have at least one of these literals

50
00:02:39,980 --> 00:02:44,730
 satisfied and then we can use the buffer numbers to get the desired sum in this digit.

51
00:02:44,730 --> 00:02:46,860
 So, similarly, for clause two,

52
00:02:46,860 --> 00:02:50,770
 we put a one in this digit for S2 and S2 prime,

53
00:02:50,770 --> 00:02:52,010
 S3 and S3 prime,

54
00:02:52,010 --> 00:02:54,608
 S4 and S4 prime.

55
00:02:54,608 --> 00:02:57,385
 All the other numbers have zeros in these digits.

56
00:02:57,385 --> 00:03:02,490
 This specifies the reduction from the 3SAT formula to the subset-sum problem.

57
00:03:02,490 --> 00:03:05,946
 Note that V1 is the number 1000011.

58
00:03:05,946 --> 00:03:08,340
 V1 prime is the number 1001100.

59
00:03:08,340 --> 00:03:13,860
 S4 and S4 prime are the numbers one,

60
00:03:13,860 --> 00:03:13,860
 t is the number 1113333.

