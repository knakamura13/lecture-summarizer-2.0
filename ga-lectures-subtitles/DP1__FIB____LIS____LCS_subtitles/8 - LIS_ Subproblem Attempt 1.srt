1
00:00:00,000 --> 00:00:04,095
 Now let's look at the recipe for designing a dynamic programming algorithm.

2
00:00:04,095 --> 00:00:07,540
 The first step, is to define the sub-problem in words.

3
00:00:07,540 --> 00:00:09,025
 To see what I mean by this,

4
00:00:09,025 --> 00:00:12,280
 let's look back at the simple example of Fibonacci numbers.

5
00:00:12,280 --> 00:00:17,700
 In that example, our sub-problem definition was F of I is the I Fibonacci number.

6
00:00:17,700 --> 00:00:19,485
 The second step in our recipe,

7
00:00:19,485 --> 00:00:21,540
 is to state a recursive relation.

8
00:00:21,540 --> 00:00:27,240
 We want to express the solution to the I sub-problem in terms of smaller sub-problems.

9
00:00:27,240 --> 00:00:29,790
 So for the instance of Fibonacci numbers,

10
00:00:29,790 --> 00:00:32,760
 we want to express F of I in terms of F one,

11
00:00:32,760 --> 00:00:34,335
 through F I minus one.

12
00:00:34,335 --> 00:00:35,640
 Because if you recall

13
00:00:35,640 --> 00:00:38,965
 our dynamic programming algorithm for computing the Fibonacci numbers,

14
00:00:38,965 --> 00:00:43,250
 we computed F 1 up to F I minus 1,

15
00:00:43,250 --> 00:00:45,235
 so those will be stored in our table,

16
00:00:45,235 --> 00:00:48,880
 and then we can use those to compute F of I.

17
00:00:48,880 --> 00:00:50,640
 Now for the case of the Fibonacci numbers,

18
00:00:50,640 --> 00:00:55,065
 it was straightforward to express F of I in terms of smaller sub-problems.

19
00:00:55,065 --> 00:01:00,780
 Namely F of I is the sum of the previous two Fibonacci numbers.

20
00:01:00,780 --> 00:01:02,580
 Now, let's figure out how to follow

21
00:01:02,580 --> 00:01:06,660
 this recipe for the longest increasing sub-sequence problem.

22
00:01:06,660 --> 00:01:08,940
 Now, let's follow the first step in our recipe.

23
00:01:08,940 --> 00:01:11,505
 We want to define the sub problem in words.

24
00:01:11,505 --> 00:01:13,845
 Our first attempt is always going to be,

25
00:01:13,845 --> 00:01:17,435
 to use the identical problem on a prefix of the input.

26
00:01:17,435 --> 00:01:19,530
 In this case, that means we're going to look at

27
00:01:19,530 --> 00:01:25,785
 the longest increasing sub-sequence on the first I elements of the input array.

28
00:01:25,785 --> 00:01:28,380
 Therefore, we're going to make a new function L,

29
00:01:28,380 --> 00:01:30,060
 which is the length of

30
00:01:30,060 --> 00:01:35,015
 the longest increasing sub-sequence on the first I elements of the input.

31
00:01:35,015 --> 00:01:38,190
 Now, we want to figure out how to express L of I in terms

32
00:01:38,190 --> 00:01:41,475
 of L one through L I minus one smaller subproblems.

33
00:01:41,475 --> 00:01:44,310
 To do this, let's take a look back at our earlier example,

34
00:01:44,310 --> 00:01:44,310
 and see if we can gain some intuition.

