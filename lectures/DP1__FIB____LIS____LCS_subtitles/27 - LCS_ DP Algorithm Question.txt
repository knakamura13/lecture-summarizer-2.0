Now, we can state the pseudo-code for our dynamic programming algorithm for the longest common subsequence problem. The input are these two strings, X and Y. Now, let's start with the base cases which are the top row and the first column, which first set L(i,0) to be zero. This corresponds to setting the first column to zeros. Then, we set the first row to all zeros. These are our two base cases. Now we can fill the interior of our table. As we said earlier, we're going to go row by row. Index i is going to correspond to the current row. Then we go along this row. This is the index j. Now we have two cases to consider, either the current last characters of X and Y are the same or they're different. So, if Xi = Yj, we have one recurrence. And if Xi is not equal to Yj, then we have a different recurrence. In the case where Xi = Yj, the recurrence is 1+, the one comes from the appending Xi and Yj to the end, and then taking the optimal solution for the prefix of length i-1 with length j-1. In the case where they're not equal, the recurrence is the best of the two scenarios. Either we drop the last character from Y, giving us L(i, J-1), or we drop the last character from X, giving us L(i-1, j) and we take the max of these two. Finally, what is the output of our algorithm? It's the entry in the bottom right of our matrix. L(n, n) is the length of the longest common subsequence for all of X with all.