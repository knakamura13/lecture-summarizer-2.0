1
00:00:00,000 --> 00:00:03,060
 Now, we're going to show a reduction from the feasible flow problem,

2
00:00:03,060 --> 00:00:04,620
 to the max-flow problem.

3
00:00:04,620 --> 00:00:08,717
 Recalling the feasible flow problem we're trying to find a feasible flow,

4
00:00:08,717 --> 00:00:10,755
 not necessarily of maximum size.

5
00:00:10,755 --> 00:00:15,390
 In the max-flow problem we're trying to find a valid flow of maximum size.

6
00:00:15,390 --> 00:00:18,840
 Formally, what do we mean that we're reducing this problem to this problem?

7
00:00:18,840 --> 00:00:21,120
 What it means is that we're going to use our algorithms,

8
00:00:21,120 --> 00:00:25,830
 our polynomial time algorithms for the max-flow problem as a black box.

9
00:00:25,830 --> 00:00:28,680
 So, it's as if we have this subroutine that we downloaded from

10
00:00:28,680 --> 00:00:32,155
 the library and we don't want to touch the insides of this subroutine.

11
00:00:32,155 --> 00:00:36,300
 We can simply give it an input flow network and we'll get out a solution.

12
00:00:36,300 --> 00:00:40,920
 A flow, F prime of maximum size for this input flow network.

13
00:00:40,920 --> 00:00:44,055
 Now, we want to use this black box algorithm for max-flow,

14
00:00:44,055 --> 00:00:47,160
 to build an algorithm for the feasible flow problem.

15
00:00:47,160 --> 00:00:50,745
 What we're going to do is, we're going to take an input to the feasible flow problem.

16
00:00:50,745 --> 00:00:53,305
 What exactly is input to a feasible flow problem?

17
00:00:53,305 --> 00:00:57,300
 Well, there's a directed graph G. There are capacities along every edge,

18
00:00:57,300 --> 00:00:59,040
 specified by C of E,

19
00:00:59,040 --> 00:01:02,900
 and there's also demands along every edge specified by D of E. Now,

20
00:01:02,900 --> 00:01:04,725
 we're going to define a function G,

21
00:01:04,725 --> 00:01:08,070
 which transforms this input to the feasible flow problem,

22
00:01:08,070 --> 00:01:11,010
 into a valid input to the max-flow problem.

23
00:01:11,010 --> 00:01:14,235
 Once again what does the input to the max-flow problem look like?

24
00:01:14,235 --> 00:01:16,530
 Well, it consists of a directed graph.

25
00:01:16,530 --> 00:01:20,240
 Not necessarily the same directed graph that we have for the feasible flow problem,

26
00:01:20,240 --> 00:01:21,890
 we're going to make a new graph.

27
00:01:21,890 --> 00:01:24,840
 So, we're going to define a new directed graph G prime,

28
00:01:24,840 --> 00:01:27,720
 based on the directed graph G. And,

29
00:01:27,720 --> 00:01:30,970
 we also need to specify the capacities along every edge.

30
00:01:30,970 --> 00:01:36,375
 So, we'll define C prime of E to be the capacity along edges in this graph G prime.

31
00:01:36,375 --> 00:01:39,315
 But, there are no demands in this graph.

32
00:01:39,315 --> 00:01:43,420
 The input to the standard max-flow problem does not have any demand constraints.

33
00:01:43,420 --> 00:01:46,140
 So, we have to somehow encode these demands in

34
00:01:46,140 --> 00:01:49,195
 these capacities and in this graph G prime.

35
00:01:49,195 --> 00:01:54,180
 Then, we're going to run our black box algorithm for the max-flow problem on this input.

36
00:01:54,180 --> 00:01:56,186
 We're going to get some output F prime,

37
00:01:56,186 --> 00:01:58,515
 and then we have to transform this output

38
00:01:58,515 --> 00:02:02,280
 into a solution to the original feasible flow problem.

39
00:02:02,280 --> 00:02:05,080
 So, we have to define a function, which would then notice H,

40
00:02:05,080 --> 00:02:07,705
 which transforms this output,

41
00:02:07,705 --> 00:02:10,980
 this solution to the max-flow problem on this input graph,

42
00:02:10,980 --> 00:02:13,260
 G prime with capacity C prime.

43
00:02:13,260 --> 00:02:17,715
 And H has to transform F prime into a flow F,

44
00:02:17,715 --> 00:02:21,840
 where F is a feasible flow for this input, G,

45
00:02:21,840 --> 00:02:24,630
 capacity C and domains D. So,

46
00:02:24,630 --> 00:02:27,990
 to reduce feasible flow to max-flow, what we need to do is,

47
00:02:27,990 --> 00:02:31,860
 we need to define this transformation function g. Which

48
00:02:31,860 --> 00:02:36,405
 transforms an input from feasible flow into an input for max-flow.

49
00:02:36,405 --> 00:02:38,415
 And we need to define this function h,

50
00:02:38,415 --> 00:02:44,355
 which transforms the solution f prime for the max-flow problem on this input, G prime.

51
00:02:44,355 --> 00:02:47,045
 And produces a solution f,

52
00:02:47,045 --> 00:02:49,635
 which is a feasible flow for this input network,

53
00:02:49,635 --> 00:02:52,980
 g with capacity C and demands d. So,

54
00:02:52,980 --> 00:02:55,170
 in order to reduce feasible flow to max-flow,

55
00:02:55,170 --> 00:02:58,350
 we need to specify this function transformation function g

56
00:02:58,350 --> 00:02:59,840
 and this transformation function

57
00:02:59,840 --> 00:02:59,840
 h. G transforms the input and h transforms the solutions.

