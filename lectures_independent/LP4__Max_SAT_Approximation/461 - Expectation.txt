Once again capital W denotes a number of satisfied clauses for a random assignment. Each variable is assigned true or false with probability one half. Now, we want to look at a simpler quantity. In particular, we want to look at one clause in isolation. So, consider the J's clause. C sub J, and let's make a new random variable W sub J. Now, we're just talking about one clause, so either that clause is satisfied or not. Therefore, this new random variable is going to take either value 1 or 0. It takes value 1 if the clause CJ is satisfied and it takes value 0 if it's not satisfied. Now, what happens if we sum this quantity over all clauses? So, we look at the sum for J going from 1 to M of W sub J, where we get a 1 for every clause which is satisfied and 0 if it's not satisfied. So, this gives us a total count of the number of satisfied clauses. Therefore, it's equal to capital W. Now recall, our original goal was to analyze the expected of performance of the algorithm. So we want to look at the expectation of capital W, expected number of satisfied clauses. Now, we can plug in this identity, so we can replace capital W by this sum. We have the expectation of the sum over J of W sub J and now recall the new rarety or expectation. So, we can take the sum outside. The expectation of two random variables X and Y. Expectation of X plus Y is the same as expectation of X plus the expectation of Y. So, now we have that the expectation of W equals the sum over J of the expectation of WJ. Now, we can analyze this quantity expectation of WJ. Notice, this just depends on the clause CJ. It doesn't have anything to do with the other clauses. So, now we can focus on this clause in isolation. We don't have to look at any of the other clauses.