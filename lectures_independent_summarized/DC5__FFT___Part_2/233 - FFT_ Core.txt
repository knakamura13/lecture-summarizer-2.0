The FFT (Fast Fourier Transform) algo works by applying a divide and conquer approach. Initiated for N=1, deemed the base case, it directly returns the value of polynomial A at 1. For N>1, A is split into even and odd-indexed terms, forming vectors A_even and A_odd. Each has size N/2, derived from the original vector of size N. These are run through recursive FFT calls with the squared root of unity, yielding values for A_even and A_odd at N/2 roots of unity. A's value at Nth roots of unity is calculated by combining A_even and A_odd results with appropriate multipliers. For every jth point, values are computed with an addition or subtraction operation depending on the point's relationship to Omega^j and Omega^(N/2+j). The process operates efficiently, with time complexity linearly proportional to N. The algo is valid for any Nth root of unity, excluding Omega=1, as opposites are needed for the FFT property to hold.