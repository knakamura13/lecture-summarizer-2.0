Now, let's prove the theorem that the halting problem is undecidable. How can we hope to prove this theorem? We can't expect to come up with an incredibly difficult program for which no algorithm can solve the halting problem on that program. It's more like for every algorithm, there is a program for which the algorithm fails. So the way we go about proving this theorem is by contradiction. Suppose that we had an algorithm that solves the halting problem on every input. Now we're going to derive a contradiction and therefore, our assumption that there exists an algorithm which solves the halting problem is not true. And therefore, there is no algorithm which solves the halting problem. What we're going to do is for this particular algorithm which solves the halting problem, we're going to construct an input for which this algorithm is incorrect. And therefore, our assumption that this algorithm solves the halting problem on every input is incorrect. And we have a contradiction and therefore, that will prove the theorem. Now let's give a name for this algorithm. Now this algorithm is determining whether a particular program on a specific input terminates or not. So let's call this algorithm Terminator. Terminator takes a pair of inputs, P and I. P is a program, I is an input for this program, and Terminator outputs true or false depending on whether this program P, on this particular input I, terminates eventually or not. If it eventually terminates, then an output is true. If it has an infinite loop, then an output is false. And we're assuming that Terminator is correct. It solves the halting problem for every program P, and every input I. Now we're going to construct a program Q and an input J, and we're going to show that when we run Terminator on this input pair Q,J, then its output is incorrect. Since Terminator is incorrect on this pair of inputs, therefore, Terminator does not solve the halting problem on every input. So this will give us our contradiction, and therefore, that would complete the proof by contradiction. Now how can we hope to construct this program Q? Well, one important piece is that we're assuming the existence of this program, Terminator. So we can use this algorithm, Terminator as a subroutine in our new algorithm Q. Now I don't know anything about the inner workings of Terminator so I have to use it as a black box, but I can use this as a subroutine. So we're going to use it as a subroutine to get our paradox or contradiction.