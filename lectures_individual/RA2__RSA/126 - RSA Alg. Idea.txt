Now we can get to the basic idea behind the RSA algorithm. Let's first look at from Fermat's Theorem. It talks about a prime number P. Let's look at a pair of numbers, B and C, which are relatively prime to each other mod p minus one. Why is P minus one? Because remember Euler's totient function or Fermat's Little Theorem, the exponent there is P minus one. Okay? That's where that P minus one comes from. So we're taking a pair of numbers B and C which are inverses to each other modulo P minus one. So what does that mean? That means B times C is one mod P minus one, or in other words B times C is one plus some multiple of P minus one. So K is a sum integer. So that means when we take B times C and we divide it by P minus one then we get a remainder of 1. Let's take a number Z between one and P minus one, and let's raise it to the power B times C, and let's take the whole thing mod P. Now we can replace B times C by this formula. So we get to Z then we get Z to the K times P minus one. We can do the P minus one. We can raise the whole thing to the Kth power. Now what do we get? Well the Z sticks around. What about the Z to the P minus one? What do we know? Fermat's Little theorem tells us that Z to the P minus one is congruent to one mod P. So we can replace this by 1 and then one to the K is what? It's one. So this whole thing is one. So it drops out and we're left with Z. So Z raised to the power B times C is Z mod P. So we get back Z itself. Okay? We're starting to get the idea for the encryption and decryption algorithm. I'm going to take a message Z, and now, if I raise it to the power B to encrypt it and then later I raise it to the power C to decrypt it, that's the same as taking Z to the power B times C and that's going to end up with Z itself. So if I encrypt by raising to power B and then decrypt by raising it to the power C, I end up with the original message itself. Now, the problem is that I have to tell everybody P, so that they can do these operations. If I tell them P then they know P minus one, and therefore, given B then they can figure out C, which is the inverse of B with respect to mod P minus 1. So I want to conceal this fact. I want to conceal this P minus one term. How am I going to do that? Well I'm going to use Euler's theorem instead of Fermat's little theorem. For Euler's theorem, I want to have a pair of primes, P and Q. I'm going to look at their product N. Now, what am I going to do? I'm going to take a pair of numbers, D and E, which are inverses of each other with respect to P minus one times Q minus one. So, D times E is congruent to one mod P minus one, Q minus one. Why did they use P minus one and Q minus one instead of P minus one? Well, in Fermat's little theorem when I raise Z to the P minus one I get one mod P. What happens in Euler's theorem? Well, the totient function of N we saw was P minus one, Q minus one for this case when it's P times Q. So if I take a number Z and I raise it to this P minus one Q minus one, I'm going to get one, when I look at it, mod N. So, that's what I'm going to do. I'm going to take a number Z. I'm going to raise it to the power D times E. What do I get? D times E is congruent to one mod P minus one Q minus one. That means D times E is equal to one plus some multiple of P minus one times Q minus one so I get the one and then I get some multiple of P minus one times Q minus one. Now what is this, Z raised to the power P minus one, Q minus one? I'm looking at this whole thing mod N. Euler's theorem tells me that if Z is relatively prime to N then this thing is one. So then one raised to the power of K, just like before, is one. So this term goes away, I'm left with Z, and there it is. Notice the terms D and E decryption, encryption. So, you give me a message Z. I'm going to tell you E and I'm going to tell you N, what are you going to do? If you want to send me the message Z, you're going to take Z and you're going to raise it to power E and then get mod N, and then you're going to send it to me. That's the encrypted message. What do I do? I compute this D, which is the inverse of E mod P minus one, Q minus one. That's my decryption key. So I take that encrypted message with the Z to the E mod N. I raise it to the power D. And what am I left with? I'm left with Z itself, the original message. Now, the point is you know N, which is P times Q. I know P and Q, but you don't know them. You just know the product of them, you know N. So from N, can you figure out P minus one times Q minus one? I don't know how to do that unless you tell me P and Q. If you just tell me their product P times Q, I don't know how to get P minus one times Q minus out of P times Q. But I know P and Q, so I can take P and Q and compute P minus one times Q minus one, and then I can run extended Euclid algorithm to compute the inverse of E mod P minus one, Q minus one. So I can compute D but nobody else knows how to compute D because they don't know P minus one, Q minus one. They simply know N, P times Q. So, everybody's going to know N, and everybody is going to know E, but I alone know D and that's the decryption key. So I tell everybody E and N, we take the message, raise it to the encrypted power, take it mod N, that's the encrypted message. Send that. The whole world can see that, but only I can decrypt it. So now let's go ahead and detail the RSA algorithm.