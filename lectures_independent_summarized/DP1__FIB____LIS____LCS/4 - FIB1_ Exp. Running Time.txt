Algorithm computes nth Fibonacci number using inefficient recursion by recalculating subproblems multiple times, particularly smaller Fibonacci numbers at deeper recursion levels exponentially. Efficiency improved by starting with smaller subproblems using an array F to store Fibonacci numbers; F(i) represents ith Fibonacci number. Initiates with first two Fibonacci numbers, iteratively computes subsequent numbers using recursive formula. Method transforms algorithm from top-down recursion to bottom-up dynamic programming, systematically building up the solution and avoiding redundant calculations. This dynamic approach ensures calculation of nth Fibonacci number is efficient.