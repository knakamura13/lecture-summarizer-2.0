How can we find whether a graph has a negative way cycle or not? Let's go back and look at our earlier example. Here's our earlier example on six vertices and it has a negative weight Cycle A B C A, which is of length negative one. So, what's going to happen for our algorithm, Bellman Ford algorithm that we just defined on this example? Let's look at the Bellman Ford algorithm on this example. We're going to have a two dimensional table. The columns the columns of the tables are going to be the vertices of the graph. There are six vertices of the graph, S, A, B, C, D, E. The rows of the table are going to correspond to the path lengths we consider. We're going to start with the base case, I equals 0. In the base case we have D of 0S as 0, and the other entries are infinite. Our algorithm can fill up the table from I equals 1, I equals 2, I equals 3, I equals 4, I equals 5. The current algorithm is going to finish at I equals 5, which is N minus 1 in this example. But let's do one more row of the table and see what happens. Now, let's go ahead and fill in the table by hand. In this particular example, the column for S is going to stay 0, since there's no edges into S. Now let's look at the row I equals 1. There's a path using one edge from S to A. That's of length 5. All of the vertices are inaccessible by at most one edge. So their length stays infinite. Now for I equals 2 we update the length to B to be 8. The other vertices stay infinite and A stays 5. For I equals 3 we can update the path length to C, which is it going to be of length 2 using the path from B minus 6. In addition we can update the path length to D. The path to B is A plus 4,12. And the other vertices are going to stay the same. Now for I equals 4, we can update the path length to E going through C which is of length 2 plus 5. That gives us a path of length 7 to E. Now the other interesting thing is, that there's a path to A itself. So we can go to C of length 2 and then we can go back along this edge from C to A, which is of length 2. And then we get a new path to A going along this cycle, which is of length 4. So that's a shorter path to A. The path length to A went down from 5 - 4 using this cycle as negative weight cycle. And the other Bursey stay the same. Now let's continue. Notice, now we can update the path length to B, because A's distance went down from 5 - 4. So now the path length to B using A goes down to 7. And the other vertices stay the same. Now since the path length to B went down, actually, we can update the path length to D and also to C. The path length to C now goes down to 1 and the path length to D goes down to 11, 7 - B plus 4 and the other vertices stay the same. Notice that when there is a negative weight cycle, then every row is going to be different from the previous row. It's going to be the next step on this cycle. And that next vertex on that cycle is going to have shorter path length than it previously had. So A is going to decrease, and then B is going to decrease, and then C is going to decrease, and then A is going to decrease, then B and C and A and so on. So every row is going to be different. So normally if there's no negative weight cycle, then notice our algorithm was going to stop at the case I equals N minus 1, which is I equals 5 in this example, because every path used a vertex at most once. So the maximum path length was at most five edges and minus one edges, but if there's a negative weight cycle then what we're going to have is that I equals N is going to be different. It's going to be smaller than I equals N minus 1, because every row is going to shrink further. So if there's no negative weight cycle and we can stop here. But if there is a negative weight cycle then what we're going to notice is that, I equals N is going to be different from I equals N minus one. So how do we detect a negative weight cycle? We compare these two rows and if I equals N is different from I equals N minus 1 then that shows us that there is a negative weight cycle. So how do we check that there's a negative weight cycle? We check if the entry D of NZ is smaller strictly smaller than D of N minus 1Z. For some Z, some vertex Z. So the- the row I equals N is different from the row I equals N minus 1 in some entry Z. If that is the case then there is a negative weight cycle and it involves Z. And actually we can backtrack, we can see that that cycle involved is vertex C and then we can see it involves B and A. So we can detect that cycle, C, B, A. But our check is just we take our algorithm from before, our Bellman Ford algorithm, which ran from I equals 1 to N minus 1 and instead we run it from I equals 1 to N and we check if the row I equals N is different from I equals N minus 1. If it is different, then we found a negative weight cycle. If it's not different, then we output the row I equals N minus 1 or the row I equals N, because they're both the same and that gives us the shortest path length from s to every other vertex. So that completes the dynamic programming algorithm known as Bellman Ford for finding the shortest path from a single source vertex and it allows positive and negative weight edges. And if there is negative weight edges, it can detect whether or not there is a negative weight cycle.