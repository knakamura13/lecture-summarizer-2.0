1
00:00:00,000 --> 00:00:02,370
 Now let's take a look at some properties of a DAG that we

2
00:00:02,370 --> 00:00:04,830
 can derive from this topological ordering.

3
00:00:04,830 --> 00:00:07,230
 Now there are two types of vertices we want to distinguish,

4
00:00:07,230 --> 00:00:09,740
 source vertices and sink vertices.

5
00:00:09,740 --> 00:00:12,245
 A source vertex has no incoming edges.

6
00:00:12,245 --> 00:00:13,995
 So everything goes out of a source.

7
00:00:13,995 --> 00:00:15,930
 For a sink vertex. It's the opposite.

8
00:00:15,930 --> 00:00:17,400
 Nothing comes out of sink.

9
00:00:17,400 --> 00:00:18,900
 Things only come into a sink.

10
00:00:18,900 --> 00:00:22,500
 Now a DAG always has at least one source and at least one sink.

11
00:00:22,500 --> 00:00:23,965
 There may be multiple sources,

12
00:00:23,965 --> 00:00:25,553
 there may be multiple sinks.

13
00:00:25,553 --> 00:00:29,200
 But we're always guaranteed there's at least one source and at least one sink.

14
00:00:29,200 --> 00:00:31,715
 How do we know that there's a source vertex in every DAG?

15
00:00:31,715 --> 00:00:34,925
 We'll take any topological ordering and look at the first vertex,

16
00:00:34,925 --> 00:00:37,390
 in this case x. What do we know about x?

17
00:00:37,390 --> 00:00:40,530
 We know all edges in the topological ordering go from left to right,

18
00:00:40,530 --> 00:00:43,125
 from earlier in the topological ordering to later.

19
00:00:43,125 --> 00:00:46,545
 So edges can only come out of the first vertex in the topological ordering.

20
00:00:46,545 --> 00:00:47,855
 No edges can come in,

21
00:00:47,855 --> 00:00:49,890
 because then they would come from right to left.

22
00:00:49,890 --> 00:00:52,245
 So every DAG has a topological ordering,

23
00:00:52,245 --> 00:00:56,070
 the first vertex in every topological ordering must be a source vertex.

24
00:00:56,070 --> 00:00:59,285
 So that guarantees that every DAG has at least one source vertex.

25
00:00:59,285 --> 00:01:02,280
 And there might be multiple source vertices because there might be

26
00:01:02,280 --> 00:01:06,750
 multiple topological orderings and they might have different vertices at the beginning.

27
00:01:06,750 --> 00:01:09,160
 Now which vertex is first in our topological ordering?

28
00:01:09,160 --> 00:01:11,750
 It's the half vertex with the highest post order number.

29
00:01:11,750 --> 00:01:12,870
 Therefore, the vertex with

30
00:01:12,870 --> 00:01:16,170
 the highest post order number is guaranteed to be a source vertex.

31
00:01:16,170 --> 00:01:20,040
 Similarly, the last vertex in our topological ordering must be a sink vertex,

32
00:01:20,040 --> 00:01:22,765
 because edges can come into it but nothing can come out,

33
00:01:22,765 --> 00:01:24,720
 otherwise it would be going right to left again.

34
00:01:24,720 --> 00:01:27,060
 Therefore, the vertex with the lowest post order number

35
00:01:27,060 --> 00:01:29,440
 is guaranteed to be a sink vertex.

36
00:01:29,440 --> 00:01:31,845
 And once again, there might be multiple sink vertices.

37
00:01:31,845 --> 00:01:35,995
 These might be multiple topological orderings with different vertices at the end.

38
00:01:35,995 --> 00:01:42,690
 In this example, u and w are both sync vertices and only x is a source vertex.

39
00:01:42,690 --> 00:01:45,570
 Now let's look at an alternative topological sorting algorithm.

40
00:01:45,570 --> 00:01:48,503
 Now this algorithm is not going to be very useful for DAGs,

41
00:01:48,503 --> 00:01:52,110
 but it is going to be very useful when we look at general directed graphs.

42
00:01:52,110 --> 00:01:53,975
 Now we know in a topological ordering,

43
00:01:53,975 --> 00:01:57,045
 the last vertex in the ordering is a sink vertex.

44
00:01:57,045 --> 00:02:00,465
 So what can we do? We can find a sink vertex in some way.

45
00:02:00,465 --> 00:02:02,700
 We can put it at the end of our list and

46
00:02:02,700 --> 00:02:05,330
 then we can repeat on the remainder of the graph.

47
00:02:05,330 --> 00:02:06,997
 So we're going to find a sink vertex,

48
00:02:06,997 --> 00:02:08,700
 output it and then we're going to

49
00:02:08,700 --> 00:02:11,120
 delete it from the graph and then we're going to repeat.

50
00:02:11,120 --> 00:02:13,935
 Now we repeat this first step, find a sink,

51
00:02:13,935 --> 00:02:15,595
 in this case maybe it's u,

52
00:02:15,595 --> 00:02:19,685
 and then we find z, and we find y and we find x.

53
00:02:19,685 --> 00:02:21,970
 Notice when x is the only vertex remaining,

54
00:02:21,970 --> 00:02:24,715
 it's the sink vertex in that graph of size one.

55
00:02:24,715 --> 00:02:27,420
 Finally, we're left with the empty graph and then we stop.

56
00:02:27,420 --> 00:02:31,605
 What we've done is we outputed the vertices from the end to the beginning.

57
00:02:31,605 --> 00:02:33,960
 And this gives us a valid topological sorting.

58
00:02:33,960 --> 00:02:37,245
 Now how we actually find asink vertex is another question.

59
00:02:37,245 --> 00:02:39,950
 But this algorithm, this basic approach is valid.

60
00:02:39,950 --> 00:02:43,598
 And we're going to use this basic approach when we consider general directed graphs.

61
00:02:43,598 --> 00:02:46,590
 And that's what we're going to turn our attention to now, general directed graphs,

62
00:02:46,590 --> 00:02:48,740
 and we're going to look at the general question of what does this kind

63
00:02:48,740 --> 00:02:48,740
 of activity mean in general directed graphs.

