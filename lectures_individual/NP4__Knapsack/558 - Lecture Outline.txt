Let's give a quick recap of what we've seen so far. We took for granted that SAT is NP-complete. This means that all the problems in the class NP can be reduced to SAT. So, if we can solve SAT in polynomial time, then we can solve any problem in NP in polynomial time. And we saw that 3SAT is NP-complete. This involved a reduction from SAT to 3SAT, then we prove that the Independent Set problem is NP-complete. This involved a reduction from 3SAT to the Independent Set problem. This was a quite interesting reduction because it involved a transformation from a logic problem, 3SAT to a Graph problem, Independent Set problem. Then we proved that the Clique problem and Vertex cover problems were NP-complete. These involve more trivial reductions from the Independent Set problem. What we are going to do now is we're going to prove that the Knapsack problem is NP-complete. As an intermediate step, we're going to look at the Subset-sum problem. We're going to prove that a Subset-sum problem is NP-complete. This is going to involved a reduction from the 3SAT problem to Subset-sum problem. This again is a quite non-trivial reduction because it involves transforming a logic problem 3SAT into this optimization problem Subset-sum. Once we prove that Subset-sum is NP-complete, it will be quite easy to prove that the Knapsack problem is NP-complete. We'll leave this last step as a homework problem proving that Knapsack is NP-complete once we know that Subset-sum is NP-complete. If you recall from the beginning, in the course, we study Dynamic Programming Algorithm for the Knapsack problem. And there, we saw an order N times B time Algorithm for the Knapsack problem, and we pointed out why this is not polynomial time. Why this running time is not polynomial in the input size? In order to be polynomial in the input size, it has to be polynomial in N and log of B. Why this is not polynomial is somewhat of a subtle point. I think it becomes much clearer when you see this reduction from 3SAT to Subset-sum, or 3SAT and Knapsack. What you see in this reduction, is that capital B will be exponential in the size of the input formula for the 3SAT problem. So, if we use this Algorithm to solve 3SAT, this would give us an exponential time Algorithm of 3SAT. It's a quite clever reduction so let's dive into it. Let's prove that the Subset-sum problem is NP-complete. Let's start with the definition of a Subset-sum.