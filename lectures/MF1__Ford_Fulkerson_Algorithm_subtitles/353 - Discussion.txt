What we just saw is a Ford-Fulkerson algorithm, takes running time, order M times capital C, where capital C is a size of the max-flow. But this assume that the capacities were integer values. Now there are two problems or unpleasant aspects of this. The first is that, we're assuming that the capacities are integer values. The other is that, the running time depends on the output. It depends on the size of the max-flow, which depends on the size of the capacities in the input. Since the running time of this algorithm depends on the numbers, the capacities in the input, we say that this running time is pseudo-polynomial. This is much like the situation for Knapsack. And there we discussed that the running time should depend on the log of these numbers, and ideally, the running time should be independent of these numbers. What we're going to see next is the Edmonds-Karp algorithm. This is very similar to the Ford-Fulkerson algorithm. It's got the same paradigm, but in the Ford-Fulkerson algorithm, we just find any path from s to t in the residual network, and we can run DFS or BFS to find such a path. In the Edmonds-Karp algorithm, we take the shortest path from s to t. Shortest means minimum number of edges. We don't care about the weights on the edges. To find such a path, we just run BFS, and then, what can prove is that the number of rounds is going to be at most M times N, since each round, again, takes order M time, the total running time will be order M squared N. So the running time will be independent of the size of the max-flow, and we no longer need this assumption that the capacities are integer values. Finally, we'll point out that Orlin has a current past algorithm from 2013, in contrast, the Edmonds-Karp algorithm is from 1972. So roughly 40 years later. And he achieves a running time of order M times N. This is currently the best for general graphs for the exact solution of the max-flow problem.