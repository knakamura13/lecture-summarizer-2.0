1
00:00:00,000 --> 00:00:03,960
 Now, we're going to look at the version of knapsack which is a search problem.

2
00:00:03,960 --> 00:00:06,635
 Now, the input starts off the same as before.

3
00:00:06,635 --> 00:00:09,198
 So, we'll have integer weights W1 through Wn,

4
00:00:09,198 --> 00:00:14,670
 integer values V1 through Vn and a total capacity, capital B.

5
00:00:14,670 --> 00:00:18,060
 All of these is the same as before for the original knapsack problem,

6
00:00:18,060 --> 00:00:20,430
 but there's an additional input parameter which

7
00:00:20,430 --> 00:00:23,070
 is our goal which will denote as little g.

8
00:00:23,070 --> 00:00:25,770
 Our output is a subset as just as

9
00:00:25,770 --> 00:00:30,085
 before where the total weight of this subset S is at most capital B.

10
00:00:30,085 --> 00:00:33,030
 So, if I sum over the objects in the subset of

11
00:00:33,030 --> 00:00:36,615
 their individual weights that's at most capital B.

12
00:00:36,615 --> 00:00:41,395
 That's just as before and we look at the total value of this subset.

13
00:00:41,395 --> 00:00:44,340
 Previously, we were trying to maximize this total value,

14
00:00:44,340 --> 00:00:48,416
 but now we're going to just check whether this total value meets our goal.

15
00:00:48,416 --> 00:00:50,245
 How is the immediate goal?

16
00:00:50,245 --> 00:00:52,770
 Well, we just want that the total value is at least

17
00:00:52,770 --> 00:00:55,975
 g. We're trying to maximize the total value.

18
00:00:55,975 --> 00:00:58,185
 So, we wanted to be at least our goal.

19
00:00:58,185 --> 00:01:00,716
 If we made it at most our goal that would be easy,

20
00:01:00,716 --> 00:01:01,845
 that would be trivial.

21
00:01:01,845 --> 00:01:03,745
 We could just output the empty set.

22
00:01:03,745 --> 00:01:05,970
 And if we do better than our goal that's even better.

23
00:01:05,970 --> 00:01:08,460
 That's why we make it at least g. But now,

24
00:01:08,460 --> 00:01:11,462
 what happens if there's no subset which meets our goal?

25
00:01:11,462 --> 00:01:13,721
 Well, if there's no solution to this problem,

26
00:01:13,721 --> 00:01:16,095
 so there's no subset which meets this goal,

27
00:01:16,095 --> 00:01:17,717
 then we simply output "NO".

28
00:01:17,717 --> 00:01:20,510
 This is the correct form for our search problem.

29
00:01:20,510 --> 00:01:24,987
 Notice that if we can solve this knapsack search version in polynomial time,

30
00:01:24,987 --> 00:01:28,740
 then we can solve the original optimization version in polynomial time.

31
00:01:28,740 --> 00:01:33,732
 How? Well, in the original version we were maximizing this sum of the total value.

32
00:01:33,732 --> 00:01:39,210
 Here we're simply finding a subset whose total value is at least little g. Now,

33
00:01:39,210 --> 00:01:41,893
 suppose that we could solve this version in polynomial time.

34
00:01:41,893 --> 00:01:44,420
 How do we solve the maximization version?

35
00:01:44,420 --> 00:01:49,050
 Well, we can simply do binary search over this little g and by doing binary search

36
00:01:49,050 --> 00:01:54,045
 over the little g and we find the maximum little g which has a solution,

37
00:01:54,045 --> 00:01:58,115
 then that tells us the maximum total value which we can achieve.

38
00:01:58,115 --> 00:02:01,090
 How many rounds in our binary search are we going to have to run?

39
00:02:01,090 --> 00:02:03,990
 How many of these knapsacks search version problems are we going to have to

40
00:02:03,990 --> 00:02:07,180
 run in order to solve the optimization problem?

41
00:02:07,180 --> 00:02:10,365
 Well, let's look at the sum of these values.

42
00:02:10,365 --> 00:02:14,095
 Let's let capital V be the sum of all the values.

43
00:02:14,095 --> 00:02:19,710
 Certainly the max of this total value that we can achieve is at most capital V. So,

44
00:02:19,710 --> 00:02:25,290
 we're going to do binary search on little g ranging between one and capital V. So,

45
00:02:25,290 --> 00:02:28,500
 the total number of rounds in our binary search algorithm is going to be at

46
00:02:28,500 --> 00:02:33,960
 most order log V. What is the size of the input to represent these numbers?

47
00:02:33,960 --> 00:02:36,548
 Well, it's log V. So,

48
00:02:36,548 --> 00:02:41,505
 this algorithm, this binary search algorithm is polynomial in the input size.

49
00:02:41,505 --> 00:02:45,060
 So, we can solve the knapsack search version in polynomial time,

50
00:02:45,060 --> 00:02:45,060
 then we can solve the optimization version in polynomial time.

