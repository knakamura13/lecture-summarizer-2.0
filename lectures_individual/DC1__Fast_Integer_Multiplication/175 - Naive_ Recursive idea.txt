Let's follow through on a recursive approach. So our basic idea was to break the input into two halves. So we partition this n-bit number x into two n over two-bit numbers. So xl is the first n over 2 bits of x and xr is the last n over two bits of x. Similarly for y, we partitioned it to yl, the first n over two-bit and yr the last n over two-bit. Notice we just saw how xl and xr are related to x. In particular, x equals xl times 2 to the n over 2. That corresponds to shifting it n over two times plus xr. Similarly for y, y equals yl times 2 to the n over 2 plus yr. Now our goal is to compute x times y. Well, we can replace x by this quantity. X is the same as 2 to the n over 2 times xl plus xr and we can replace y by this quantity. 2 to the n over 2 times yl plus yr. Now let's expand out this expression and see what we get. Multiplying the first terms together we get 2 to the n times xl times yl, we get two terms which are scaled by 2 to the n over 2. Namely we get 2 to the n over 2 times xl times yr and we also get 2 to the n over 2 times yl times xr. Finally, the last term is xr times yr. If you notice now we have a recursive algorithm for computing x times y. Now recall x and y are both n-bit numbers, so we're trying to compute the product of these two n-bit numbers. What we can recursively do, is compute the product of 2 n over two bit numbers, where we have four n over two bit numbers over here. So we can compute the product of any pair of them. For example, we can recursively compute the product of xl and yl, and xl and yr, xr and yl and xr and yr. These are four products of n over two bit numbers which we can recursively compute. This gives us a natural recursive algorithm for computing the product of x times y. Let's go ahead and detail that algorithm to make sure everybody follows what we've done so far and then we are going to try and improve on that.