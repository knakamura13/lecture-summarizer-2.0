Let's detail the subproblem definition we proposed. We have a parameter i which corresponds to the prefix link. i is going to vary between zero and n. i equals zero corresponds to the empty string. i equals n corresponds to the original input. Now, we're going to define a function l of i. This will be the length of the longest common subsequence in a prefix of X of length i and a prefix of Y of length i. So, X_1 through X_i and Y_1 through Y_i. Note, this is analogous to the original problem except on a prefix of the input. One other notable difference, this does not store the subsequence itself. It simply stores the length. We want our table to store our number or true false. Now, let's take a look back at our earlier example. Now, this was our earlier example. We're trying to find a recursive relation for l of i. We're trying to express l of i in terms of smaller subproblems, L_1 through L_i minus one. Let's try to gain some insight from this example. In order to get a smaller subproblem, we're going to look at the last character. So we're going to look at X_i and Y_i. We're going to look at how X_i and Y_i are used in the solution to l of i and then, we can use the solution to the subproblem of size i minus one. We take the optimal solution for the subproblem of size i minus one and then we append on the solution for X_i and Y_i. Now, there are two cases to consider, either of these last characters are different, in this case, or they're the same. We're going to consider these two cases separately. The first case is when the last characters X_i and Y_i are the same. The second case is when the last characters X_i and Y_i are different. We're going to do this case first. X_i equals Y_i. The last characters are the same. This turns out to be the easy case. Now, let's modify our example so that the last characters are the same. So, I append on character C onto the end of both strings. Now, in this case, where the last character is the same, what do we know about the longest common subsequence? Well, we know it must include and must end in this common character. Why? Well, it give me a common subsequence and suppose it does not include this last character. Well, then, I can append on this common character and I get a longer subsequence. So, therefore, the longest common subsequence must include this last character. So, in this case, where X_i equals Y_i, what do we know about l of i? We know that the longest common subsequence includes this last character. So, we get one in the length for that common character and then we can simply drop this last character and then we can take this input sequence of length i minus one and we can take the longest common subsequence in this input sequence of length i minus one and append on this common character C. What is the length of the longest common subsequence in this input? It's simply l of i minus one. So, we have a recursive relation. We can express l of i in terms of l of i minus one. This handles a case when X_i equals Y_i. Now, let's take a look at the case when X_i is not equal to Y_i.