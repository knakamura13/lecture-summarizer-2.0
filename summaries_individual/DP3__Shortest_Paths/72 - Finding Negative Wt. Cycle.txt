Detecting a negative weight cycle in a graph can be achieved using the Bellman-Ford algorithm. This algorithm utilizes a table with columns representing graph vertices (S, A, B, C, D, E in the example) and rows for path lengths. Starting with base case I=0, the source vertex S is set to 0 distance, and others are infinite. The algorithm iteratively updates the table for path lengths I=1 to I=N (number of vertices). Normally, the algorithm ends at I=N-1 as it considers paths using at most N-1 edges. If there's no negative weight cycle, paths will not improve beyond this point. However, executing the algorithm for an additional iteration (I=N) may reveal shorter paths if a negative weight cycle exists, as this would continually decrease path lengths. When I=N produces different values than I=N-1, a negative weight cycle is present. The vertex involved in the cycle will show a decreased path length in row I=N. By backtracking, the cycle's participating vertices can be identified. The Bellman-Ford algorithm thus finds the shortest paths and detects negative weight cycles in graphs with both positive and negative weight edges.