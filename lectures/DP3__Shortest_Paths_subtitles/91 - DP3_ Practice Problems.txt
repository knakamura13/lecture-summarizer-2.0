Here's a homework problem I often like to assign after this lecture. It's from Chapter Four, problem 21. It's about currency exchange and we're looking for an arbitrage situation. We're going to start say with one currency, say dollars. We're going to change it to another currency, let's say yen. And then we exchange it to another currency, let's say pounds. And then we go back to dollars. We're looking for a situation when we do this cycle and we end up with more than one dollar. So after this series of exchanges we end up with more than we started with. This is an arbitrage situation and we're looking for such anomalies in the exchange market. Now this is in Chapter Four which is about graph algorithms. And what we want to do, is we want to reduce it to the negative weight cycle problem. So we want to reduce this arbitrage situation to a negative weight cycle. Now we just saw two algorithms for detecting negative weight cycles. Now we want to use these algorithms as black boxes. So, we don't want to modify these algorithms in any way. We want to think of them as like a library, as a subroutine we got from a library and we can't modify the code. We can simply give it some graph as input and we can get the output, which is a negative weight cycle if one exists in that graph. Now we want to use this black box subroutine to construct an algorithm for this currency exchange problem. So we want to build an algorithm for detecting an arbitrage situation. So we're going to take as input our currency exchange rates and we want to figure out how to convert these currency exchange rates into a graph. So we need to build this function. This function is reducing this currency exchange problem into a graph problem of detecting a negative weight cycle. So we had to build this function which converts these currency exchanges into a graph and then we simply want to run this graph problem for detecting negative weight cycles. We're going to take the output from that and that's going to give us the output for our arbitrage problem. We might have to do some conversion on that output, but we don't have to touched this algorithm at all. It's called a reduction. Where we're reducing the arbitrage problem, to this negative weight cycle detection problem. And we denote it this way, we're reducing arbitrage to negative weight cycles. So we want to use this as a black box to solve this problem. Reductions are going to be an underlying theme in the course. We're going to use them to design efficient algorithms and later we're going to use them to prove hardness. We're going to use them to show NP completeness. But this is a general theme, we know how to solve one problem. We want to use that to solve a new problem. So we want to reduce this new problem to some existing problem that we know how to solve.