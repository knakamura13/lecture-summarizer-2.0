Kruskal's algorithm's runtime primarily involves sorting edges by increasing weight and checks for cycle creation when adding an edge. Sorting edges requires O(m log n) time, where m is the edges and n is the vertices. Checking for cycle creation involves identifying if vertices V and W are in the same component before adding edge E, using a union-find data structure. This step, as well as merging components, takes O(log n) per operation. With at most m operations, this leads to another O(m log n) runtime for this step. Both major steps (sorting edges and checking/merging components) consume O(m log n) time, resulting in the total runtime of the algorithm being O(m log n). The focus of Kruskal's proof of correctness lies in understanding why the greedy approach is effective for this algorithm, but the specific mechanism of the union-find data structure, assumed as prior knowledge, is not elaborated upon here.