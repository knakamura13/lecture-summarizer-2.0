Let's see why the MST problem lies in the class NP. First off, is the MST problem of the correct form. If there is a solution are we outputting a solution. And if there is no solution, we're outputting no. Well, the way the problem is formulated, we're always outputting a solution. We're always outputting a tree T, which is guaranteed to be a minimum weight. And the way the problem is formulated there always is a solution. We're simply looking for the tree of minimum weight. So there was always a tree of minimal weight, so we're always outputting a solution. There's never in no instance. There's never no tree of minimum weight. Sum tree has to be of minimum weight. So there's always a solution to this problem and we're always outputting a solution. Now, suppose we're given a graph G, which is our input to the MST problem and we're given a tree T, which we claim is a solution to the MST problem. How do we verify that T is in fact a solution to the MST problem for G? Well, first we have to verify that T is a tree. Or we can simply run the BFS or DFS algorithm to check that T is a tree. To check that T connects up the graph G and that T has no cycles. Now, how do we check that T is of minimum weight? Well, we can run Kruskal's or Prim's algorithm, that's going to give it an MST. Then for that given MST that's outputted by Kruskal's or Prim's algorithm, we check its weight and then we check that T has the same weight as that output from Kruskal's or Prim's algorithm. There's no reason why Kruskal's or Prim's algorithm might generate this particular tree T, but they're going to output a MST and we checked the weight of that MST outputted by these algorithms, and then we compare that to the weight of the tree T. And therefore, we can verify that T has minimum weight and that T is a tree. And therefore, T is an MST. It takes us order N plus M time to run BFS or DFS and it takes us o(mlogn) time to run Kruskal's or Prim's algorithm. So the total time of our verification algorithm is o(mlogn). This shows that the MST problem is in NP.