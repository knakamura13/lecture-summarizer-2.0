There's one important point that we have to make about the performance of the algorithm which will be useful later. Instead of max-SAT, let's consider max-Ek-SAT. So every clause has size exactly K. For instance, let's consider K=3, and suppose every clause in our input formula f had size exactly 3. Now in this case what's the probability that a particular clause C_j is satisfied? Well, there's one setting of the three literals which appear in this clause so that this clause is not satisfied. The probability of that assignment is one-eighth. Therefore, the probability that is satisfied is exactly seven-eighths, and therefore for the special case of max-E3-SAT, we achieve a seven-eighths approximation algorithm. And what if instead of size 3, every clause had size exactly K, then the probability that a specific clause is not satisfied is two to the minus K. So the probability is satisfied is one minus SAT, and therefore we achieve a one minus two minus approximation algorithm for max-Ek-SAT. We're going to use later that this algorithm works well when all the clauses are large. And now we're going to make a LP based algorithm which works well when the clauses are small. Now, one interesting tidbit this seven-eighths approximation algorithm for max-E3-SAT is the best possible. Hovstad proved that it's NP hard to do any better than seven-eighths for this case. If we achieve an algorithm which has guaranteed performance seven-eighths plus epsilon for any epsilon. For instance, if we achieve 0.88 approximation algorithm, then that implies that P=NP. So this very simple naive algorithm is the best possible when all the causes are of size exactly 3. Thus the hard case is when the formula has varying size clauses, has some unit clauses, some clause of size two and some clauses of size three and so on. But if all the clauses are of the same size and they happen to be of size three, then we can achieve the best possible algorithm by just a random assignment.