Now let's take a look at some properties of a DAG that we can derive from this topological ordering. Now there are two types of vertices we want to distinguish, source vertices and sink vertices. A source vertex has no incoming edges. So everything goes out of a source. For a sink vertex. It's the opposite. Nothing comes out of sink. Things only come into a sink. Now a DAG always has at least one source and at least one sink. There may be multiple sources, there may be multiple sinks. But we're always guaranteed there's at least one source and at least one sink. How do we know that there's a source vertex in every DAG? We'll take any topological ordering and look at the first vertex, in this case x. What do we know about x? We know all edges in the topological ordering go from left to right, from earlier in the topological ordering to later. So edges can only come out of the first vertex in the topological ordering. No edges can come in, because then they would come from right to left. So every DAG has a topological ordering, the first vertex in every topological ordering must be a source vertex. So that guarantees that every DAG has at least one source vertex. And there might be multiple source vertices because there might be multiple topological orderings and they might have different vertices at the beginning. Now which vertex is first in our topological ordering? It's the half vertex with the highest post order number. Therefore, the vertex with the highest post order number is guaranteed to be a source vertex. Similarly, the last vertex in our topological ordering must be a sink vertex, because edges can come into it but nothing can come out, otherwise it would be going right to left again. Therefore, the vertex with the lowest post order number is guaranteed to be a sink vertex. And once again, there might be multiple sink vertices. These might be multiple topological orderings with different vertices at the end. In this example, u and w are both sync vertices and only x is a source vertex. Now let's look at an alternative topological sorting algorithm. Now this algorithm is not going to be very useful for DAGs, but it is going to be very useful when we look at general directed graphs. Now we know in a topological ordering, the last vertex in the ordering is a sink vertex. So what can we do? We can find a sink vertex in some way. We can put it at the end of our list and then we can repeat on the remainder of the graph. So we're going to find a sink vertex, output it and then we're going to delete it from the graph and then we're going to repeat. Now we repeat this first step, find a sink, in this case maybe it's u, and then we find z, and we find y and we find x. Notice when x is the only vertex remaining, it's the sink vertex in that graph of size one. Finally, we're left with the empty graph and then we stop. What we've done is we outputed the vertices from the end to the beginning. And this gives us a valid topological sorting. Now how we actually find asink vertex is another question. But this algorithm, this basic approach is valid. And we're going to use this basic approach when we consider general directed graphs. And that's what we're going to turn our attention to now, general directed graphs, and we're going to look at the general question of what does this kind of activity mean in general directed graphs.