So let's dive into the first two steps in our recipe for designing a dynamic programming algorithm. Our first step, is to define the subproblem in words. Recall our subproblem definition from some of our earlier examples. For Fibonacci numbers, we set F(i) to be the i-th Fibonacci number. In the longest increasing sub sequence problem, we set L(i) to be the length of the longest increasing sub sequence on the first i numbers in the input. What are we going to do here? Our first attempt is always to try this same problem on a prefix of an input. So it's key. It's just identical to the original problem and it's just on a prefix. So all we've changed is from doing it on length N to length I, first I characters. So let's formalize that. So we're going to have a variable I which is the prefix length and the prefix length varies between 0 corresponding to the empty string and length N which is our original input. And we define a new function L(i), which is the length of the longest common sub sequence in the first I characters of X and the first I characters of Y. Our second step, is to define a recurrence. We want to express L(i) in terms of L(1) through L(i-1). So let's take a look at how to define the recurrence in this example, that we saw earlier.