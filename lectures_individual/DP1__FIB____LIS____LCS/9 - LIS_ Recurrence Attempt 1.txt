Recall, our subproblem definition is L of I, is the length of the longest increasing subsequence on the first I elements of the input, all right? And our goal is to express L of I in terms of the solution to smaller subproblems. So, now, let's recall our earlier example. Here is our earlier example which had n equals 12. Now, let's look at L on this example. To start with, for L of one, we're looking at the longest increasing subsequence on the one element array. That's length one or five itself. Then, for L of two, we're looking at the two element array five, seven the longest increasing subsequence is five, seven itself, which is length two. And for five, seven, four; five, seven is still the longest and we add on three, but still length two is the longest, for 9, we can appended on to the longest solution. We get the length three with one, stays 3. When we add on 10, we can append 10 on to the longest solution. We get like 4. Now let's pay attention to the case I equals 9. What is L of 9? Well, we cannot append on A on to the end of this current longest solution but in fact, there's a different solution. -3,1,4,5, for which we can append A on to the end and we get a solution of length 5. So, the problem is, how can we compute L of 9 using L 1 through L A? How do we know whether we can append A on to the end of the current solution or not? We're not maintaining the current solution but even if we maintain the current solution, how do we know that we can append A on to the end of it? For this solution we couldn't maintain it. We couldn't append it on to the end. But for this solution we could append A on to the end of it. So, suppose we kept track of the current solution or actually, what do we need to know? We need to know the ending character of the current solution and what's the key fact? We want to know the longest increasing subsequence with the minimum ending character. So, we want to know the smallest ending character, because the smallest ending character gives us the most possibilities for appending on a new character on to the end. So in this case, in order to compute L of 9 using L 1 through L A, we need to keep track of the longest increasing subsequence solution with the minimum ending character. And in this case, it's five and then we realize we can append eight on to the end of it and we can increase those solution length from four. Let's go back to I equals 8 and we'll start to see the complication in this solution. Previously, our solution was 5, 7, 9, 10 but actually with our new formulation what we want to maintain is, -3, 1, 4, 5 because this is also of length 4 and it ends in a smaller character. For now let's go back to I equals 7. For I equals 7, the longest increasing subsequence is 5,7,9,10. But, no. When I equals 8, we need to have this sequence minus 3 1,4. Now this is only length 3. So it's a suboptimal solution but we need to maintain it in order to realize that in the next step that we can append 5 on to the end of it and then we obtain a length 4 solution for I equals 8. So, how do we maintain this suboptimal solution? The key is, that for every possible ending character, we want to maintain the length of the longest increasing solution with that ending character. We need to know the length of the longest increasing subsequence for every possible ending character. If we know that for every possible ending character, then when we get a new character, in this case five, we can try all possible ending characters and we can try to add on five. We can see whether it is allowed to add on five on to the end of it. Now, how many possible ending characters are there? What are the possible ending characters? Well, the ending characters must be an earlier element in the input array. So in this case it is 5,7,4, -3 up to 4. Those are the possible ending characters. So they're not limitless. There's a finite small number. Actually, I minus 1 possible ending characters. So, this actually gives us an idea for how to modify our subproblem formulation. We want to know the length of the longest increasing subsequence for every possible ending character. We just noticed that the possible ending characters are the earlier elements in the array. Therefore, we want to maintain the length of the longest increasing subsequence for each element of the array. This gives us an idea for the new subproblem formulation. We're going to modify the length of the longest increasing subsequence on A 1 through A I and includes A I, okay? So this will give us the longest increasing subsequence, which ends at the I element of the array, in this case five. And then, we have that for L 1 through L I minus 1 and then we can use that to decide, what is the longest sequence ending at 8 because we can see which characters allow us to append 8 on to the end of it. Let's go back and formulate this more precisely and then we'll see the recurrence.