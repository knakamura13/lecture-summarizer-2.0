1
00:00:00,000 --> 00:00:03,045
 Now let's look at the pseudocode for the Explore procedure,

2
00:00:03,045 --> 00:00:05,960
 and let's say we're running Explore from a vertex Z.

3
00:00:05,960 --> 00:00:08,135
 This is our first time visiting Z.

4
00:00:08,135 --> 00:00:10,755
 So we have to store its connected component number

5
00:00:10,755 --> 00:00:13,455
 as the current count for the connected components,

6
00:00:13,455 --> 00:00:15,930
 and we have to set Z to be visited.

7
00:00:15,930 --> 00:00:17,647
 Now, we want to explore all edges out of Z.

8
00:00:17,647 --> 00:00:22,596
 Recall that G was given to us an adjacency list representation,

9
00:00:22,596 --> 00:00:25,400
 so now we can look through the linked list of neighbors of Z.

10
00:00:25,400 --> 00:00:27,255
 Now for a particular neighbor W,

11
00:00:27,255 --> 00:00:30,030
 if W hasn't been visited yet then we

12
00:00:30,030 --> 00:00:34,180
 recursively explore from W and we repeat this procedure.

13
00:00:34,180 --> 00:00:36,460
 Now what's a running time of this algorithm?

14
00:00:36,460 --> 00:00:39,760
 Hopefully, you recall that DFS is a linear time algorithm.

15
00:00:39,760 --> 00:00:41,815
 So the running time is O(N + M).

16
00:00:41,815 --> 00:00:43,755
 For undirected graphs, this is it,

17
00:00:43,755 --> 00:00:46,610
 this gets all the information that we're trying to glean,

18
00:00:46,610 --> 00:00:48,960
 the connected components of the graph.

19
00:00:48,960 --> 00:00:51,720
 Now we're going to turn to directed graphs and we're going to need

20
00:00:51,720 --> 00:00:51,720
 more information from our DFS in order to obtain connectivity information.

