Part of the appeal of FFT is that the algorithm is quite concise. The algorithm is very simple. So let's re-express FFT in a more compact manner. First off we have the base case, n equals one. This is a polynomial of degree zero. So in this case we simply return the constant term a naught. Once again we define a even, the vector, as the even terms in the vector a, and a odd as the odd terms in the vector a. Then we recursively run the FFT algorithm with the vector a even and omega square. The output we get back we record as s naught through sn over two minus one. Similarly we will run FFT with a odd and omega square and we record the output in t naught through t n over two minus one, then we combine the solutions for these subproblems to get the solution to the original problem. So rj, which is going to be a of x at the point omega to the j equals s sub j, which is a even at the point omegas to the two J plus omega to the J times tj. And similarly r sub n over two plus j two equals s sub j minus omega to the j times tj. Finally we return these n numbers r naught through rn minus one.