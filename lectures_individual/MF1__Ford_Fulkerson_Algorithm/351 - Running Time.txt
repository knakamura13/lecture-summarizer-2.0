Now the proof of correctness of this algorithm, the fact that it does output flow, which is equal to the Max-flow, this will follow from the Max-flow=min-cut theorem which we'll see later. So we're going to skip the proof of correctness for now. Let's instead focus on the running time with this algorithm. In order to analyze the running time, we need to make a huge assumption. We need to assume that all the capacities are integers. Only under this assumption can we make a claim about the running time with a Ford-Fulkerson algorithm. Later, we'll see more sophisticated algorithms namely, Edmonds-Karp algorithm, which eliminates this assumption. The main point of this assumption is that when we augment the flow, we're going to augment it by an integer amount. So therefore, the capacities in the residual network will maintain as integers, and then every round will continue to augment by an integer amount. Now, if all the capacities in the residual network are integers, therefore they are all at least one, since they're all positive. Then, the flow is going to augment by at least one unit, because the capacity of this path will be at least one unit. So the flow is going to increase by at least one unit for every round of the Ford-Fulkerson algorithm. Now how many rounds do we have? Let's let capital C denote the size of the Max-flow. This is what we're trying to find. Well then, we have at most capital C rounds of the algorithm, because in every round, the flow increases by at least one unit. The maximum flow that we're trying to find is of size capital C, so we're going to get at most capital C rounds.