1
00:00:00,000 --> 00:00:02,790
 Let's look at the k-colorings problem.

2
00:00:02,790 --> 00:00:05,630
 This is a natural graft problem that many of you've probably seen

3
00:00:05,630 --> 00:00:09,860
 before but I don't think we've looked at this particular problem in this course yet.

4
00:00:09,860 --> 00:00:12,020
 You've probably heard of the four-color theorem.

5
00:00:12,020 --> 00:00:14,405
 This is the formulation of the general problem.

6
00:00:14,405 --> 00:00:17,745
 Now, the input to the problem is an undirected graph G and

7
00:00:17,745 --> 00:00:21,755
 an integer K. K is a number of colors in our palette.

8
00:00:21,755 --> 00:00:23,510
 Now, our goal is to assign colors to

9
00:00:23,510 --> 00:00:27,580
 the vertices so their neighboring vertices have different colors.

10
00:00:27,580 --> 00:00:29,450
 So, if there is a proper coloring,

11
00:00:29,450 --> 00:00:32,480
 we're going to output an assignment of colors to the vertices.

12
00:00:32,480 --> 00:00:37,400
 So, each vertex is going to get a color between one through K. These are the names

13
00:00:37,400 --> 00:00:42,680
 of the colors and this is a proper coloring if adjacent vertices get different colors.

14
00:00:42,680 --> 00:00:47,180
 Now, if this G has no such coloring, then we output no.

15
00:00:47,180 --> 00:00:50,780
 So, if there is a proper vertex K coloring for this graph G,

16
00:00:50,780 --> 00:00:52,735
 then we output such a coloring.

17
00:00:52,735 --> 00:00:57,190
 And if there is no such proper K coloring, then we output no.

18
00:00:57,190 --> 00:00:59,540
 Now, the K-colorings problem is in NP.

19
00:00:59,540 --> 00:01:01,220
 Why? Well first off,

20
00:01:01,220 --> 00:01:04,799
 it's the correct form when there is a solution.

21
00:01:04,799 --> 00:01:06,110
 When there is a proper coloring,

22
00:01:06,110 --> 00:01:07,690
 we output such a coloring.

23
00:01:07,690 --> 00:01:09,605
 And if there is no such coloring,

24
00:01:09,605 --> 00:01:11,480
 then we simply output no.

25
00:01:11,480 --> 00:01:15,520
 Now, the non-trivial step is we have to show that we can verify solutions.

26
00:01:15,520 --> 00:01:20,900
 So, suppose that were given a graph G and were given a K-coloring for this graph.

27
00:01:20,900 --> 00:01:25,220
 So, we're given assignment of the vertices to each of the one of the K colors.

28
00:01:25,220 --> 00:01:28,250
 Now, how do we check that this coloring is a proper coloring.

29
00:01:28,250 --> 00:01:30,550
 Well, we go through the edges of the graph and

30
00:01:30,550 --> 00:01:33,320
 we check that each edge is not monochromatic.

31
00:01:33,320 --> 00:01:37,325
 In particular, in order m time which is the number of edges,

32
00:01:37,325 --> 00:01:40,310
 we can check for every edge that

33
00:01:40,310 --> 00:01:44,960
 the color assignment for V is different than the color assignment for W. So,

34
00:01:44,960 --> 00:01:47,955
 for every edge, the two endpoints have different colors.

35
00:01:47,955 --> 00:01:52,065
 That's it. That's all we have to do to show that the K-colorings problem is in NP.

36
00:01:52,065 --> 00:01:56,694
 We simply have to show an algorithm which can verify solutions in polynomial time.

37
00:01:56,694 --> 00:01:58,670
 And it's a trivial algorithm,

38
00:01:58,670 --> 00:01:58,670
 so it's a simply one sentence proof that the K-colorings problem is in NP.

