So let's go back and revise our subproblem definition with the insight that we just gain. The key insight was that we're going to need a prefix of x and a prefix of y of possibly different lengths. Therefore we're going to have two indices, i and j, which are going to correspond to the length of the prefix and x and the length of the prefix and y. And as a consequence, we're going to end up with a two-dimensional table. In all our previous examples, we had a one dimensional array or table. And now, we're going to have a two-dimensional table or array, because we have two indices, i and j. So let's go ahead and formalize our subproblem definition. For indices i and j where once again i varies between 0 and n, and similarly j varies between 0 and n. We're going to define the function. We're going to define the function L of i_j, which is the length of the longest common subsequence in the first i characters of x and the first j characters of y. The key is that x is of length i and y is a prefix of length j. Now let's go ahead and see if we can define recurrence for this new subproblem definition. Let's start off with the base cases. Base cases are going to be when i is 0 or j is 0. Let's start with considering the case when j is 0. So what is L of i0 and what is L of 0j for the case when i is 0. Well, for Li0, so here j is 0. That means that y is the empty string. So what is the longest common subsequence? Well, in both where y is the empty string, so there is no subsequence in it. So the length of it is of length 0. Similarly, if we're taking an empty string for x then the longest common subsequence is the empty string itself, which is of length 0. So those are two base cases. Let's move on to the more interesting cases.