Finally, let's detail our strongly connected component algorithm. The input to our algorithm is a directed graph G in adjacency list representation. The first step of our algorithm is to construct the reverse of the graph G. Then we run DFS on the reverse graph. What do we know? We know that the vertex with highest post order number from this DFS run is guaranteed to lie in a source SCC of GR, and therefore is in a sink SCC of G. So, now what we want to do is we want to run explorer from this vertex with highest post order number from this DFS run. So now, what we're going to do is we're going to order the vertices. These are the vertices of the original graph, G. We're going to order these vertices by decreasing post order number. This is like we're ordering them by topological ordering, as for our DAG algorithm, and these are the post order numbers from this DFS run. So, we run DFS on the reverse graph and then we order the vertices in the graph by decreasing post order number from this DFS run. Now, finally, we run DFS on the original graph, where the vertices are ordered by this decreasing post order number from this DFS run. Now, what is the version of DFS we use for this last one? We're actually going to use the undirected connected components algorithm. If you recall, that runs DFS and it marks the components that we see along the way with a connected component number CCnum. We're going to run that identical pseudocode. Even though this is a directed graph and that was designed for undirected graphs, we run the identical pseudocode and the components, the strongly connected components, in this case, are going to be numbered and they're going to be numbered in topological ordering. So, the first component is going to be at the end of our topological ordering and so on, and we're going to work over. Now, just to remind you, this is our pseudocode for our undirected connected component algorithm. So, this was just DFS where we kept track of the connected component number and we marked the vertices with their connected component number as we visited them. So, for step four of this directed SCC algorithm, we're going to run this identical pseudocode and this CCnum, is going to give us the ordering, the topological ordering on the strongly connected components.