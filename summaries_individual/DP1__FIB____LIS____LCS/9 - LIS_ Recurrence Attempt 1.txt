To solve for L(I), the length of the longest increasing subsequence (LIS) ending with the I-th element, formulate subproblems based on earlier elements. For example, an array of n=12 elements, initially, L(1) is an LIS of length 1, since only one element is considered. As elements are added, track the LIS where L(2) is length 2 for the array [5, 7], and maintaining such sequences continues with each subsequent element. Challenges arise when elements cannot simply be appended, exemplified at L(9), where the current LIS does not accommodate the new element 'A', but an alternative sequence does, resulting in a longer LIS. Instead of tracking only the current LIS, track the smallest ending element of the LIS for more opportunities to append new elements and extend the LIS. Implement this by maintaining the LIS for each potential ending character, always seeking the minimum ending character. As the ending characters are limited to preceding array elements, there's a finite set to consider. A new subproblem formulation includes computing L(I) by maintaining the LIS ending at each element A(I) of the array, providing a basis to compute the LIS when a new element is considered. To compute L(9), you then evaluate all potential sequences ending with preceding characters to find where 'A' can be appended, creating the longest increasing sequence ending at 'A'. This refined approach allows the calculation of L(I) by determining the feasibility of appending new characters onto existing sequences and optimizing the LIS considering all subproblems up to L(I-1).