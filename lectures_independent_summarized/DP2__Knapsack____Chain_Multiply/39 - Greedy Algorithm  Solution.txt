Max value attainable is 18 by using objects 2 and 3 with total weight 22 and value 18. A greedy algorithm chooses items with the highest value per weight unit. In the example, it takes object 1 first (most value per unit) and then tries to fit others. After adding object 1 (15 units of weight), only 7 units of weight remain, disqualifying objects 2 and 3 due to their higher weight. Hence, it adds object 4, fitting the backpack. Greedy solution uses objects 1 and 4 for a total value of 16, which is suboptimal compared to the 18 from using objects 2 and 3. The greedy algorithm fails because an initially optimal choice prevents adding more valuable objects later, highlighting the advantage of dynamic programming for optimizing choices over time.