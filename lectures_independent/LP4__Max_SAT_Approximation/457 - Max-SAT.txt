We've seen now, several times, assess viability problem. We input once again is the Boolean formula in conjunctive normal form with N variables and M clauses. And the output from the SAT problem is an assignment, a true false assignment, for the N variables, so that the formula evaluates true or we simply output no, if there's no such satisfying assignment. Now, as we know the SAT problem is NP-complete. Hence, we can't hope to find a polynomial time algorithm for the SAT problem. Now, this is a search problem. Let's look at the optimization version. It's the Max-SAT problem. Now, in the Max-SAT problem the input is the same. It's a boolean formula in conjunctive normal form. And once again will use N to denote the number of variables and M for the number of clauses. The differences in terms of the output. Even if there's no satisfying assignment, we're still going to output an assignment. And here, we're going to output an assignment which maximizes the number of satisfied clauses. In the optimization version of the SAT problem, we want to find an assignment which satisfies many clauses as possible. Now, this is still a hard problem. In particular the Max-SAT problem is NP-hard. It's no longer a search problem so it is no longer in the class NP, because we have no way of verifying that the number of clauses satisfied is maximum. By clearly, this Max-SAT problem is at least as hard as the SAT problem. It's straightforward to reduce SAT to Max-SAT and therefore Max-SAT is NP-hard. So once again, we can't hope to solve the Max-SAT problem in polynomial time. Instead we're going to aim to approximate the Max-SAT problem and to do that we're going to use linear programming.