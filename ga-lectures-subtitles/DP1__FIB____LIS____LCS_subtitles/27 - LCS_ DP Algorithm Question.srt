1
00:00:00,000 --> 00:00:01,780
 Now, we can state the pseudo-code for

2
00:00:01,780 --> 00:00:05,565
 our dynamic programming algorithm for the longest common subsequence problem.

3
00:00:05,565 --> 00:00:08,865
 The input are these two strings, X and Y.

4
00:00:08,865 --> 00:00:13,755
 Now, let's start with the base cases which are the top row and the first column,

5
00:00:13,755 --> 00:00:17,155
 which first set L(i,0) to be zero.

6
00:00:17,155 --> 00:00:20,920
 This corresponds to setting the first column to zeros.

7
00:00:20,920 --> 00:00:23,840
 Then, we set the first row to all zeros.

8
00:00:23,840 --> 00:00:25,560
 These are our two base cases.

9
00:00:25,560 --> 00:00:28,020
 Now we can fill the interior of our table.

10
00:00:28,020 --> 00:00:30,575
 As we said earlier, we're going to go row by row.

11
00:00:30,575 --> 00:00:33,935
 Index i is going to correspond to the current row.

12
00:00:33,935 --> 00:00:35,505
 Then we go along this row.

13
00:00:35,505 --> 00:00:37,220
 This is the index j.

14
00:00:37,220 --> 00:00:38,865
 Now we have two cases to consider,

15
00:00:38,865 --> 00:00:45,990
 either the current last characters of X and Y are the same or they're different.

16
00:00:45,990 --> 00:00:47,400
 So, if Xi = Yj,

17
00:00:47,400 --> 00:00:49,530
 we have one recurrence.

18
00:00:49,530 --> 00:00:51,300
 And if Xi is not equal to Yj,

19
00:00:51,300 --> 00:00:53,015
 then we have a different recurrence.

20
00:00:53,015 --> 00:00:55,315
 In the case where Xi = Yj,

21
00:00:55,315 --> 00:00:57,960
 the recurrence is 1+,

22
00:00:57,960 --> 00:01:01,815
 the one comes from the appending Xi and Yj to the end,

23
00:01:01,815 --> 00:01:09,020
 and then taking the optimal solution for the prefix of length i-1 with length j-1.

24
00:01:09,020 --> 00:01:10,971
 In the case where they're not equal,

25
00:01:10,971 --> 00:01:14,930
 the recurrence is the best of the two scenarios.

26
00:01:14,930 --> 00:01:19,710
 Either we drop the last character from Y, giving us L(i,

27
00:01:19,710 --> 00:01:22,875
 J-1), or we drop the last character from X,

28
00:01:22,875 --> 00:01:27,415
 giving us L(i-1, j) and we take the max of these two.

29
00:01:27,415 --> 00:01:29,625
 Finally, what is the output of our algorithm?

30
00:01:29,625 --> 00:01:33,890
 It's the entry in the bottom right of our matrix.

31
00:01:33,890 --> 00:01:33,890
 L(n, n) is the length of the longest common subsequence for all of X with all.

