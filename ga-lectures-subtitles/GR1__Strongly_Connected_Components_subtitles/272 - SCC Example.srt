1
00:00:00,030 --> 00:00:01,890
 let's look back at our earlier example

2
00:00:01,890 --> 00:00:03,810
 and now we can illustrate our algorithm

3
00:00:03,810 --> 00:00:04,890
 for finding strongly connected

4
00:00:04,890 --> 00:00:07,109
 components in this example here's our

5
00:00:07,109 --> 00:00:10,860
 input graph G now this graph G had to

6
00:00:10,860 --> 00:00:13,679
 sink strongly connected components D by

7
00:00:13,679 --> 00:00:16,470
 itself and these five vertices formed a

8
00:00:16,470 --> 00:00:18,240
 strongly connected component now our

9
00:00:18,240 --> 00:00:20,550
 main observation from before was if we

10
00:00:20,550 --> 00:00:22,710
 ran DFS starting from one of these

11
00:00:22,710 --> 00:00:25,740
 vertices in the sink SEC so suppose we

12
00:00:25,740 --> 00:00:28,680
 ran DFS starting from this vertex K well

13
00:00:28,680 --> 00:00:29,910
 initially everybody's marked as

14
00:00:29,910 --> 00:00:33,329
 unvisited we want we set K to be visited

15
00:00:33,329 --> 00:00:37,680
 then we visit L I J and H and noticed no

16
00:00:37,680 --> 00:00:39,390
 other vertices in the graph are visited

17
00:00:39,390 --> 00:00:42,420
 so the only visited vertices are exactly

18
00:00:42,420 --> 00:00:44,430
 this strongly connected component

19
00:00:44,430 --> 00:00:47,190
 containing K so we can mark all the

20
00:00:47,190 --> 00:00:49,050
 vertices that were visited so far as

21
00:00:49,050 --> 00:00:51,809
 component 1 and then we can rip it out

22
00:00:51,809 --> 00:00:53,670
 of the graph and we can look at the

23
00:00:53,670 --> 00:00:55,559
 remainder of the graph and we can find a

24
00:00:55,559 --> 00:00:57,629
 sink SCC and the remainder of the graph

25
00:00:57,629 --> 00:01:00,989
 for example D will run explore from it

26
00:01:00,989 --> 00:01:03,180
 will find this component then the

27
00:01:03,180 --> 00:01:04,830
 remainder of the graph and we'll find

28
00:01:04,830 --> 00:01:06,960
 one of these vertices or an explore from

29
00:01:06,960 --> 00:01:09,330
 it find this component and continue

30
00:01:09,330 --> 00:01:10,860
 that's how our algorithm is gonna work

31
00:01:10,860 --> 00:01:13,470
 now how do we find this vertex in a sink

32
00:01:13,470 --> 00:01:15,840
 SCC well to do that we look at the

33
00:01:15,840 --> 00:01:18,240
 reverse graph here's the reverse graph

34
00:01:18,240 --> 00:01:20,880
 it's got the same vertex set we simply

35
00:01:20,880 --> 00:01:23,040
 flipped all the edges so this has an

36
00:01:23,040 --> 00:01:25,290
 edge from B to D this has an edge from D

37
00:01:25,290 --> 00:01:27,600
 to B now what we claimed is that if we

38
00:01:27,600 --> 00:01:29,670
 run DFS on this graph of the reverse

39
00:01:29,670 --> 00:01:32,009
 graph the vertex with the highest post

40
00:01:32,009 --> 00:01:34,950
 number is gonna lie in a source SCC in

41
00:01:34,950 --> 00:01:37,140
 this graph what are the source strongly

42
00:01:37,140 --> 00:01:38,520
 connected components in this reverse

43
00:01:38,520 --> 00:01:43,380
 graph it's these five vertices and D so

44
00:01:43,380 --> 00:01:45,390
 the sink SEC is over here in the

45
00:01:45,390 --> 00:01:48,060
 original input graph our source SCC is

46
00:01:48,060 --> 00:01:49,829
 over here in the reverse graph the

47
00:01:49,829 --> 00:01:51,600
 vertex with the highest post number is

48
00:01:51,600 --> 00:01:53,880
 gonna lie in one of these source

49
00:01:53,880 --> 00:01:55,350
 strongly connected components and

50
00:01:55,350 --> 00:01:58,320
 therefore it lies in our sink SCC in the

51
00:01:58,320 --> 00:02:00,570
 original graph so let's run DFS on this

52
00:02:00,570 --> 00:02:03,210
 graph here's an example run of DFS on

53
00:02:03,210 --> 00:02:04,740
 this reversed graph and I'll make

54
00:02:04,740 --> 00:02:06,630
 arbitrary choices for the order on the

55
00:02:06,630 --> 00:02:08,879
 vertices and on the neighbors so let's

56
00:02:08,879 --> 00:02:11,430
 choose a vertex to start DFS from let's

57
00:02:11,430 --> 00:02:13,090
 say we start from vertex C

58
00:02:13,090 --> 00:02:15,129
 we'll give see pre-order number one and

59
00:02:15,129 --> 00:02:17,980
 then from see we visit G and we give it

60
00:02:17,980 --> 00:02:20,019
 pre-order number two then we go to F

61
00:02:20,019 --> 00:02:22,959
 from F there's nobody left to explore so

62
00:02:22,959 --> 00:02:24,910
 we give it its pre-order number and it's

63
00:02:24,910 --> 00:02:26,590
 post order number only popped back up to

64
00:02:26,590 --> 00:02:30,819
 G and so on let me skip ahead from C

65
00:02:30,819 --> 00:02:32,620
 these are the vertices that we can visit

66
00:02:32,620 --> 00:02:38,620
 we can see G F B a and E and this is one

67
00:02:38,620 --> 00:02:41,170
 example of the DFS tree that we see and

68
00:02:41,170 --> 00:02:42,129
 these are the preorder and postorder

69
00:02:42,129 --> 00:02:44,590
 numbers that will get now DFS will

70
00:02:44,590 --> 00:02:46,959
 continue to an unfitted vertex let's say

71
00:02:46,959 --> 00:02:49,750
 D from D we can't get anywhere so it'll

72
00:02:49,750 --> 00:02:51,340
 just stop I'll give it a preorder and

73
00:02:51,340 --> 00:02:53,260
 postorder number then finally we'll get

74
00:02:53,260 --> 00:02:55,450
 one of these five vertices starting from

75
00:02:55,450 --> 00:02:57,849
 L this is the DFS tree we get for this

76
00:02:57,849 --> 00:02:59,709
 component and here's the preorder and

77
00:02:59,709 --> 00:03:01,900
 postorder numbers and notice the vertex

78
00:03:01,900 --> 00:03:03,849
 with the highest post order number is

79
00:03:03,849 --> 00:03:06,849
 vertex L which is in this source SCC

80
00:03:06,849 --> 00:03:09,160
 well you may think well the go-to

81
00:03:09,160 --> 00:03:11,590
 started at vertex C if he would have

82
00:03:11,590 --> 00:03:13,420
 started at one of these vertices then

83
00:03:13,420 --> 00:03:14,980
 the vertex with the highest post order

84
00:03:14,980 --> 00:03:16,720
 number would not lie in this component

85
00:03:16,720 --> 00:03:18,760
 but in fact if we would have started the

86
00:03:18,760 --> 00:03:21,579
 DFS from one of these five vertices then

87
00:03:21,579 --> 00:03:24,880
 who can be visited from that vertex well

88
00:03:24,880 --> 00:03:26,950
 we can visit all this graph except for D

89
00:03:26,950 --> 00:03:29,109
 so all these other vertices will be in

90
00:03:29,109 --> 00:03:32,200
 the subtree say of L so they'll all get

91
00:03:32,200 --> 00:03:33,790
 post order numbers which are smaller

92
00:03:33,790 --> 00:03:36,310
 than L and then finally we'll go to D

93
00:03:36,310 --> 00:03:39,459
 and D will be the last vertex visited

94
00:03:39,459 --> 00:03:41,590
 it'll have the highest post order number

95
00:03:41,590 --> 00:03:44,380
 so we'll still get a vertex with the

96
00:03:44,380 --> 00:03:46,720
 highest post order number lying in a

97
00:03:46,720 --> 00:03:49,510
 source SCC so let's take this vertex L

98
00:03:49,510 --> 00:03:52,000
 it has the highest post order number in

99
00:03:52,000 --> 00:03:54,069
 this DFS run that's the important

100
00:03:54,069 --> 00:03:56,650
 property that we needed now later we're

101
00:03:56,650 --> 00:03:58,569
 gonna explore all these vertices in this

102
00:03:58,569 --> 00:04:00,459
 component and then we're gonna need the

103
00:04:00,459 --> 00:04:02,200
 vertex with the highest post order

104
00:04:02,200 --> 00:04:04,599
 number of the remaining vertices so in

105
00:04:04,599 --> 00:04:07,060
 order to obtain that it'll be useful to

106
00:04:07,060 --> 00:04:10,389
 have all these vertices sorted by their

107
00:04:10,389 --> 00:04:12,819
 decreasing post order number so let's do

108
00:04:12,819 --> 00:04:15,340
 that so this is a list of vertices of

109
00:04:15,340 --> 00:04:17,380
 the original graph or the reverse graph

110
00:04:17,380 --> 00:04:20,349
 sorted by decreasing post order number

111
00:04:20,349 --> 00:04:22,960
 from this DFS run on the reverse graph

112
00:04:22,960 --> 00:04:25,000
 and now we're done with the reverse

113
00:04:25,000 --> 00:04:26,650
 graph and we can go back to our original

114
00:04:26,650 --> 00:04:26,980
 graph

115
00:04:26,980 --> 00:04:29,470
 here's our input graph once again now

116
00:04:29,470 --> 00:04:31,270
 what are we gonna do we're gonna run DFS

117
00:04:31,270 --> 00:04:34,060
 starting from this vertex L when we run

118
00:04:34,060 --> 00:04:37,930
 from L who do we visit we visit i j k

119
00:04:37,930 --> 00:04:40,990
 and h now as we visit these vertices

120
00:04:40,990 --> 00:04:42,730
 let's cross them out to mark that

121
00:04:42,730 --> 00:04:44,830
 they're visited and let's assign them a

122
00:04:44,830 --> 00:04:47,290
 strongly connected component number so

123
00:04:47,290 --> 00:04:48,970
 our mark these five vertices are

124
00:04:48,970 --> 00:04:50,680
 strongly connected component number one

125
00:04:50,680 --> 00:04:53,500
 now we need to continue DFS who do we

126
00:04:53,500 --> 00:04:55,300
 want to continue from we want to look at

127
00:04:55,300 --> 00:04:57,760
 this graph and we want to find a sink in

128
00:04:57,760 --> 00:04:59,740
 this remaining graph so who are we gonna

129
00:04:59,740 --> 00:05:01,540
 choose we're gonna choose the vertex

130
00:05:01,540 --> 00:05:03,520
 with the highest post order number of

131
00:05:03,520 --> 00:05:05,770
 the remaining vertices in this case it's

132
00:05:05,770 --> 00:05:09,430
 D so we run DFS from D we Explorer from

133
00:05:09,430 --> 00:05:12,790
 D D becomes visited and we mark it with

134
00:05:12,790 --> 00:05:15,040
 component number two then we run from C

135
00:05:15,040 --> 00:05:18,370
 we see these three vertices and we mark

136
00:05:18,370 --> 00:05:20,410
 them with component number three then we

137
00:05:20,410 --> 00:05:22,090
 take the highest post order number of

138
00:05:22,090 --> 00:05:25,840
 the unvisited vertices B in this case we

139
00:05:25,840 --> 00:05:28,270
 explore from B who do we see we see B

140
00:05:28,270 --> 00:05:31,870
 and E that would be component 4 finally

141
00:05:31,870 --> 00:05:35,260
 a that's component 5 valla

142
00:05:35,260 --> 00:05:36,910
 we have our strongly connected

143
00:05:36,910 --> 00:05:39,730
 components and the vertices are labeled

144
00:05:39,730 --> 00:05:41,350
 by their strongly connected component

145
00:05:41,350 --> 00:05:43,720
 number and one other very cool feature

146
00:05:43,720 --> 00:05:45,400
 what do you notice about these strongly

147
00:05:45,400 --> 00:05:47,470
 connected component numbers here are the

148
00:05:47,470 --> 00:05:49,030
 five strongly connected components

149
00:05:49,030 --> 00:05:52,270
 notice there's an edge from meta vertex

150
00:05:52,270 --> 00:05:57,400
 3 to meta vertex 1 from 4 to 1 and so on

151
00:05:57,400 --> 00:05:59,680
 these are the rest of the edges in the

152
00:05:59,680 --> 00:06:01,390
 meta graph now what do you notice about

153
00:06:01,390 --> 00:06:04,150
 these edges they all go right to left so

154
00:06:04,150 --> 00:06:05,860
 notice we've outputted these strongly

155
00:06:05,860 --> 00:06:08,560
 connected ponens in Reverse topological

156
00:06:08,560 --> 00:06:10,840
 order so it's quite amazing we've done

157
00:06:10,840 --> 00:06:13,630
 two runs of DFS one on the reverse graph

158
00:06:13,630 --> 00:06:16,240
 and one on the original graph and what

159
00:06:16,240 --> 00:06:18,340
 we found are the strongly connected

160
00:06:18,340 --> 00:06:21,310
 components of the original graph and we

161
00:06:21,310 --> 00:06:22,690
 output it these strongly connected

162
00:06:22,690 --> 00:06:26,110
 components in topological order or to be

163
00:06:26,110 --> 00:06:28,390
 precise in Reverse topological order so

164
00:06:28,390 --> 00:06:30,670
 we can take any directed graph a general

165
00:06:30,670 --> 00:06:33,070
 directed graph and with two runs of DFS

166
00:06:33,070 --> 00:06:34,840
 we can find it's strongly connected

167
00:06:34,840 --> 00:06:37,600
 components and we can structure these

168
00:06:37,600 --> 00:06:38,980
 strongly connected components in

169
00:06:38,980 --> 00:06:40,700
 topological order

170
00:06:40,700 --> 00:06:40,700
 let's formalize this algorithm

