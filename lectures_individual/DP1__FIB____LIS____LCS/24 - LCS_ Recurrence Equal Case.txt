So for a new sub problem definition, we define the recurrence for the case when the last characters of the two prefixes are different. Now, let's go look at the case where the last characters of the two prefixes are the same. So i have modified the example so that this is the case. Here, they both end in A. We're looking now at a case where X_i equals Y_j, So the last characters of the two prefixes are the same. And now, in this case, there are three possibilities to consider. As in the unequal case, we can either not include X_i in the optimal solution, in which case we drop X_i or we drop Y_j. Notice actually those two are the same in this scenario because X_i and Y_j are the same. So we're dropping X_i we're also dropping Y_j. I'm just going to foreshadow a little bit of the solution or recurrence. The other possibility which didn't exist in the unequal case is that the optimal solution ends in the common character X_i equals Y_j. As in the unequal case, what we're going to do is we're going to look at these three scenarios and we're going to take the best of the three. Now, in the first case, where we drop X_i noticed that L of i, j is equal to L of i minus one j, where we just dropped X_i from the solution, just like in the unequal case. Similarly, when we drop Y_j, L of i, j equals L_i, j minus one. Now, the interesting case which didn't exist before in the unequal case is that the optimal solution ends in this common character. And in this case, L of i, j is one plus, the one is for the common character that were pending on the end and then, we're going to take the optimal solution which drops X_i and Y_j from there and we take the optimal solution to these smaller prefixes. So this is L of i minus one and j minus one. We take the length of that optimal solution for that smaller problem, add one for this common character which we append at the end and that gives us the length of the longest common sub sequence in this new sub problem.