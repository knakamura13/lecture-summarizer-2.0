1
00:00:00,000 --> 00:00:03,280
 Why do I care about the running time to verify a solution?

2
00:00:03,280 --> 00:00:06,855
 Well, this is the key step for proving that SAT is in NP.

3
00:00:06,855 --> 00:00:09,930
 So let's go ahead and formally prove that SAT is in NP,

4
00:00:09,930 --> 00:00:11,210
 and then as part of that proof,

5
00:00:11,210 --> 00:00:13,830
 we'll see the answer to this question.

6
00:00:13,830 --> 00:00:16,005
 So let's go ahead and prove that SAT is in NP.

7
00:00:16,005 --> 00:00:18,420
 First, I've to check that it's of the correct form.

8
00:00:18,420 --> 00:00:22,190
 The correct form is that I'll output a solution if one exists,

9
00:00:22,190 --> 00:00:25,540
 and I'll output no if there is no solution.

10
00:00:25,540 --> 00:00:28,045
 So clearly, it's of the correct form.

11
00:00:28,045 --> 00:00:30,350
 Now, here's a slightly non-trivial aspect.

12
00:00:30,350 --> 00:00:34,010
 I have to show that I can verify solutions in polynomial time.

13
00:00:34,010 --> 00:00:39,210
 So if I'm given a formula f and assignment of true and false to these variables,

14
00:00:39,210 --> 00:00:44,205
 then how long does it take me to check that this assignment satisfies this formula?

15
00:00:44,205 --> 00:00:45,611
 Well, for a particular clause,

16
00:00:45,611 --> 00:00:48,120
 it takes me order_n time to check that at

17
00:00:48,120 --> 00:00:51,545
 least one of the literals in that clause is satisfied.

18
00:00:51,545 --> 00:00:53,226
 Since there are m clauses,

19
00:00:53,226 --> 00:00:56,010
 it takes me a total of order_n_m time to

20
00:00:56,010 --> 00:00:59,110
 verify that this assignment satisfies this formula.

21
00:00:59,110 --> 00:01:01,535
 So that's the solution to the previous quiz.

22
00:01:01,535 --> 00:01:06,065
 And also, we've just shown that we can verify solutions in polynomial time.

23
00:01:06,065 --> 00:01:10,745
 Therefore, SAT is a search problem and therefore SAT is in NP.

24
00:01:10,745 --> 00:01:13,920
 So if I want to prove that a problem such as SAT is in NP,

25
00:01:13,920 --> 00:01:19,860
 I have to show you, here's an algorithm which verifies solutions in polynomial time.

26
00:01:19,860 --> 00:01:21,990
 And normally, it's just going to take one or two sentences

27
00:01:21,990 --> 00:01:24,300
 to show that a particular problem is in NP,

28
00:01:24,300 --> 00:01:25,740
 that it is a search problem,

29
00:01:25,740 --> 00:01:25,740
 that we can verify solutions in polynomial time.

