Now, let's revise our subproblem definition trying to utilize some of the insight we just gained. Now, our initial attempt at a subproblem definition was k of i is the max value we can obtain using a subset of the first i objects. Now, the problem was when we tried to express K of i in terms of the earlier subproblems K1 through KI minus 1, it wasn't suffice to have the solution to Ki minus 1. But in fact what we needed was the solutions to the i minus first subproblem; we need the solution to the i minus first subproblem with the additional restriction that the total weight is no longer, at most, capital b, but its, at most, capital b minus the weight of the ith object. Because we're going to try to include the ith object and therefore, a weight available for the i minus first subproblem goes down. So this might be a sub optimal solution when the weight is capital b, but we need the optimal solution for this restricted weight. Therefore, what we're going to do is we're going to have two parameters; i and b. i is going to specify the prefix of the objects that we're going to consider. And little b is going to specify the total weight available. So then we're going to have a two dimensional table. Ok? Let's go ahead and formalize this. We're going to have two parameters,I and b as we just said. And i is going to be restricted between 0 and n, just as before. And little P is going to be restricted between 0 and capital b. And we're going to define the entry KIB. This is the entry in our two dimensional table to be the max value which we can obtain using a subset of objects 1 through i that's a prefix of the objects just as before. And the additional restriction is that the total weight is at most little b. Our goal in this problem is to compute the entry K, n, capital_B. This is the bottom right corner of this table. This corresponds to the max value which we can obtain using a subset of all n objects, n with total weight at most capital b. This is the original problem that we're trying to solve.