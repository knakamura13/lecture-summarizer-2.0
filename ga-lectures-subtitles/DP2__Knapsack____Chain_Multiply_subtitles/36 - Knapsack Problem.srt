1
00:00:00,000 --> 00:00:02,820
 The next problem we're going to discuss is the knapsack problem.

2
00:00:02,820 --> 00:00:05,220
 In this problem, the input is n objects.

3
00:00:05,220 --> 00:00:07,980
 For each object were given its weight and its value.

4
00:00:07,980 --> 00:00:11,010
 And we'll assume that the weights and the values are all integers.

5
00:00:11,010 --> 00:00:16,895
 We'll denote the weights by w1 through wn and the values by v1 through vn.

6
00:00:16,895 --> 00:00:19,500
 Now we're given one additional input parameter,

7
00:00:19,500 --> 00:00:21,420
 which is the total capacity available,

8
00:00:21,420 --> 00:00:23,575
 which will denote as capital B.

9
00:00:23,575 --> 00:00:25,725
 Our goal is to find a subset of objects.

10
00:00:25,725 --> 00:00:28,560
 We need the subset of objects to fit in the backpack.

11
00:00:28,560 --> 00:00:31,425
 That means that their total weight is in most capital B.

12
00:00:31,425 --> 00:00:36,385
 And we're trying to find the subset with maximum value, maximum total value.

13
00:00:36,385 --> 00:00:39,665
 So let's try to restate this in more precise mathematical terms.

14
00:00:39,665 --> 00:00:42,620
 What do we mean by the total weight is in most capital B.

15
00:00:42,620 --> 00:00:46,470
 We want to look at those objects which are in our subset or chosen subset.

16
00:00:46,470 --> 00:00:49,915
 So these are the i and s. We want to look at the weight of these.

17
00:00:49,915 --> 00:00:54,355
 And we want to sum over the weight and we want that total weight to be in most capital B.

18
00:00:54,355 --> 00:00:57,210
 The total value for a subset of objects is the sum over

19
00:00:57,210 --> 00:01:01,260
 the objects and the subset of their individual values.

20
00:01:01,260 --> 00:01:03,320
 And we're trying to maximize that sum.

21
00:01:03,320 --> 00:01:06,795
 We're trying to find the subset of objects with maximum value,

22
00:01:06,795 --> 00:01:10,309
 but maintaining that it fits in the backpack.

23
00:01:10,309 --> 00:01:11,780
 So their total weight is in most, B.

24
00:01:11,780 --> 00:01:16,435
 Let's summarize the problem one more time just to make sure everybody understands.

25
00:01:16,435 --> 00:01:17,910
 So we're giving as input,

26
00:01:17,910 --> 00:01:20,190
 the weights and values.

27
00:01:20,190 --> 00:01:22,220
 These are these two n numbers,

28
00:01:22,220 --> 00:01:26,575
 w1 through wn and the values v1 through vn.

29
00:01:26,575 --> 00:01:30,190
 And we're also given the total capacity, capital B.

30
00:01:30,190 --> 00:01:32,560
 Our goal is to find the subset of objects.

31
00:01:32,560 --> 00:01:34,700
 So a subset of 1 through n,

32
00:01:34,700 --> 00:01:38,850
 where that subset fits in the backpack.

33
00:01:38,850 --> 00:01:42,500
 So the chosen subset has total weight at most capital

34
00:01:42,500 --> 00:01:47,655
 B and the subset we chose has maximum total value.

35
00:01:47,655 --> 00:01:51,220
 So we're trying to find the subset with maximum value,

36
00:01:51,220 --> 00:01:53,510
 total value, and fits in the backpack.

37
00:01:53,510 --> 00:01:56,600
 You can imagine some applications of this are,

38
00:01:56,600 --> 00:02:00,290
 where we're scheduling jobs and we have limited resources or

39
00:02:00,290 --> 00:02:04,910
 limited computation time and we want to choose the jobs with most value for us.

40
00:02:04,910 --> 00:02:08,450
 But really, this is a nice toy example which is

41
00:02:08,450 --> 00:02:12,560
 going to illustrate some different style dynamic programming solution.

42
00:02:12,560 --> 00:02:14,990
 And then we're going to see many applications in the homework of

43
00:02:14,990 --> 00:02:14,990
 some variants which use this style dynamic programming solution.

