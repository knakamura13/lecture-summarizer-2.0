For a given undirected graph, how do we find it's connected components? Well, we simply run DFS and we keep track of the component number. So, each vertex is going to have its component number stored. Let me remind you of this pseudocode for DFS, because we're going to make some tweaks to it during the course of this lecture. So, the DFS algorithm takes as input a graph, G. For now, let's think of G as an undirected graph. But later, we're going to run the same algorithm on a directed graph and it's going to be identical pseudocode. And we assume that the graph is given to us in adjacency list representation. And for now, we're looking at connected components of undirected graph. So, the vertices are going to be labeled by a connected component number. We're going to have a counter which is the current connected component number. We're going to have an array which keeps track of whether we visited a vertex yet or not, and we're going to start off by initializing the visited array to false for all vertices of the graph. Now, we go through the vertices in an arbitrary order. Now, if we get to a vertex that we haven't visited yet, what do we do? Well, this means that we found a new connected component. So, we increment the connected component number and then we start exploring from this vertex. And let's now look at the subroutine for explore.