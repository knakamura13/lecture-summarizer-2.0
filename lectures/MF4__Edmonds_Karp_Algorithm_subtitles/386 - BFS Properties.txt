Now we want to prove the key lemma from the previous slide which states that for every edge of the graph in the residual graph, this edge is deleted and then reinserted later at most n_over_two times. So this deletion, insertion process can occur at most n ove_ two_times. Now of course to prove this lemma, we're going to have to use properties of the BFS. Let's recall the setting for BFS, breadth-first search. The input is a directed or undirected graph G. We're going to be working with directed graphs. Our directed graph, the residual network, we'll have edge weights. But in fact, BFS doesn't pay attention to edge weights. Now BFS also specifies as a start vertex s. Now what is the output of the breadth-first search algorithm? Well, for every vertex of the graph, so it outputs an array of size n, and dist(v) is defined as the minimum number of edges to go from s to v. Notice, this just counts the number of edges, it pays no attention to the edge weights. If we want to pay attention to the edge weights then we have to use an algorithm such as Dijkstra's algorithm. Now in addition to computing this distance for every vertex, it also finds such a path from s to v which uses the minimum number of edges.