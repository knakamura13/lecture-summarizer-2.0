Recurrence for dynamic programming in backpack problem considers two scenarios: including or excluding object i (with value Vi, weight Wi) in backpack of capacity b. If Wi â‰¤ b, consider the max of including i (gain Vi + optimal value for remaining capacity b-Wi with objects 1 to i-1) and excluding i (optimal value with same b and objects 1 to i-1). If Wi > b, can't include i, so use the latter optimal value only. Set base cases: for i=0 (empty set of objects) or b=0 (total weight available is zero), max value is zero. Fill a two-dimensional table row by row for DP algorithm, utilizing entries from previous row which represent optimal solutions to smaller subproblems.