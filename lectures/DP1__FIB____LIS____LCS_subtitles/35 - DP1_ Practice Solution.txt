Here's a solution to problem 6.1. Let's reformulate our subproblem using our insight we just gained. We wanted to add the extra condition that the subproblem had to include a_i. So we define s of i as a max sum which we can obtain from a substring of a_1 through a_i with the extra restriction that a_i has to be included in that substring. Now, we will be able to re-express a recurrence for s of i. First off, let's handle the base case; that's i equals zero. What's s of zero? Well, we have the empty string, so that's, of course, zero. Now, let's look at s of i for i at least one. Well, we are required to use a_i, so let's add an a_i. So by including a_i, this sum is at least a_i plus where do we append onto it? Well, there are two possibilities; either we just use a_i by itself or we append it on to the longest substring from a_1 through a_i minus one and we're going to take the best of those two possibilities. So if we have a_i by itself, then we get zero for the rest, for a_1 through a_i minus one, or if we take the optimal substring for a_1 through a_i minus one, what's the sum from that? Well, it's s of i minus one and we're going to take the best of these two scenarios. Now, clearly if this is negative, then we're going to just use a_i by itself, and if this is positive, then we're going to take this solution and append on a_i to it. So this gives us the recurrence, it's easy to fill the table by going from i equals zero up to n. What's the final output of the algorithm? It's not necessarily s of n because that's the longest the maximum sum from a substring which includes a_n. But we're just looking for the maximum sum we can obtain from any substring, we don't care what the last character is. So, we need to try all possibilities for the last character or number. So we do a max over i of s of i. So we take our one-dimensional table and we look for the max entry in that table and that's the output. And what's the running time of this algorithm? Well, each entry of the table takes order one time because we just have to look at two numbers and how many entries in the table are there, and there's order n. So the total run time is order n.