Let's look now at a generalization of max-flow problem. We're going to add in demand constraints along every edge. We're going to see how to reduce this generalization of the max-flow problem to the standard max-flow problem. Let's formalize this generalization of the max-flow problem. The input starts off the same as before for the max-flow problem. So we have a flow network, which consists of a director graph, G, with a specified start and end vertex, s and t, along with the capacities for every edge. Now the new aspect is that we're also given the demands for every edge. So for edge e, were giving the non-negative number, d of e, which specifies the demand for this edge. Now our goal is to find a feasible flow. What exactly do we mean by feasible flow? A feasible flow is a valid flow as before. So along every edge, the flow is in most capacity, but then we have the additional constraint, that the flow must be at least the demand along that edge. And of course, the other constraint still hold as before. So for every internal vertex, so for every vertex except for s and t, we want to flow in to equal the flow out. So we're looking for a valid flow as before with the additional constraint that the flow along every edge is at least the demand along that edge. Now if we can find a feasible flow, of course we want a feasible flow of maximum size. But the first problem is whether we can even find a feasible flow. Is there a way to satisfy all of the demands? That's the first question we're going to address. Can we figure out whether there is a feasible flow for this input? Once we find a feasible flow, then will be straightforward to augment it into a maximum size feasible flow.