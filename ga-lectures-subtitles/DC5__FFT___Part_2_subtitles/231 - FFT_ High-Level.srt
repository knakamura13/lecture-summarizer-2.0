1
00:00:00,000 --> 00:00:03,515
 >> We now have all the pieces to define the FFT algorithm.

2
00:00:03,515 --> 00:00:06,180
 Let's start with the high level idea of the algorithm once again.

3
00:00:06,180 --> 00:00:08,335
 We're given a polynomial of X.

4
00:00:08,335 --> 00:00:11,220
 We're given this polynomial by its coefficients.

5
00:00:11,220 --> 00:00:13,740
 Let's assume this polynomial is of a degree, at most N minus 1.

6
00:00:13,740 --> 00:00:19,525
 Where N is power of K. We want to evaluate this polynomial N points.

7
00:00:19,525 --> 00:00:21,990
 Now in the end, when we do polynomial multiplication,

8
00:00:21,990 --> 00:00:25,575
 we actually want this polynomial A of X at two N points.

9
00:00:25,575 --> 00:00:28,917
 In order to obtain at two N points instead of N points,

10
00:00:28,917 --> 00:00:30,720
 we can just pad the polynomial,

11
00:00:30,720 --> 00:00:32,700
 the coefficients with zeros,

12
00:00:32,700 --> 00:00:37,440
 so that we view the polynomial as a degree two N minus one polynomial.

13
00:00:37,440 --> 00:00:39,875
 Now what are the N points that we're going to choose?

14
00:00:39,875 --> 00:00:42,810
 We're going to choose the Nth roots of unity as our end points,

15
00:00:42,810 --> 00:00:46,035
 which we're going to evaluate the polynomial of A X at.

16
00:00:46,035 --> 00:00:48,635
 Now since N is a power of two,

17
00:00:48,635 --> 00:00:51,210
 so N equals two to the K for some positive

18
00:00:51,210 --> 00:00:54,020
 integer k. Then we know that these N points the,

19
00:00:54,020 --> 00:00:55,155
 Nth roots of unity,

20
00:00:55,155 --> 00:00:57,415
 satisfy the plus minus property.

21
00:00:57,415 --> 00:01:01,085
 So the first N over two are opposite of the last N over two.

22
00:01:01,085 --> 00:01:02,525
 And the other property is,

23
00:01:02,525 --> 00:01:07,140
 that the square of the Nth roots are the N over second roots.

24
00:01:07,140 --> 00:01:09,300
 Now we're going to take this polynomial A of X,

25
00:01:09,300 --> 00:01:11,955
 and we're going to define a pair of polynomials, A even, and A odd.

26
00:01:11,955 --> 00:01:14,660
 We take the even coefficients,

27
00:01:14,660 --> 00:01:16,795
 and that defines this polynomial A even.

28
00:01:16,795 --> 00:01:19,155
 We take the odd coefficients of A of X,

29
00:01:19,155 --> 00:01:21,140
 and that defines this polynomial A odd.

30
00:01:21,140 --> 00:01:23,820
 And the degree of these two polynomials is at most,

31
00:01:23,820 --> 00:01:25,470
 N over 2 minus 1.

32
00:01:25,470 --> 00:01:28,845
 So we went down from a polynomial of N minus one degree,

33
00:01:28,845 --> 00:01:32,940
 to two polynomials of degree at most N over 2 minus 1.

34
00:01:32,940 --> 00:01:37,605
 Now what we saw earlier is that in order to attain A of X at these N points,

35
00:01:37,605 --> 00:01:42,565
 we need to evaluate A even and A odd at the square of these points.

36
00:01:42,565 --> 00:01:45,800
 So what we do is we recursively evaluate A even and A odd,

37
00:01:45,800 --> 00:01:48,070
 at the square of Nth roots.

38
00:01:48,070 --> 00:01:50,120
 What's one of the key properties of the Nth roots of unity?

39
00:01:50,120 --> 00:01:56,360
 It's that the square of the Nth roots equals the N over second roots.

40
00:01:56,360 --> 00:01:58,795
 And there are N over two such roots.

41
00:01:58,795 --> 00:02:01,755
 So in order to obtain A of X at N points,

42
00:02:01,755 --> 00:02:05,010
 we need to evaluate these two polynomials, A even and A odd,

43
00:02:05,010 --> 00:02:08,910
 of half the degree, at N over two points.

44
00:02:08,910 --> 00:02:11,940
 So we've got two subproblems of exactly half the size,

45
00:02:11,940 --> 00:02:14,705
 and these subproblems are of the same form.

46
00:02:14,705 --> 00:02:17,005
 We want A of X at the Nth roots,

47
00:02:17,005 --> 00:02:20,585
 A even and A odd at the N over second roots.

48
00:02:20,585 --> 00:02:24,915
 Finally, given A even and A odd at these N over second roots,

49
00:02:24,915 --> 00:02:29,100
 it takes order and time to get A of X at the Nth roots.

50
00:02:29,100 --> 00:02:31,200
 We simply use this formula from before.

51
00:02:31,200 --> 00:02:34,200
 A of X equals A even at X square,

52
00:02:34,200 --> 00:02:37,595
 plus X times A odd at X squared.

53
00:02:37,595 --> 00:02:38,880
 So it takes order one time,

54
00:02:38,880 --> 00:02:41,160
 to compute A of X for each X,

55
00:02:41,160 --> 00:02:43,535
 in the order N axis.

56
00:02:43,535 --> 00:02:49,155
 So it takes order N total total time to compute A of X at the Nth roots of unity.

57
00:02:49,155 --> 00:02:51,925
 Finally, what will be the running time of this algorithm?

58
00:02:51,925 --> 00:02:54,405
 Well, for the original problem of size N,

59
00:02:54,405 --> 00:02:57,660
 we define two subproblems of size N over two.

60
00:02:57,660 --> 00:02:59,670
 We recursively solve those to get

61
00:02:59,670 --> 00:03:03,495
 the polynomials A even and A odd at the N over 2nd roots.

62
00:03:03,495 --> 00:03:06,415
 And then it takes us order N time to merge the answers,

63
00:03:06,415 --> 00:03:08,565
 to get A of X at the Nth roots.

64
00:03:08,565 --> 00:03:09,930
 This is the common recurrence,

65
00:03:09,930 --> 00:03:13,030
 that you've seen many times probably for merge short and stuff like that.

66
00:03:13,030 --> 00:03:15,250
 And this solves to order NlogN.

67
00:03:15,250 --> 00:03:20,085
 And this is the sketch of the algorithm to take a polynomial in the coefficients form,

68
00:03:20,085 --> 00:03:24,870
 and give return, the valuation of the polynomial at N points,

69
00:03:24,870 --> 00:03:27,250
 where the N points are the Nth roots of unity.

70
00:03:27,250 --> 00:03:27,250
 And it does so in time order NlogN.

