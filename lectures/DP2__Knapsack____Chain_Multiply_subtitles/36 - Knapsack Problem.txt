The next problem we're going to discuss is the knapsack problem. In this problem, the input is n objects. For each object were given its weight and its value. And we'll assume that the weights and the values are all integers. We'll denote the weights by w1 through wn and the values by v1 through vn. Now we're given one additional input parameter, which is the total capacity available, which will denote as capital B. Our goal is to find a subset of objects. We need the subset of objects to fit in the backpack. That means that their total weight is in most capital B. And we're trying to find the subset with maximum value, maximum total value. So let's try to restate this in more precise mathematical terms. What do we mean by the total weight is in most capital B. We want to look at those objects which are in our subset or chosen subset. So these are the i and s. We want to look at the weight of these. And we want to sum over the weight and we want that total weight to be in most capital B. The total value for a subset of objects is the sum over the objects and the subset of their individual values. And we're trying to maximize that sum. We're trying to find the subset of objects with maximum value, but maintaining that it fits in the backpack. So their total weight is in most, B. Let's summarize the problem one more time just to make sure everybody understands. So we're giving as input, the weights and values. These are these two n numbers, w1 through wn and the values v1 through vn. And we're also given the total capacity, capital B. Our goal is to find the subset of objects. So a subset of 1 through n, where that subset fits in the backpack. So the chosen subset has total weight at most capital B and the subset we chose has maximum total value. So we're trying to find the subset with maximum value, total value, and fits in the backpack. You can imagine some applications of this are, where we're scheduling jobs and we have limited resources or limited computation time and we want to choose the jobs with most value for us. But really, this is a nice toy example which is going to illustrate some different style dynamic programming solution. And then we're going to see many applications in the homework of some variants which use this style dynamic programming solution.