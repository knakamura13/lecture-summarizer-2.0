We're going to prove now, that's a subset-sum problem is NP-complete. Again, there are two parts of the proof. First, we have to prove that the subset-sum problem is in the class NP. So we take an input instance to the subset-sum problem, this is specified by and numbers a to the first through to a to the nth and t, and we take a proposed solution S. And we check that the sum over the integers in that subset equals exactly t. How long does it take to compute the sum? Well, there is the most and numbers there, so there's order n time. And then how long as each number? Well, each numbers at most log t bits. So to sum these up, takes in most O(n logt). Notice this as polynomial in the input size, so we can verify solutions in polynomial time. Next we have to show that the subset-sum problem is at least as hard as every problem in the class NP. So we have to take a known NP-complete problem, and reduce it to the subset-sum problem. Which problem do we choose? Well, we're going to choose the 3SAT problem, and we're going to reduce it to the subset-sum problem. The reduction is very clever, and somewhat involved, but it doesn't involve any heavy math or anything like that. And it really illustrates why the order n times t time algorithm, is not efficient for this subset-sum problem.