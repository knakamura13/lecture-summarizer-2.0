1
00:00:00,000 --> 00:00:03,230
 What precisely does it mean for a problem to be NP complete?

2
00:00:03,230 --> 00:00:06,130
 Let's define it now and let's use SAT as our example.

3
00:00:06,130 --> 00:00:09,230
 So what does it mean for SAT to be NP complete?

4
00:00:09,230 --> 00:00:12,820
 SAT is NP complete means the following. First off,

5
00:00:12,820 --> 00:00:15,790
 we need that SAT lies in the class NP.

6
00:00:15,790 --> 00:00:19,280
 So if we think as a class of problems that lie in NP,

7
00:00:19,280 --> 00:00:23,680
 then the first requirement is that SAT lies in this class NP.

8
00:00:23,680 --> 00:00:26,115
 So we have checked that for the SAT problem,

9
00:00:26,115 --> 00:00:28,465
 we can efficiently verify solutions.

10
00:00:28,465 --> 00:00:30,180
 And we've seen how to do that before.

11
00:00:30,180 --> 00:00:33,165
 We saw how to prove that SAT lies in the class NP.

12
00:00:33,165 --> 00:00:35,370
 Now the second requirement,

13
00:00:35,370 --> 00:00:38,550
 is that SAT is the hardest problem in this class.

14
00:00:38,550 --> 00:00:40,195
 What exactly do we mean by that?

15
00:00:40,195 --> 00:00:42,000
 Well, we're looking at these problems in terms of

16
00:00:42,000 --> 00:00:44,395
 whether we can efficiently solve them or not.

17
00:00:44,395 --> 00:00:46,830
 So for SAT to be the hardest in this class,

18
00:00:46,830 --> 00:00:50,750
 we mean that it's the least likely to have an efficient solution.

19
00:00:50,750 --> 00:00:54,345
 What's another way of saying that it's the least likely to have an efficient solution?

20
00:00:54,345 --> 00:00:57,330
 Is that, if we have an efficient solution for SAT,

21
00:00:57,330 --> 00:01:00,790
 then we have an efficient solution for every other problem in NP.

22
00:01:00,790 --> 00:01:02,445
 So let us write this down.

23
00:01:02,445 --> 00:01:06,000
 So if we can solve SAT in polynomial time then we can

24
00:01:06,000 --> 00:01:10,035
 solve every problem in NP in polynomial time. What does this mean?

25
00:01:10,035 --> 00:01:12,065
 This means for every problem in NP,

26
00:01:12,065 --> 00:01:15,795
 for example MST problem, colorings problem,

27
00:01:15,795 --> 00:01:19,755
 there are other problems such as the TSP Traveling Salesman Problem,

28
00:01:19,755 --> 00:01:22,550
 there's the independent set problem which we'll see shortly.

29
00:01:22,550 --> 00:01:24,415
 For all these problems in NP,

30
00:01:24,415 --> 00:01:28,185
 there is a reduction or transformation to the SAT problem.

31
00:01:28,185 --> 00:01:30,885
 So we can take an input for the MST problem

32
00:01:30,885 --> 00:01:34,215
 and we can transform it to an input to the SAT problem.

33
00:01:34,215 --> 00:01:37,815
 And then if we have an algorithm which efficiently solves SAT,

34
00:01:37,815 --> 00:01:40,930
 so it solves a SAT problem in polynomial time,

35
00:01:40,930 --> 00:01:44,025
 then we can use that algorithm to solve MST.

36
00:01:44,025 --> 00:01:47,250
 How? We take an input for the MST problem,

37
00:01:47,250 --> 00:01:50,845
 we reduce it to an input for the SAT problem,

38
00:01:50,845 --> 00:01:55,615
 and then we run our algorithm on the SAT problem and that gives us an output,

39
00:01:55,615 --> 00:01:57,690
 a solution to the MST problem.

40
00:01:57,690 --> 00:02:01,745
 And we can reduce all the problems in NP to SAT.

41
00:02:01,745 --> 00:02:05,040
 Therefore, if we have an algorithm to solve SAT in polynomial time,

42
00:02:05,040 --> 00:02:08,805
 we get an algorithm for all of the problems in NP.

43
00:02:08,805 --> 00:02:11,790
 Now the point is that if P is not equal to NP,

44
00:02:11,790 --> 00:02:13,740
 then we know that there are some problems in

45
00:02:13,740 --> 00:02:16,455
 NP which cannot be solved in polynomial time.

46
00:02:16,455 --> 00:02:18,540
 And therefore, we can't solve SAT in

47
00:02:18,540 --> 00:02:21,450
 polynomial time because if we could solve SAT in polynomial time,

48
00:02:21,450 --> 00:02:24,955
 then we can solve all of the problems in NP in polynomial time.

49
00:02:24,955 --> 00:02:27,780
 Since there are some problems in NP that we can't solve in

50
00:02:27,780 --> 00:02:31,740
 polynomial time under the assumption that P is not equal to NP,

51
00:02:31,740 --> 00:02:34,615
 then therefore SAT is not in polynomial time.

52
00:02:34,615 --> 00:02:37,620
 So SAT is not in the class P. So this means

53
00:02:37,620 --> 00:02:42,560
 that SAT is the computationally most difficult problem in the class NP.

54
00:02:42,560 --> 00:02:45,270
 So if you believe that P is not equal to NP,

55
00:02:45,270 --> 00:02:48,380
 then there is no polynomial time algorithm for SAT.

56
00:02:48,380 --> 00:02:53,475
 Or alternatively, if you believe that nobody knows how to prove that P equals NP,

57
00:02:53,475 --> 00:02:57,835
 then nobody knows a polynomial time algorithm for SAT.

58
00:02:57,835 --> 00:03:00,930
 So it's a reasonably fair assumption that as of right

59
00:03:00,930 --> 00:03:04,295
 now there is no polynomial time algorithm for SAT.

60
00:03:04,295 --> 00:03:07,755
 Why? Because if somebody had a polynomial time algorithm for SAT,

61
00:03:07,755 --> 00:03:10,045
 then they could prove that P equals NP.

62
00:03:10,045 --> 00:03:11,550
 And if they can prove that P equals NP,

63
00:03:11,550 --> 00:03:14,910
 they could get a fair bit of money from some mathematical prizes,

64
00:03:14,910 --> 00:03:19,110
 and they get some fame from proving that P equals NP.

65
00:03:19,110 --> 00:03:21,505
 They get a Fields Medal and so on.

66
00:03:21,505 --> 00:03:23,610
 Now let's formalize this a bit more.

67
00:03:23,610 --> 00:03:24,720
 We know how to do this step.

68
00:03:24,720 --> 00:03:28,020
 We know how to prove that SAT lies in the class NP.

69
00:03:28,020 --> 00:03:29,505
 But how do we do this step?

70
00:03:29,505 --> 00:03:32,900
 How do we prove that if there is a polynomial time algorithm for SAT,

71
00:03:32,900 --> 00:03:36,775
 then there is a polynomial time algorithm for every problem in NP?

72
00:03:36,775 --> 00:03:40,375
 So what we're going to do now is formalize this notion of a reduction.

73
00:03:40,375 --> 00:03:45,475
 We want to show a reduction from problems such as MST and colorings to the SAT problem.

74
00:03:45,475 --> 00:03:45,475
 What exactly do we mean by reducing this colorings problem to the SAT problem?

