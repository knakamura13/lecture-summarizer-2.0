In this lesson, we're going to look at connectivity algorithms using algorithms based on DFS. DFS of course, refers to depth-first search. We'll start off by reviewing DFS for undirected graphs and look at the algorithm for determining connected components and undirected graphs. That algorithm is probably familiar to many of you. After that, we'll look at DFS for directed graphs and our goal is to determine the analog of connected components for directed graphs. We begin by looking at DAGs. DAGs are directed acyclic graphs. Acyclic means that it has no cycles. We'll see how the topologically sort DAGs. What this means is that, we can order the vertices, say from left to right, so that all edges go left to right. Now, this algorithm may be familiar to many of you, but we'll use it to derive some intuition for our more sophisticated algorithms for general directed graphs. For general directed graphs, we are going to be looking to find the SCCs. These are the strongly connected components. This is the analog of connected components for directed graphs. The algorithm for finding SCCs is really sweet. It's just two DFS. Actually, it's the same DFS algorithm we found before for undirected graphs and we just run it two times and we'll find this strongly connected components of any directed graph. Now, it's a very simple algorithm but we're going to get there a bit slowly. We're going to go through all of these steps in order to derive some intuition before we get to this more general algorithm for general director graphs. So let's start with undirected graphs and let me remind you about the DFS algorithm that you've probably seen a million times.