1
00:00:00,000 --> 00:00:02,609
 Now, let's detail our dynamic programming algorithm

2
00:00:02,609 --> 00:00:04,865
 for computing the nth Fibonacci number.

3
00:00:04,865 --> 00:00:08,890
 Here's our second attempt at an algorithm for computing the nth Fibonacci number.

4
00:00:08,890 --> 00:00:12,810
 Recall, we're going to create an order array F which is going to store

5
00:00:12,810 --> 00:00:17,339
 the Fibonacci numbers and we're going to start at the small indices namely.

6
00:00:17,339 --> 00:00:18,929
 At the first two indices,

7
00:00:18,929 --> 00:00:20,539
 we store the two base cases,

8
00:00:20,539 --> 00:00:25,079
 zero and one, which are the first two Fibonacci numbers in the sequence.

9
00:00:25,079 --> 00:00:29,765
 Then we have a for loop which goes from two up to n which is our goal.

10
00:00:29,765 --> 00:00:31,785
 And using the recursive formula,

11
00:00:31,785 --> 00:00:34,079
 the ith Fibonacci number is the sum of the

12
00:00:34,079 --> 00:00:37,409
 previous two which are already stored in our array.

13
00:00:37,409 --> 00:00:40,125
 Finally, we return the nth Fibonacci number

14
00:00:40,125 --> 00:00:43,219
 which is stored in the last index in our array.

15
00:00:43,219 --> 00:00:44,850
 This completes our algorithm.

16
00:00:44,850 --> 00:00:48,609
 Notice the key thing is that our algorithm has no recursion in it.

17
00:00:48,609 --> 00:00:51,579
 We have a recursive formula which defines

18
00:00:51,579 --> 00:00:55,284
 the Fibonacci numbers but our algorithm has no recursion in it.

19
00:00:55,284 --> 00:00:58,259
 Finally, let's analyze the running time of our algorithm.

20
00:00:58,259 --> 00:01:00,899
 Once again, the base cases take order one time each.

21
00:01:00,899 --> 00:01:04,031
 Then we have a for loop of size order n.

22
00:01:04,031 --> 00:01:07,439
 The one step of the for loop takes order one time.

23
00:01:07,439 --> 00:01:09,739
 Therefore, the total time of the for loop is

24
00:01:09,739 --> 00:01:14,829
 order n time and the total run time of our algorithm is order n time.

25
00:01:14,829 --> 00:01:14,829
 This completes our algorithm and gives us a glimpse of a dynamic programming algorithm.

