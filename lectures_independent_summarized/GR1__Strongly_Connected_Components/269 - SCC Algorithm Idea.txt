The main idea of the strongly connected component (SCC) algorithm involves identifying SCCs in a topological order. In a Directed Acyclic Graph (DAG), vertices can be sorted topologically either by identifying sink vertices (with only incoming edges) and removing them, or by finding source vertices (with only outgoing edges) and removing them. For SCCs, the approach targets sink components. A sink SCC, when explored from any of its vertices using depth-first search (DFS), will only reach vertices within that SCC, unlike source SCCs that can potentially reach the entire graph. To isolate an SCC, once a vertex within it is found, DFS explores and reveals the whole component. These vertices are then removed from the graph, and the process repeats until no vertices are left. This procedure leverages the property that sink components do not have outbound edges to other SCCs, simplifying their identification and isolation. The crux of the algorithm is effectively finding vertices within sink SCCs to execute the precise exploration and extraction of components.