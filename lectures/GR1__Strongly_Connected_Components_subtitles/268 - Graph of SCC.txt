I want to look at the metagraph on strongly connected components. So we're going to have a vertex for each strongly connected component. So let's go ahead and mark the five strongly connected components, the five vertices in this metagraph. Here are the five strongly connected components, A, BE, D, CFG, and H through L. So I've marked those five vertices down here, A, BE, CFG, D, and H through L. Now, what are the edges in this metagraph? Well, some vertex in this component, BE, has an edge to some vertex in this component, CFG, namely B to C. So, we'll put an edge from this component to this component. Similarly, there's an edge from this component, BE, to D, from A to B, F to I, and E to L. Now, what do you notice about this graph? This metagraph on strongly connected components? Now, this metagraph on strongly connected components may, in fact, be a multigraph. For example, I may have an edge from G to J and then, I'll have another edge from this component to this component. So, I have a pair of edges from this component, C F G, to H through L. Now, the multiplicity doesn't matter. So we can keep those multiple edges or we can drop them. It doesn't matter. So let's go ahead and drop those multiple edges for simplicity. Either way, what is the key property of this metagraph on strongly connect components? What do you notice about this metagraph? Notice that there are no cycles. So, this metagraph is a DAG. And that's always the case. Every metagraph on strongly connected components for every directed graph is a DAG. Why is that? Why are there no cycles in this metagraph? Well, suppose there's two strongly connected components which are involved in a cycle. Then that means there's a path from somebody in this component to somebody in this component, and from somebody in this component, there's a path back to this component. Now, we know everybody in this component S is connected to each other because it's strongly connected. Everybody over here in S prime is strongly connected to each other. So, therefore if there's these paths from S to S prime and S prime to S, that means everybody in S can reach everybody in S prime and everybody in S prime can reach everybody in S. Therefore, S union, S prime is a strongly connected component. Now these components are defined to the maximal sets of strongly connected vertices. Therefore, we have a contradiction because a strongly connected component should be S union, S prime, it shouldn't be S separated from S prime. So, if there is a cycle in this metagraph, then we can merge strongly connected components together to get a larger strongly connected component and therefore we get a contradiction. Therefore, there can't be any cycles in this metagraph and thus it must be a DAG. We now have this amazing property. Every directed graph is a DAG of it's strongly connected components. So, we can break up a directed graph into strongly connected components and then we can order these strongly connected components into topological ordering because it's a DAG. So, you can take an arbitrary directed graph, which may be very complicated, and you can find this beautiful structure hidden in it. You can break it up into strongly connected components and then you can topologically sort these strongly connected components so that all edges go left to right. That's what we're going to do now. We're going to find an algorithm which is going to find the strongly connected components and it's going to find the strongly connected components in some order and the order is going to be topological ordering of these strongly connected components. So, we're going to topologically sort these strongly connected components as we find them. Now, the amazing thing is that we're going to find these strongly connected components and this topological ordering with just two runs of DFS. Now, let's dive into the algorithm to see how we're going to find these strongly connected components.