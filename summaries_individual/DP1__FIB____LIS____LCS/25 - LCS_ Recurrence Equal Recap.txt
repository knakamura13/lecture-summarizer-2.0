Recurrence for X_i equals Y_j involves three options: drop X_i (L of i-1, j), drop Y_j (L of i, j-1), or include both (gain +1, then L of i-1, j-1). However, only need to consider third option of appending common character and taking L of i-1, j-1 due to optimality. Adding unmatched characters to an optimal solution contradicts its optimality, because it would be shorter. If X_i matches an earlier Y, any subsequences in the smaller prefix of Y are also in the larger one, so later matches with X_i are equivalent or better, simplifying to just the last scenario. This insight simplifies the recurrence and completes its definition.