Now, we can look at general reduction. Consider Max-SAT input little f. Let's define the ILP. Our goal is to maximize the number of satisfied clauses, so we have a maximization problem. For each clause we have a variable Zj, which denotes whether the clause is satisfied or not. It's going to take value 1 if the clause is satisfied, and 0 if it's unsatisfied. So since we want to maximize the number of satisfied clauses, that means we want to maximize the number of clauses where the variables Zj equals 1. This sum, will be the number of satisfied clauses. Now what are the constraints? Recall we have a variable for each variable in the formula. And we also have a variable in the ILP for each clause in the formula. So, let's go over the variables in the formula first, so for i going from 1 to n, we're going to constraint Yi to be between 0 and 1. And since this is integer value, it takes value 0 or 1. Now, for each clause, similar constraint Zj takes value 0 or 1, and then we have the constraint for the clause that we just reviewed. So for Clause Zj, we look at the positive literals. So for each variable which appears in this clause in the positive form, the bad case is when that corresponding variable Yi is set to 0. That means that literal is not satisfied. Similarly for each variable which appears in the negative literal it's unsatisfied, when Yi takes value 1, which means 1 minus Yi has value 0. And we're going to impose this as an upper bound on Zj. So if all the literals in this clause are unsatisfied then Zj is forced to take value 0, so this clause is unsatisfied. And if at least one literal is satisfied and then Zj can takes value 0 or 1. And since we're maximizing, Zj will take value 1 if it can. Finally, we have the constraint that these variables, the Yi's and the Zj's are integer value. So they lie on this N dimensional grid. Actually in this case, we're in N plus M dimensions. And that defines our reduction from Max-SAT to integer linear programming. In fact it's equivalent, so this integer linear program is equivalent to the original Max-SAT problem on this in-