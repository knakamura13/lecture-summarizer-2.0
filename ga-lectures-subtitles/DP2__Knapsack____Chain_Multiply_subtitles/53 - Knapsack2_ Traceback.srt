1
00:00:00,000 --> 00:00:02,535
 So, to output the actual multi-set,

2
00:00:02,535 --> 00:00:06,510
 which obtains the optimal solution what we need to keep track of is,

3
00:00:06,510 --> 00:00:08,580
 what is the last object we add in?

4
00:00:08,580 --> 00:00:10,585
 What is the object I,

5
00:00:10,585 --> 00:00:15,345
 which we add in, which obtains this optimal solution.

6
00:00:15,345 --> 00:00:17,010
 In order to maintain that,

7
00:00:17,010 --> 00:00:19,570
 we make a separate array,

8
00:00:19,570 --> 00:00:25,560
 S. We initialize S(b)=0 corresponding to the empty set solution.

9
00:00:25,560 --> 00:00:27,670
 And then when we update our current solution.

10
00:00:27,670 --> 00:00:34,795
 So, when we get into this if then statement then we set S(b)=i corresponding to that

11
00:00:34,795 --> 00:00:39,075
 the optimal solution for this subproblem is obtained by adding

12
00:00:39,075 --> 00:00:43,965
 object I and then re-cursing on this smaller subproblem.

13
00:00:43,965 --> 00:00:47,195
 Now, we can use this set S to backtrack.

14
00:00:47,195 --> 00:00:50,445
 And, so, we can use it to produce a multi-set,

15
00:00:50,445 --> 00:00:54,060
 which obtains the maximum value.

16
00:00:54,060 --> 00:00:56,340
 The details of that backtracking are similar to

17
00:00:56,340 --> 00:00:56,340
 what we did for longest common sub-sequence.

