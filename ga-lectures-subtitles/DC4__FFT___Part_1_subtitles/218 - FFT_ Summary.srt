1
00:00:00,000 --> 00:00:02,605
 Now, let's summarize our approach.

2
00:00:02,605 --> 00:00:06,910
 We have this polynomial, A of x of degree at most n minus one,

3
00:00:06,910 --> 00:00:12,265
 and we want to evaluate this polynomial at two n points x_1 through X_2n.

4
00:00:12,265 --> 00:00:15,660
 And we get to choose these two n points however we want.

5
00:00:15,660 --> 00:00:18,630
 And we're looking at how we choose these points.

6
00:00:18,630 --> 00:00:21,810
 One very minor point that I wanted identify now is why we

7
00:00:21,810 --> 00:00:25,575
 consider this polynomial at 2n points instead of n points.

8
00:00:25,575 --> 00:00:29,355
 And in fact, later we'll go back and we'll look at it at n point,

9
00:00:29,355 --> 00:00:30,835
 instead of 2n points.

10
00:00:30,835 --> 00:00:34,340
 But for now, we want this polynomial A of x at 2n points.

11
00:00:34,340 --> 00:00:38,571
 Why? Because of our application to polynomial multiplication.

12
00:00:38,571 --> 00:00:41,130
 Recall, our first step in our construction is to

13
00:00:41,130 --> 00:00:43,865
 define this pair of polynormial Aeven, and Aodd.

14
00:00:43,865 --> 00:00:48,533
 We do this by taking the even turns of A of x to define Aeven,

15
00:00:48,533 --> 00:00:50,692
 and the odd terms define Aodd.

16
00:00:50,692 --> 00:00:55,350
 Whereas the original polynomial A of X was of degree n most n minus one.

17
00:00:55,350 --> 00:00:59,620
 Each of these polynomials is of degree at most n over to minus one,

18
00:00:59,620 --> 00:01:01,995
 so the degree went down by half.

19
00:01:01,995 --> 00:01:07,080
 Next, we recursively run the FFT algorithm on this pair of polynomials,

20
00:01:07,080 --> 00:01:10,935
 and we'll evaluate these pair of polynomials at n points.

21
00:01:10,935 --> 00:01:12,860
 What are the n points?

22
00:01:12,860 --> 00:01:14,970
 The n points that we evaluate this pair of

23
00:01:14,970 --> 00:01:17,950
 polynomials at are these points Y_1 through Y_n,

24
00:01:17,950 --> 00:01:21,810
 which are the squares of these two n points.

25
00:01:21,810 --> 00:01:25,435
 Since the original two n points satisfy the plus minus property,

26
00:01:25,435 --> 00:01:29,250
 then x_1 is the opposite of X_n plus 1.

27
00:01:29,250 --> 00:01:32,060
 So these squares are the same.

28
00:01:32,060 --> 00:01:33,690
 That's our first point Y_1.

29
00:01:33,690 --> 00:01:36,960
 X_2 is the opposite of X_n plus 2.

30
00:01:36,960 --> 00:01:39,700
 So their squares are the same and that's Y_2,

31
00:01:39,700 --> 00:01:41,820
 and so on up to Y_n,

32
00:01:41,820 --> 00:01:45,540
 which is X_n square and x_2n square.

33
00:01:45,540 --> 00:01:49,725
 Why do we want this pair of polynomials at the square of these two n points?

34
00:01:49,725 --> 00:01:54,795
 We'll recall, to evaluate this polynomial A at this point X.

35
00:01:54,795 --> 00:01:59,990
 It's straight forward if we know Aeven and Aodd at the point X square.

36
00:01:59,990 --> 00:02:03,060
 So if we know this pair of polynomials at the square of

37
00:02:03,060 --> 00:02:08,220
 these points then it's straight forward to get A at these two n points.

38
00:02:08,220 --> 00:02:11,800
 In particular, in order one time per point,

39
00:02:11,800 --> 00:02:14,895
 we can evaluate this polynomial A of x at that point,

40
00:02:14,895 --> 00:02:18,690
 using Aeven and Aodd at the square of that point.

41
00:02:18,690 --> 00:02:21,130
 So, in order n total time,

42
00:02:21,130 --> 00:02:24,450
 we can get this polynomial A of x at these two n points,

43
00:02:24,450 --> 00:02:28,740
 using Aeven and Aodd at these n points,

44
00:02:28,740 --> 00:02:31,677
 which are the squares of these two n points.

45
00:02:31,677 --> 00:02:36,730
 This is the high level idea of our divide and conquer algorithm for FFT.

46
00:02:36,730 --> 00:02:38,355
 What's the running time of this algorithm?

47
00:02:38,355 --> 00:02:42,270
 Well let T of n denote the running time of input of size n,

48
00:02:42,270 --> 00:02:46,030
 we have two sub problems of exactly half the size.

49
00:02:46,030 --> 00:02:48,155
 So, two t of n over two,

50
00:02:48,155 --> 00:02:51,600
 takes us order and time to form these two polynomials,

51
00:02:51,600 --> 00:02:55,140
 and it takes us order n time to merge their solution together,

52
00:02:55,140 --> 00:02:57,975
 to get the solution to the original problem.

53
00:02:57,975 --> 00:02:59,585
 So we get the following recurrence,

54
00:02:59,585 --> 00:03:04,920
 T of n is most two T of an over two plus order n. This is the same recurrence in

55
00:03:04,920 --> 00:03:10,705
 the classic merge sort and many of you must recall that it resolves to order n login.

56
00:03:10,705 --> 00:03:12,128
 So it looks like we have an order,

57
00:03:12,128 --> 00:03:15,615
 nlogn time algorithm to solve this problem.

58
00:03:15,615 --> 00:03:19,560
 All we need is that these two n points satisfy the plus minus property.

59
00:03:19,560 --> 00:03:25,110
 So the first n are opposite of the second n. But notice we're going to recursively

60
00:03:25,110 --> 00:03:31,200
 run this problem on this pair polynomials Aeven and Aodd with the square of these points.

61
00:03:31,200 --> 00:03:35,010
 So again, we're going to need the plus minus property for this sub problem,

62
00:03:35,010 --> 00:03:37,084
 and for all smaller subproblems.

63
00:03:37,084 --> 00:03:38,775
 Looking for this sub problem,

64
00:03:38,775 --> 00:03:41,220
 we have Y_1 through Y_n.

65
00:03:41,220 --> 00:03:45,210
 We need the first n over two to be the opposite of the second n over two.

66
00:03:45,210 --> 00:03:49,770
 It will be straightforward to define two n points which satisfy the plus minus property.

67
00:03:49,770 --> 00:03:55,033
 The challenge will be to define two n points which satisfy the plus minus property,

68
00:03:55,033 --> 00:03:59,765
 and for all recursive sub problems to also satisfy the plus minus property.

69
00:03:59,765 --> 00:03:59,765
 So let's dive into how we achieve.

