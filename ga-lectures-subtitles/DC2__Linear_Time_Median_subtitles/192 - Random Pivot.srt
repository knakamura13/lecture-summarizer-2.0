1
00:00:00,000 --> 00:00:02,890
 What's an easy scheme to find a good pivot?

2
00:00:02,890 --> 00:00:05,170
 Well, if I have no idea what to do, what should I do?

3
00:00:05,170 --> 00:00:06,935
 I might as well act randomly.

4
00:00:06,935 --> 00:00:08,580
 So in our case, what does that mean?

5
00:00:08,580 --> 00:00:10,913
 That means let P be a random element of A,

6
00:00:10,913 --> 00:00:15,060
 choose a random element of A and said that to be the pivot P. Now,

7
00:00:15,060 --> 00:00:17,905
 what's the probability that P is a good pivot?

8
00:00:17,905 --> 00:00:20,090
 Let's look at our thought experiment from before.

9
00:00:20,090 --> 00:00:22,280
 So let's look at the sorted array A.

10
00:00:22,280 --> 00:00:23,556
 We're not actually sorting A.

11
00:00:23,556 --> 00:00:26,180
 We're just looking at the sorted version of A

12
00:00:26,180 --> 00:00:29,820
 for the purposes of analyzing the probability that P is good.

13
00:00:29,820 --> 00:00:31,380
 We have the median element.

14
00:00:31,380 --> 00:00:33,720
 We have the n over four smallest,

15
00:00:33,720 --> 00:00:35,945
 and we have the 3n/4 smallest and over four smallest.

16
00:00:35,945 --> 00:00:37,790
 What are our good pivots?

17
00:00:37,790 --> 00:00:39,830
 Everybody in here is a good pivot.

18
00:00:39,830 --> 00:00:41,405
 How many good pivots are there?

19
00:00:41,405 --> 00:00:44,300
 There is exactly n over two good pivots.

20
00:00:44,300 --> 00:00:47,025
 So, what's the probability a random element is a good pivot?

21
00:00:47,025 --> 00:00:48,835
 I can order this however I won.

22
00:00:48,835 --> 00:00:51,385
 The fact is, exactly n over two of

23
00:00:51,385 --> 00:00:55,385
 these elements are good pivots and there's exactly n choices.

24
00:00:55,385 --> 00:00:59,040
 So the probability a random element is a good pivot is the number of

25
00:00:59,040 --> 00:01:03,660
 choices which lead to a good pivot divided by the total number of choices.

26
00:01:03,660 --> 00:01:06,770
 The number of good pivots is n over two and

27
00:01:06,770 --> 00:01:10,025
 the total number of choices is n. Simplifying this,

28
00:01:10,025 --> 00:01:13,955
 we get one half, exactly half the elements are good pivots.

29
00:01:13,955 --> 00:01:16,570
 So, no matter how you order this array A,

30
00:01:16,570 --> 00:01:20,580
 we've got a probability exactly a half of finding a good pivot.

31
00:01:20,580 --> 00:01:23,130
 Now, given a proposed element as a pivot,

32
00:01:23,130 --> 00:01:25,855
 how can I check whether it's a good pivot or not.

33
00:01:25,855 --> 00:01:29,475
 Well, I can just bend order and time and I can break

34
00:01:29,475 --> 00:01:33,075
 partition A into those elements smaller, equal,

35
00:01:33,075 --> 00:01:37,455
 or bigger than P. And if I keep track of their sizes as I go along

36
00:01:37,455 --> 00:01:43,025
 then I can easily check in order and time whether this proposed pivot P is good or not.

37
00:01:43,025 --> 00:01:45,010
 What happens if it's a bad pivot?

38
00:01:45,010 --> 00:01:46,770
 What should I do in that case?

39
00:01:46,770 --> 00:01:49,570
 Well, I can rerun this experiment again.

40
00:01:49,570 --> 00:01:54,510
 So, I choose a new random element of A and then I check whether it's a good pivot or not.

41
00:01:54,510 --> 00:01:55,935
 If it's still a bad pivot,

42
00:01:55,935 --> 00:01:59,850
 then I run the experiment again and I keep going until I find a good pivot.

43
00:01:59,850 --> 00:02:01,740
 Once I find a good pivot, I use it.

44
00:02:01,740 --> 00:02:04,470
 In expectation, how many times am I going to have

45
00:02:04,470 --> 00:02:07,915
 to repeat this experiment until I find a good pivot?

46
00:02:07,915 --> 00:02:09,805
 This is like flipping a coin.

47
00:02:09,805 --> 00:02:11,490
 If it ends up with tails,

48
00:02:11,490 --> 00:02:13,160
 then I'll say that's a good pivot.

49
00:02:13,160 --> 00:02:15,895
 If it ends up with heads, that's a bad pivot.

50
00:02:15,895 --> 00:02:19,550
 I got probability exactly a half of finding a good pivot.

51
00:02:19,550 --> 00:02:23,370
 So I got probably exactly a half of ending in tails.

52
00:02:23,370 --> 00:02:26,235
 I keep flipping the coin until I get tails.

53
00:02:26,235 --> 00:02:27,990
 Once I get one tails,

54
00:02:27,990 --> 00:02:30,990
 that's a good pivot and I start my experiment.

55
00:02:30,990 --> 00:02:34,470
 How many times am I going to have to flip the coin until I get A tails?

56
00:02:34,470 --> 00:02:37,005
 In expectation, twice.

57
00:02:37,005 --> 00:02:41,865
 So it's going to take me O(n) expected time to find a good pivot.

58
00:02:41,865 --> 00:02:45,615
 So the expected runtime of the whole algorithm is going to be O(n).

59
00:02:45,615 --> 00:02:47,395
 So this is a reasonable algorithm.

60
00:02:47,395 --> 00:02:51,990
 But all I have guaranteed is that the expected runtime is O(n).

61
00:02:51,990 --> 00:02:56,595
 I want an algorithm who's guaranteed worst case runtime is O(n).

62
00:02:56,595 --> 00:02:59,975
 So, how can we guarantee to find a good pivot in O(n) time?

63
00:02:59,975 --> 00:02:59,975
 That's the task we're going to try to tackle now.

