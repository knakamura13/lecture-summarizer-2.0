Bob, the receiver in RSA protocol, creates his public and private keys starting with two randomly chosen N-bit prime numbers P and Q. He verifies their primality with an efficient testing algorithm. Next, Bob selects an encryption exponent E, relatively prime to the product of (P-1)(Q-1). He initially tries E=3 and uses Euclid's GCD algorithm to verify relativeness. If unsuccessful, he continues with the next odd numbers until he finds a suitable E or resets with new primes. Multiplying P and Q, Bob gets N and can then publish his public key (N, E). For his private key, he determines D, the modular multiplicative inverse of E relative to (P-1)(Q-1), using the Extended Euclid algorithm. D remains secret, while N and E are shared publicly, completing his key setup.